#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Feb 12 16:57:18 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0 
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}


set timeout 60
spawn npx hardhat lz:deploy
match_max 100000

expect "Which networks would you like to deploy?"

# First we deselect britney
send -- " "
# We move down by pressing down array
send -- "\[B"
# Then we deselect tango
send -- " "
# Finally we confirm
send -- "\r"

expect "Which deploy script tags would you like to use?"
send -- "\r"

expect "Will deploy 1 network: vengaboys"
expect "Will use all deployment scripts"
expect "Do you want to continue?"
send -- "\r"

expect "Deploying..."
expect "Your contracts are now deployed"

expect eof
