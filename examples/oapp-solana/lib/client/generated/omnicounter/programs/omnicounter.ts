/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { ClusterFilter, Context, Program, PublicKey } from '@metaplex-foundation/umi'
import { getOmnicounterErrorFromCode, getOmnicounterErrorFromName } from '../errors'

export const OMNICOUNTER_PROGRAM_ID =
    'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay' as PublicKey<'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay'>

export function createOmnicounterProgram(): Program {
    return {
        name: 'omnicounter',
        publicKey: OMNICOUNTER_PROGRAM_ID,
        getErrorFromCode(code: number, cause?: Error) {
            return getOmnicounterErrorFromCode(code, this, cause)
        },
        getErrorFromName(name: string, cause?: Error) {
            return getOmnicounterErrorFromName(name, this, cause)
        },
        isOnCluster() {
            return true
        },
    }
}

export function getOmnicounterProgram<T extends Program = Program>(
    context: Pick<Context, 'programs'>,
    clusterFilter?: ClusterFilter
): T {
    return context.programs.get<T>('omnicounter', clusterFilter)
}

export function getOmnicounterProgramId(context: Pick<Context, 'programs'>, clusterFilter?: ClusterFilter): PublicKey {
    return context.programs.getPublicKey('omnicounter', OMNICOUNTER_PROGRAM_ID, clusterFilter)
}
