/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi'
import {
    Serializer,
    bytes,
    mapSerializer,
    publicKey as publicKeySerializer,
    struct,
    u32,
    u64,
} from '@metaplex-foundation/umi/serializers'
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared'

// Accounts.
export type SkipInboundNonceInstructionAccounts = {
    admin: Signer
    store: PublicKey | Pda
    nonceAccount: PublicKey | Pda
}

// Data.
export type SkipInboundNonceInstructionData = {
    discriminator: Uint8Array
    receiver: PublicKey
    srcEid: number
    sender: Uint8Array
    nonce: bigint
}

export type SkipInboundNonceInstructionDataArgs = {
    receiver: PublicKey
    srcEid: number
    sender: Uint8Array
    nonce: number | bigint
}

export function getSkipInboundNonceInstructionDataSerializer(): Serializer<
    SkipInboundNonceInstructionDataArgs,
    SkipInboundNonceInstructionData
> {
    return mapSerializer<SkipInboundNonceInstructionDataArgs, any, SkipInboundNonceInstructionData>(
        struct<SkipInboundNonceInstructionData>(
            [
                ['discriminator', bytes({ size: 8 })],
                ['receiver', publicKeySerializer()],
                ['srcEid', u32()],
                ['sender', bytes({ size: 32 })],
                ['nonce', u64()],
            ],
            { description: 'SkipInboundNonceInstructionData' }
        ),
        (value) => ({
            ...value,
            discriminator: new Uint8Array([230, 70, 8, 78, 166, 70, 166, 162]),
        })
    ) as Serializer<SkipInboundNonceInstructionDataArgs, SkipInboundNonceInstructionData>
}

// Args.
export type SkipInboundNonceInstructionArgs = SkipInboundNonceInstructionDataArgs

// Instruction.
export function skipInboundNonce(
    context: Pick<Context, 'programs'>,
    input: SkipInboundNonceInstructionAccounts & SkipInboundNonceInstructionArgs
): TransactionBuilder {
    // Program ID.
    const programId = context.programs.getPublicKey('omnicounter', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay')

    // Accounts.
    const resolvedAccounts = {
        admin: {
            index: 0,
            isWritable: false as boolean,
            value: input.admin ?? null,
        },
        store: {
            index: 1,
            isWritable: false as boolean,
            value: input.store ?? null,
        },
        nonceAccount: {
            index: 2,
            isWritable: true as boolean,
            value: input.nonceAccount ?? null,
        },
    } satisfies ResolvedAccountsWithIndices

    // Arguments.
    const resolvedArgs: SkipInboundNonceInstructionArgs = { ...input }

    // Accounts in order.
    const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index)

    // Keys and Signers.
    const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId)

    // Data.
    const data = getSkipInboundNonceInstructionDataSerializer().serialize(
        resolvedArgs as SkipInboundNonceInstructionDataArgs
    )

    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0

    return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }])
}
