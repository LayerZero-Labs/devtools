/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
    Account,
    Context,
    Pda,
    PublicKey,
    RpcAccount,
    RpcGetAccountOptions,
    RpcGetAccountsOptions,
    assertAccountExists,
    deserializeAccount,
    gpaBuilder,
    publicKey as toPublicKey,
} from '@metaplex-foundation/umi'
import { Serializer, bytes, mapSerializer, struct, u8 } from '@metaplex-foundation/umi/serializers'

export type Peer = Account<PeerAccountData>

export type PeerAccountData = {
    discriminator: Uint8Array
    address: Uint8Array
    bump: number
}

export type PeerAccountDataArgs = { address: Uint8Array; bump: number }

export function getPeerAccountDataSerializer(): Serializer<PeerAccountDataArgs, PeerAccountData> {
    return mapSerializer<PeerAccountDataArgs, any, PeerAccountData>(
        struct<PeerAccountData>(
            [
                ['discriminator', bytes({ size: 8 })],
                ['address', bytes({ size: 32 })],
                ['bump', u8()],
            ],
            { description: 'PeerAccountData' }
        ),
        (value) => ({
            ...value,
            discriminator: new Uint8Array([50, 8, 19, 55, 40, 253, 37, 58]),
        })
    ) as Serializer<PeerAccountDataArgs, PeerAccountData>
}

export function deserializePeer(rawAccount: RpcAccount): Peer {
    return deserializeAccount(rawAccount, getPeerAccountDataSerializer())
}

export async function fetchPeer(
    context: Pick<Context, 'rpc'>,
    publicKey: PublicKey | Pda,
    options?: RpcGetAccountOptions
): Promise<Peer> {
    const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options)
    assertAccountExists(maybeAccount, 'Peer')
    return deserializePeer(maybeAccount)
}

export async function safeFetchPeer(
    context: Pick<Context, 'rpc'>,
    publicKey: PublicKey | Pda,
    options?: RpcGetAccountOptions
): Promise<Peer | null> {
    const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options)
    return maybeAccount.exists ? deserializePeer(maybeAccount) : null
}

export async function fetchAllPeer(
    context: Pick<Context, 'rpc'>,
    publicKeys: Array<PublicKey | Pda>,
    options?: RpcGetAccountsOptions
): Promise<Peer[]> {
    const maybeAccounts = await context.rpc.getAccounts(
        publicKeys.map((key) => toPublicKey(key, false)),
        options
    )
    return maybeAccounts.map((maybeAccount) => {
        assertAccountExists(maybeAccount, 'Peer')
        return deserializePeer(maybeAccount)
    })
}

export async function safeFetchAllPeer(
    context: Pick<Context, 'rpc'>,
    publicKeys: Array<PublicKey | Pda>,
    options?: RpcGetAccountsOptions
): Promise<Peer[]> {
    const maybeAccounts = await context.rpc.getAccounts(
        publicKeys.map((key) => toPublicKey(key, false)),
        options
    )
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializePeer(maybeAccount as RpcAccount))
}

export function getPeerGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
    const programId = context.programs.getPublicKey('myoapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay')
    return gpaBuilder(context, programId)
        .registerFields<{
            discriminator: Uint8Array
            address: Uint8Array
            bump: number
        }>({
            discriminator: [0, bytes({ size: 8 })],
            address: [8, bytes({ size: 32 })],
            bump: [40, u8()],
        })
        .deserializeUsing<Peer>((account) => deserializePeer(account))
        .whereField('discriminator', new Uint8Array([50, 8, 19, 55, 40, 253, 37, 58]))
}

export function getPeerSize(): number {
    return 41
}
