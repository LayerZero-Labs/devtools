/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
    Account,
    Context,
    Option,
    OptionOrNullable,
    Pda,
    PublicKey,
    RpcAccount,
    RpcGetAccountOptions,
    RpcGetAccountsOptions,
    assertAccountExists,
    deserializeAccount,
    gpaBuilder,
    publicKey as toPublicKey,
} from '@metaplex-foundation/umi'
import {
    Serializer,
    bytes,
    mapSerializer,
    option,
    publicKey as publicKeySerializer,
    struct,
    u32,
    u8,
} from '@metaplex-foundation/umi/serializers'

export type EndpointSettings = Account<EndpointSettingsAccountData>

export type EndpointSettingsAccountData = {
    discriminator: Uint8Array
    eid: number
    bump: number
    admin: PublicKey
    lzTokenMint: Option<PublicKey>
}

export type EndpointSettingsAccountDataArgs = {
    eid: number
    bump: number
    admin: PublicKey
    lzTokenMint: OptionOrNullable<PublicKey>
}

export function getEndpointSettingsAccountDataSerializer(): Serializer<
    EndpointSettingsAccountDataArgs,
    EndpointSettingsAccountData
> {
    return mapSerializer<EndpointSettingsAccountDataArgs, any, EndpointSettingsAccountData>(
        struct<EndpointSettingsAccountData>(
            [
                ['discriminator', bytes({ size: 8 })],
                ['eid', u32()],
                ['bump', u8()],
                ['admin', publicKeySerializer()],
                ['lzTokenMint', option(publicKeySerializer())],
            ],
            { description: 'EndpointSettingsAccountData' }
        ),
        (value) => ({
            ...value,
            discriminator: new Uint8Array([221, 232, 73, 56, 10, 66, 72, 14]),
        })
    ) as Serializer<EndpointSettingsAccountDataArgs, EndpointSettingsAccountData>
}

export function deserializeEndpointSettings(rawAccount: RpcAccount): EndpointSettings {
    return deserializeAccount(rawAccount, getEndpointSettingsAccountDataSerializer())
}

export async function fetchEndpointSettings(
    context: Pick<Context, 'rpc'>,
    publicKey: PublicKey | Pda,
    options?: RpcGetAccountOptions
): Promise<EndpointSettings> {
    const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options)
    assertAccountExists(maybeAccount, 'EndpointSettings')
    return deserializeEndpointSettings(maybeAccount)
}

export async function safeFetchEndpointSettings(
    context: Pick<Context, 'rpc'>,
    publicKey: PublicKey | Pda,
    options?: RpcGetAccountOptions
): Promise<EndpointSettings | null> {
    const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options)
    return maybeAccount.exists ? deserializeEndpointSettings(maybeAccount) : null
}

export async function fetchAllEndpointSettings(
    context: Pick<Context, 'rpc'>,
    publicKeys: Array<PublicKey | Pda>,
    options?: RpcGetAccountsOptions
): Promise<EndpointSettings[]> {
    const maybeAccounts = await context.rpc.getAccounts(
        publicKeys.map((key) => toPublicKey(key, false)),
        options
    )
    return maybeAccounts.map((maybeAccount) => {
        assertAccountExists(maybeAccount, 'EndpointSettings')
        return deserializeEndpointSettings(maybeAccount)
    })
}

export async function safeFetchAllEndpointSettings(
    context: Pick<Context, 'rpc'>,
    publicKeys: Array<PublicKey | Pda>,
    options?: RpcGetAccountsOptions
): Promise<EndpointSettings[]> {
    const maybeAccounts = await context.rpc.getAccounts(
        publicKeys.map((key) => toPublicKey(key, false)),
        options
    )
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeEndpointSettings(maybeAccount as RpcAccount))
}

export function getEndpointSettingsGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
    const programId = context.programs.getPublicKey('myOapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay')
    return gpaBuilder(context, programId)
        .registerFields<{
            discriminator: Uint8Array
            eid: number
            bump: number
            admin: PublicKey
            lzTokenMint: OptionOrNullable<PublicKey>
        }>({
            discriminator: [0, bytes({ size: 8 })],
            eid: [8, u32()],
            bump: [12, u8()],
            admin: [13, publicKeySerializer()],
            lzTokenMint: [45, option(publicKeySerializer())],
        })
        .deserializeUsing<EndpointSettings>((account) => deserializeEndpointSettings(account))
        .whereField('discriminator', new Uint8Array([221, 232, 73, 56, 10, 66, 72, 14]))
}
