/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
    Account,
    Context,
    Pda,
    PublicKey,
    RpcAccount,
    RpcGetAccountOptions,
    RpcGetAccountsOptions,
    assertAccountExists,
    deserializeAccount,
    gpaBuilder,
    publicKey as toPublicKey,
} from '@metaplex-foundation/umi'
import {
    Serializer,
    bytes,
    mapSerializer,
    publicKey as publicKeySerializer,
    struct,
} from '@metaplex-foundation/umi/serializers'

/**
 * LzComposeTypesAccounts includes accounts that are used in the LzComposeTypes
 * instruction.
 */

export type LzComposeTypesAccounts = Account<LzComposeTypesAccountsAccountData>

export type LzComposeTypesAccountsAccountData = {
    discriminator: Uint8Array
    store: PublicKey
}

export type LzComposeTypesAccountsAccountDataArgs = { store: PublicKey }

export function getLzComposeTypesAccountsAccountDataSerializer(): Serializer<
    LzComposeTypesAccountsAccountDataArgs,
    LzComposeTypesAccountsAccountData
> {
    return mapSerializer<LzComposeTypesAccountsAccountDataArgs, any, LzComposeTypesAccountsAccountData>(
        struct<LzComposeTypesAccountsAccountData>(
            [
                ['discriminator', bytes({ size: 8 })],
                ['store', publicKeySerializer()],
            ],
            { description: 'LzComposeTypesAccountsAccountData' }
        ),
        (value) => ({
            ...value,
            discriminator: new Uint8Array([157, 200, 178, 122, 8, 235, 148, 103]),
        })
    ) as Serializer<LzComposeTypesAccountsAccountDataArgs, LzComposeTypesAccountsAccountData>
}

export function deserializeLzComposeTypesAccounts(rawAccount: RpcAccount): LzComposeTypesAccounts {
    return deserializeAccount(rawAccount, getLzComposeTypesAccountsAccountDataSerializer())
}

export async function fetchLzComposeTypesAccounts(
    context: Pick<Context, 'rpc'>,
    publicKey: PublicKey | Pda,
    options?: RpcGetAccountOptions
): Promise<LzComposeTypesAccounts> {
    const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options)
    assertAccountExists(maybeAccount, 'LzComposeTypesAccounts')
    return deserializeLzComposeTypesAccounts(maybeAccount)
}

export async function safeFetchLzComposeTypesAccounts(
    context: Pick<Context, 'rpc'>,
    publicKey: PublicKey | Pda,
    options?: RpcGetAccountOptions
): Promise<LzComposeTypesAccounts | null> {
    const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options)
    return maybeAccount.exists ? deserializeLzComposeTypesAccounts(maybeAccount) : null
}

export async function fetchAllLzComposeTypesAccounts(
    context: Pick<Context, 'rpc'>,
    publicKeys: Array<PublicKey | Pda>,
    options?: RpcGetAccountsOptions
): Promise<LzComposeTypesAccounts[]> {
    const maybeAccounts = await context.rpc.getAccounts(
        publicKeys.map((key) => toPublicKey(key, false)),
        options
    )
    return maybeAccounts.map((maybeAccount) => {
        assertAccountExists(maybeAccount, 'LzComposeTypesAccounts')
        return deserializeLzComposeTypesAccounts(maybeAccount)
    })
}

export async function safeFetchAllLzComposeTypesAccounts(
    context: Pick<Context, 'rpc'>,
    publicKeys: Array<PublicKey | Pda>,
    options?: RpcGetAccountsOptions
): Promise<LzComposeTypesAccounts[]> {
    const maybeAccounts = await context.rpc.getAccounts(
        publicKeys.map((key) => toPublicKey(key, false)),
        options
    )
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeLzComposeTypesAccounts(maybeAccount as RpcAccount))
}

export function getLzComposeTypesAccountsGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
    const programId = context.programs.getPublicKey('myoapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay')
    return gpaBuilder(context, programId)
        .registerFields<{ discriminator: Uint8Array; store: PublicKey }>({
            discriminator: [0, bytes({ size: 8 })],
            store: [8, publicKeySerializer()],
        })
        .deserializeUsing<LzComposeTypesAccounts>((account) => deserializeLzComposeTypesAccounts(account))
        .whereField('discriminator', new Uint8Array([157, 200, 178, 122, 8, 235, 148, 103]))
}

export function getLzComposeTypesAccountsSize(): number {
    return 40
}
