/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Context, Pda, PublicKey, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi'
import { Serializer, bytes, mapSerializer, struct } from '@metaplex-foundation/umi/serializers'
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared'
import { LzComposeParams, LzComposeParamsArgs, getLzComposeParamsSerializer } from '../types'

// Accounts.
export type LzComposeTypesInstructionAccounts = {
    store: PublicKey | Pda
}

// Data.
export type LzComposeTypesInstructionData = {
    discriminator: Uint8Array
    params: LzComposeParams
}

export type LzComposeTypesInstructionDataArgs = { params: LzComposeParamsArgs }

export function getLzComposeTypesInstructionDataSerializer(): Serializer<
    LzComposeTypesInstructionDataArgs,
    LzComposeTypesInstructionData
> {
    return mapSerializer<LzComposeTypesInstructionDataArgs, any, LzComposeTypesInstructionData>(
        struct<LzComposeTypesInstructionData>(
            [
                ['discriminator', bytes({ size: 8 })],
                ['params', getLzComposeParamsSerializer()],
            ],
            { description: 'LzComposeTypesInstructionData' }
        ),
        (value) => ({
            ...value,
            discriminator: new Uint8Array([112, 121, 229, 66, 151, 84, 64, 50]),
        })
    ) as Serializer<LzComposeTypesInstructionDataArgs, LzComposeTypesInstructionData>
}

// Args.
export type LzComposeTypesInstructionArgs = LzComposeTypesInstructionDataArgs

// Instruction.
export function lzComposeTypes(
    context: Pick<Context, 'programs'>,
    input: LzComposeTypesInstructionAccounts & LzComposeTypesInstructionArgs
): TransactionBuilder {
    // Program ID.
    const programId = context.programs.getPublicKey('myoapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay')

    // Accounts.
    const resolvedAccounts = {
        store: {
            index: 0,
            isWritable: false as boolean,
            value: input.store ?? null,
        },
    } satisfies ResolvedAccountsWithIndices

    // Arguments.
    const resolvedArgs: LzComposeTypesInstructionArgs = { ...input }

    // Accounts in order.
    const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index)

    // Keys and Signers.
    const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId)

    // Data.
    const data = getLzComposeTypesInstructionDataSerializer().serialize(
        resolvedArgs as LzComposeTypesInstructionDataArgs
    )

    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0

    return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }])
}
