/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
    GetDataEnumKind,
    GetDataEnumKindContent,
    Serializer,
    bytes,
    dataEnum,
    struct,
    tuple,
    u32,
} from '@metaplex-foundation/umi/serializers'

export type PeerConfigParam =
    | { __kind: 'PeerAddress'; fields: [Uint8Array] }
    | { __kind: 'EnforcedOptions'; send: Uint8Array; sendAndCall: Uint8Array }

export type PeerConfigParamArgs = PeerConfigParam

export function getPeerConfigParamSerializer(): Serializer<PeerConfigParamArgs, PeerConfigParam> {
    return dataEnum<PeerConfigParam>(
        [
            [
                'PeerAddress',
                struct<GetDataEnumKindContent<PeerConfigParam, 'PeerAddress'>>([
                    ['fields', tuple([bytes({ size: 32 })])],
                ]),
            ],
            [
                'EnforcedOptions',
                struct<GetDataEnumKindContent<PeerConfigParam, 'EnforcedOptions'>>([
                    ['send', bytes({ size: u32() })],
                    ['sendAndCall', bytes({ size: u32() })],
                ]),
            ],
        ],
        { description: 'PeerConfigParam' }
    ) as Serializer<PeerConfigParamArgs, PeerConfigParam>
}

// Data Enum Helpers.
export function peerConfigParam(
    kind: 'PeerAddress',
    data: GetDataEnumKindContent<PeerConfigParamArgs, 'PeerAddress'>['fields']
): GetDataEnumKind<PeerConfigParamArgs, 'PeerAddress'>
export function peerConfigParam(
    kind: 'EnforcedOptions',
    data: GetDataEnumKindContent<PeerConfigParamArgs, 'EnforcedOptions'>
): GetDataEnumKind<PeerConfigParamArgs, 'EnforcedOptions'>
export function peerConfigParam<K extends PeerConfigParamArgs['__kind']>(
    kind: K,
    data?: any
): Extract<PeerConfigParamArgs, { __kind: K }> {
    return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) }
}
export function isPeerConfigParam<K extends PeerConfigParam['__kind']>(
    kind: K,
    value: PeerConfigParam
): value is PeerConfigParam & { __kind: K } {
    return value.__kind === kind
}
