// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import { Script, console } from "forge-std/Script.sol";

contract ExecutorCompose302Script is Script {
    IExecutor public executor = IExecutor(0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897);

    function run() public {
        address _from = 0x130853D8212878F8b7Dda6D98e4cB52E09899485;
        address _to = 0xD06487aCfebAb0F73300e726f0E5f341F4F2B510;
        bytes32 _guid = 0xb8be4ae5b90dfd06ad6363fd5736d08a9e789137bab4b094d9395556f07d0d3a;
        uint16 _index = 0;
        bytes
            memory _message = hex"000000000000000700009d280000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000c632389d59e494750920161960c9e5867c59db1800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000009d35000000000000000000000000c632389d59e494750920161960c9e5867c59db180000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        bytes memory _extraData = "";
        uint256 _gasLimit = 200000;

        uint256 msgValue = 0.000025 ether;

        uint256 gasLimit = 200000;

        vm.startBroadcast();

        executor.compose302{ value: msgValue, gas: gasLimit }(
            _from,
            _to,
            _guid,
            _index,
            _message,
            _extraData,
            _gasLimit
        );
        vm.stopBroadcast();
    }
}

interface IExecutor {
    function compose302(
        address _from,
        address _to,
        bytes32 _guid,
        uint16 _index,
        bytes calldata _message,
        bytes calldata _extraData,
        uint256 _gasLimit
    ) external payable;
}
