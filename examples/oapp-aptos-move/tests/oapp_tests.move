#[test_only]
module oapp::oapp_tests {

    use oapp::oapp::parse_message;

    #[test]
    fun test_parse_message() {
        let expected_addr1 = @0x1234567890123456789012345678901234567890;
        let expected_addr2 = @0x9876543210987654321098765432109876543210;
        let expected_number: u256 = 123456789012345678901234567890;

        let encoded_data = x"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c23078303030303030303030303030303030303030303030303030313233343536373839303132333435363738393031323334353637383930313233343536373839303030303030303030303030303030303030303030303030303938373635343332313039383736353433323130393837363534333231303938373635343332313030303030303030303030303030303030303030303030303030303030303030303030303030303031386565393066663663333733653065653465336630616432000000000000000000000000000000000000000000000000000000000000";

        let (actual_addr1, actual_addr2, actual_number) = parse_message(encoded_data);

        assert!(actual_addr1 == expected_addr1, 1);
        assert!(actual_addr2 == expected_addr2, 2);
        assert!(actual_number == expected_number, 3);
    }

    #[test]
    fun test_parse_message_with_prefix() {
        let expected_addr1 = @0x58b730d07e98a22f2b357bee721115c986e4dc873c1884763708ee3d4006f74e;
        let expected_addr2 = @0x58b730d07e98a22f2b357bee721115c986e4dc873c1884763708ee3d4006f74e;
        let expected_number: u256 = 123456789012345678901234567890;

        let encoded_data = x"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c23078353862373330643037653938613232663262333537626565373231313135633938366534646338373363313838343736333730386565336434303036663734653538623733306430376539386132326632623335376265653732313131356339383665346463383733633138383437363337303865653364343030366637346530303030303030303030303030303030303030303030303030303030303030303030303030303031386565393066663663333733653065653465336630616432000000000000000000000000000000000000000000000000000000000000";

        let (actual_addr1, actual_addr2, actual_number) = parse_message(encoded_data);

        std::debug::print(&actual_addr1);
        std::debug::print(&actual_addr2);
        std::debug::print(&actual_number);

        assert!(actual_addr1 == expected_addr1, 1);
        assert!(actual_addr2 == expected_addr2, 2);
        assert!(actual_number == expected_number, 3);
    }
} 