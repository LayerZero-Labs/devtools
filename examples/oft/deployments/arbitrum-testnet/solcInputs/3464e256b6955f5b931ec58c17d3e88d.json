{
  "language": "Solidity",
  "sources": {
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/interfaces/IReceiveUlnE2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\n/// @dev should be implemented by the ReceiveUln302 contract and future ReceiveUln contracts on EndpointV2\ninterface IReceiveUlnE2 {\n    /// @notice for each dvn to verify the payload\n    /// @dev this function signature 0x0223536e\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external;\n\n    /// @notice verify the payload at endpoint, will check if all DVNs verified\n    function commitVerification(bytes calldata _packetHeader, bytes32 _payloadHash) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/mocks/SimpleDVN.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IReceiveUlnE2 } from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/interfaces/IReceiveUlnE2.sol\";\n\n// A message on the destination chain has to go through three steps:\n// 1. verify -> 2. commit -> 3. execute\n\n/**\n * @title SimpleDVN\n * @notice A minimal DVN for manually verifying messages, for development use on testnets. Not for production. Deploy this on the destination chain.\n * @dev We accept sender and receiver as bytes32 to handle arbitrary remote address formats.\n */\ncontract SimpleDVN is Ownable {\n\n    error InvalidLocalEid(uint32 expected, uint32 got);\n    event PayloadVerified(bytes32 indexed guid);\n    event PayloadCommitted(bytes32 indexed guid);\n\n    // Version prefix for Packet encoding (mirrors PacketV1Codec but without assumptions about address types)\n    uint8 public constant PACKET_VERSION = 1;\n\n    // Local chain EID for this ReceiveUln\n    uint32 public immutable localEid;\n\n    // ULN-302 on this chain\n    IReceiveUlnE2 public immutable receiveUln;\n\n    /// @param _receiveUln  Address of this chain's deployed ReceiveUln302\n    /// @param _localEid    EID of this chain (receive/destination side)\n    constructor(address _receiveUln, uint32 _localEid) Ownable(msg.sender) {\n        receiveUln = IReceiveUlnE2(_receiveUln);\n        localEid = _localEid;\n    }\n\n    /**\n     * @notice Manually verifies a packet sent to this chain.\n     * @dev This is the first function that should be called in the message verification process.\n     * @dev Accepts all address fields as bytes32 to support non-EVM senders (e.g. Solana pubkeys).\n     * @param _message      Raw message (e.g., v1 OFT send: [PT_SEND || receiver || amountSD])\n     * @param _nonce        LayerZero channel nonce\n     * @param _srcEid    Source chain EID\n     * @param _remoteOApp   Sender address on source chain as bytes32 (no casting)\n     * @param _dstEid     Destination chain EID (should match contractâ€™s localEid)\n     * @param _localOApp    Receiver address on this chain (standard EVM address)\n     */\n    function verify(\n        bytes calldata _message,\n        uint64 _nonce,\n        uint32 _srcEid,\n        bytes32 _remoteOApp,\n        uint32 _dstEid,\n        address _localOApp\n    ) external onlyOwner {\n        // Ensure localEid matches contract's localEid\n        if (_dstEid != localEid) {\n            revert InvalidLocalEid(localEid, _dstEid);\n        }\n        // Convert local EVM address to bytes32 for GUID and header\n        bytes32 localOAppB32 = bytes32(uint256(uint160(_localOApp)));\n\n        /*\n         * 1. Rebuild ULN-302 GUID:\n         *    keccak256(_nonce || _srcEid || _remoteOApp || _dstEid || localAppB32)\n         * Using bytes32 for _remoteOApp means no assumption on address encoding.\n         */\n        bytes32 _guid = _encodeGuid(_nonce, _srcEid, _remoteOApp, _dstEid, localOAppB32);\n\n        /*\n         * 2. Call ULN verify:\n         *    - Header only includes version, nonce, EIDs, and raw bytes32 sender/receiver\n         *    - PayloadHash = keccak256(guid || message)\n         *    We pass confirmations=1 to finalize immediately once our DVN signs.\n         */\n        receiveUln.verify(\n            _encodeHeader(_nonce, _srcEid, _remoteOApp, _dstEid, localOAppB32),\n            _encodePayloadHash(_guid, _message),\n            1\n        );\n        // Emit event for successful verification\n        emit PayloadVerified(_guid);\n    }\n\n    /**\n     * @notice Manually commits a packet for execution.\n     * @dev Accepts all address fields as bytes32 to support non-EVM senders (e.g. Solana pubkeys).\n     * @param _message      Raw message (e.g., v1 OFT send: [PT_SEND || receiver || amountSD])\n     * @param _nonce        LayerZero channel nonce\n     * @param _srcEid    Source chain EID\n     * @param _remoteOApp   Sender address on source chain as bytes32 (no casting)\n     * @param _dstEid     Destination chain EID (should match contract's localEid)\n     * @param _localOApp    Receiver address on this chain (standard EVM address)\n     */\n    function commit(\n        bytes calldata _message,\n        uint64 _nonce,\n        uint32 _srcEid,\n        bytes32 _remoteOApp,\n        uint32 _dstEid,\n        address _localOApp\n    ) external onlyOwner {\n        // Ensure localEid matches contract's localEid\n        if (_dstEid != localEid) {\n            revert InvalidLocalEid(localEid, _dstEid);\n        }\n        // Convert local EVM address to bytes32 for GUID and header\n        bytes32 localOAppB32 = bytes32(uint256(uint160(_localOApp)));\n        /*\n         * 1. Rebuild ULN-302 GUID:\n         *    keccak256(_nonce || _srcEid || _remoteOApp || _dstEid || localAppB32)\n         * Using bytes32 for _remoteOApp means no assumption on address encoding.\n         */\n        bytes32 _guid = _encodeGuid(_nonce, _srcEid, _remoteOApp, _dstEid, localOAppB32);\n\n        /*\n         * 2. Call ULN commit:\n         *    - payloadHeader = nonce || srcEid || sender || dstEid || receiver\n         *    - payloadHash = keccak256(guid || message)\n         */\n\n        receiveUln.commitVerification(\n            _encodeHeader(_nonce, _srcEid, _remoteOApp, _dstEid, localOAppB32),\n            _encodePayloadHash(_guid, _message)\n        );\n        // Emit event for successful commit\n        emit PayloadCommitted(_guid);\n    }\n    /**\n     * @dev Encodes packet header.\n     * Works on arbitrary bytes32 sender/receiver values.\n     */\n    function _encodeHeader(\n        uint64 _nonce,\n        uint32 _srcEid, // _srcEid\n        bytes32 _sender,\n        uint32 _dstEid, // _dstEid\n        bytes32 _receiver\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(PACKET_VERSION, _nonce, _srcEid, _sender, _dstEid, _receiver);\n    }\n\n    /**\n     * @dev Encodes payload portion (GUID + message) for ULN-302 into a keccak256 hash.\n     */\n    function _encodePayloadHash(bytes32 _guid, bytes memory _message) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_guid, _message));\n    }\n\n    /**\n     * @dev Encodes ULN-302 GUID.\n     */\n    function _encodeGuid(\n        uint64 _nonce,\n        uint32 _srcEid,\n        bytes32 _sender,\n        uint32 _dstEid,\n        bytes32 _receiver\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_nonce, _srcEid, _sender, _dstEid, _receiver));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
