{
  "address": "0xAc40e69e4808E28B59f619d353Bb7fb83AD7Cc87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_readChannel",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        }
      ],
      "name": "AggregatedPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHAIN_A_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_A_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_A_QUOTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_A_USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_A_WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_B_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_B_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_B_QUOTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_B_USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_B_WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_C_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_C_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_C_QUOTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_C_USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_C_WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "READ_CHANNEL",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "chainConfigs",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "quoterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenInAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOutAddress",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCmd",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_response",
          "type": "bytes"
        }
      ],
      "name": "lzMap",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_responses",
          "type": "bytes[]"
        }
      ],
      "name": "lzReduce",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteAverageUniswapPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "readAverageUniswapPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_channelId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setReadChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "targetEids",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x449a93044f58eee8ec7aa21433ab53fe33e49e74d27695c0d84600fcf4c657d3",
  "receipt": {
    "to": null,
    "from": "0xed422098669cBB60CAAf26E01485bAFdbAF9eBEA",
    "contractAddress": "0xAc40e69e4808E28B59f619d353Bb7fb83AD7Cc87",
    "transactionIndex": 1,
    "gasUsed": "14827804",
    "logsBloom": "0x00000800200000000000000000000000000000000000000000800000001000000000000400000000000000000000000000000002000000000800000000000100000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000010000000040000000000400000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000002000000000400000000000000000000000000000000000000000000000000040000000020000000000000000000000000000000000000000000010000000000000000000000",
    "blockHash": "0x2d7a6e0545acdf0a00ff14804e2f4b1035c449f4a2591fdf96f09a6e22e10ade",
    "transactionHash": "0x449a93044f58eee8ec7aa21433ab53fe33e49e74d27695c0d84600fcf4c657d3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 273574048,
        "transactionHash": "0x449a93044f58eee8ec7aa21433ab53fe33e49e74d27695c0d84600fcf4c657d3",
        "address": "0xAc40e69e4808E28B59f619d353Bb7fb83AD7Cc87",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed422098669cbb60caaf26e01485bafdbaf9ebea"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2d7a6e0545acdf0a00ff14804e2f4b1035c449f4a2591fdf96f09a6e22e10ade"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 273574048,
        "transactionHash": "0x449a93044f58eee8ec7aa21433ab53fe33e49e74d27695c0d84600fcf4c657d3",
        "address": "0x1a44076050125825900e736c501f859c50fE728c",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x000000000000000000000000ac40e69e4808e28b59f619d353bb7fb83ad7cc87000000000000000000000000ed422098669cbb60caaf26e01485bafdbaf9ebea",
        "logIndex": 1,
        "blockHash": "0x2d7a6e0545acdf0a00ff14804e2f4b1035c449f4a2591fdf96f09a6e22e10ade"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 273574048,
        "transactionHash": "0x449a93044f58eee8ec7aa21433ab53fe33e49e74d27695c0d84600fcf4c657d3",
        "address": "0xAc40e69e4808E28B59f619d353Bb7fb83AD7Cc87",
        "topics": [
          "0x238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000ac40e69e4808e28b59f619d353bb7fb83ad7cc87",
        "logIndex": 2,
        "blockHash": "0x2d7a6e0545acdf0a00ff14804e2f4b1035c449f4a2591fdf96f09a6e22e10ade"
      }
    ],
    "blockNumber": 273574048,
    "cumulativeGasUsed": "14827804",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x1a44076050125825900e736c501f859c50fE728c", 4294967295],
  "numDeployments": 3,
  "solcInputHash": "13e8677d551007d6cfb8c5c05b8ab79a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_readChannel\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"}],\"name\":\"AggregatedPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_A_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_A_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_A_QUOTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_A_USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_A_WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_B_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_B_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_B_QUOTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_B_USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_B_WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_C_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_C_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_C_QUOTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_C_USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_C_WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READ_CHANNEL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chainConfigs\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"quoterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenInAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOutAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCmd\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_response\",\"type\":\"bytes\"}],\"name\":\"lzMap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_responses\",\"type\":\"bytes[]\"}],\"name\":\"lzReduce\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteAverageUniswapPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"readAverageUniswapPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_channelId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setReadChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetEids\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Extends OAppRead and OAppOptionsType3 for cross-chain read and compute operations.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"AggregatedPrice(uint256)\":{\"params\":{\"averagePrice\":\"The calculated average token price (USDC amount).\"}}},\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"constructor\":{\"params\":{\"_endpoint\":\"The LayerZero endpoint contract address.\",\"_readChannel\":\"The LayerZero read channel ID.\"}},\"getCmd()\":{\"returns\":{\"_0\":\"cmd The encoded command to request Uniswap quotes.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzMap(bytes,bytes)\":{\"params\":{\"_response\":\"The response from the read request.\"},\"returns\":{\"_0\":\"Encoded token output amount (USDC amount).\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"lzReduce(bytes,bytes[])\":{\"params\":{\"_responses\":\"Array of mapped responses containing token output amounts.\"},\"returns\":{\"_0\":\"Encoded average token output amount.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteAverageUniswapPrice(bytes,bool)\":{\"params\":{\"_extraOptions\":\"Additional messaging options.\",\"_payInLzToken\":\"Boolean flag indicating whether to pay in LayerZero tokens.\"},\"returns\":{\"fee\":\"The estimated messaging fee.\"}},\"readAverageUniswapPrice(bytes)\":{\"params\":{\"_extraOptions\":\"Additional messaging options, including gas and fee settings.\"},\"returns\":{\"receipt\":\"The LayerZero messaging receipt for the request.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"setReadChannel(uint32,bool)\":{\"params\":{\"_active\":\"Flag to activate or deactivate the channel.\",\"_channelId\":\"The channel ID to set.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"UniswapQuoteDemo\",\"version\":1},\"userdoc\":{\"events\":{\"AggregatedPrice(uint256)\":{\"notice\":\"Emitted when the aggregated average token price is computed and received.\"}},\"kind\":\"user\",\"methods\":{\"READ_CHANNEL()\":{\"notice\":\"LayerZero read channel ID.\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"chainConfigs(uint32)\":{\"notice\":\"Mapping to store chain configurations indexed by target chain ID (targetEid).\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"constructor\":{\"notice\":\"Constructor to initialize the UniswapQuoteDemo contract with hardcoded chain configurations.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"getCmd()\":{\"notice\":\"Constructs a command to query the Uniswap QuoterV2 for WETH/USDC prices on all configured chains.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"lzMap(bytes,bytes)\":{\"notice\":\"Processes individual Uniswap QuoterV2 responses, encoding the result.\"},\"lzReduce(bytes,bytes[])\":{\"notice\":\"Aggregates individual token output amounts to compute an average.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"quoteAverageUniswapPrice(bytes,bool)\":{\"notice\":\"Quotes the estimated messaging fee for querying Uniswap QuoterV2 for WETH/USDC prices.\"},\"readAverageUniswapPrice(bytes)\":{\"notice\":\"Sends a read request to LayerZero, querying Uniswap QuoterV2 for WETH/USDC prices on configured chains.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"},\"setReadChannel(uint32,bool)\":{\"notice\":\"Sets the LayerZero read channel, enabling or disabling it based on `_active`.\"},\"targetEids(uint256)\":{\"notice\":\"Array to store all active targetEids for iteration.\"}},\"notice\":\"Simplified contract to query WETH/USDC prices on three chains and compute their average using LayerZero and Uniswap V3 QuoterV2.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3QuoteDemo.sol\":\"UniswapV3QuoteDemo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppRead.sol\":{\"content\":\"pragma solidity ^0.8.20;\\n\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { OApp } from \\\"./OApp.sol\\\";\\n\\nabstract contract OAppRead is OApp {\\n    constructor(address _endpoint, address _delegate) OApp(_endpoint, _delegate) {}\\n\\n    // -------------------------------\\n    // Only Owner\\n    function setReadChannel(uint32 _channelId, bool _active) public virtual onlyOwner {\\n        _setPeer(_channelId, _active ? AddressCast.toBytes32(address(this)) : bytes32(0));\\n    }\\n}\\n\",\"keccak256\":\"0x72774391cb91eb6ce2830c3680e5b9f40101c5de5328fdca34b2be929b8b1f6a\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/ReadCodecV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nstruct EVMCallRequestV1 {\\n    uint16 appRequestLabel; // Label identifying the application or type of request (can be use in lzCompute)\\n    uint32 targetEid; // Target endpoint ID (representing a target blockchain)\\n    bool isBlockNum; // True if the request = block number, false if timestamp\\n    uint64 blockNumOrTimestamp; // Block number or timestamp to use in the request\\n    uint16 confirmations; // Number of block confirmations on top of the requested block number or timestamp before the view function can be called\\n    address to; // Address of the target contract on the target chain\\n    bytes callData; // Calldata for the contract call\\n}\\n\\nstruct EVMCallComputeV1 {\\n    uint8 computeSetting; // Compute setting (0 = map only, 1 = reduce only, 2 = map reduce)\\n    uint32 targetEid; // Target endpoint ID (representing a target blockchain)\\n    bool isBlockNum; // True if the request = block number, false if timestamp\\n    uint64 blockNumOrTimestamp; // Block number or timestamp to use in the request\\n    uint16 confirmations; // Number of block confirmations on top of the requested block number or timestamp before the view function can be called\\n    address to; // Address of the target contract on the target chain\\n}\\n\\nlibrary ReadCodecV1 {\\n    using SafeCast for uint256;\\n\\n    uint16 internal constant CMD_VERSION = 1;\\n\\n    uint8 internal constant REQUEST_VERSION = 1;\\n    uint16 internal constant RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL = 1;\\n\\n    uint8 internal constant COMPUTE_VERSION = 1;\\n    uint16 internal constant COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL = 1;\\n\\n    error InvalidVersion();\\n    error InvalidType();\\n\\n    function decode(\\n        bytes calldata _cmd\\n    )\\n        internal\\n        pure\\n        returns (uint16 appCmdLabel, EVMCallRequestV1[] memory evmCallRequests, EVMCallComputeV1 memory compute)\\n    {\\n        uint256 offset = 0;\\n        uint16 cmdVersion = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n        if (cmdVersion != CMD_VERSION) revert InvalidVersion();\\n\\n        appCmdLabel = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n\\n        (evmCallRequests, offset) = decodeRequestsV1(_cmd, offset);\\n\\n        // decode the compute if it exists\\n        if (offset < _cmd.length) {\\n            (compute, ) = decodeEVMCallComputeV1(_cmd, offset);\\n        }\\n    }\\n\\n    function decodeRequestsV1(\\n        bytes calldata _cmd,\\n        uint256 _offset\\n    ) internal pure returns (EVMCallRequestV1[] memory evmCallRequests, uint256 newOffset) {\\n        newOffset = _offset;\\n        uint16 requestCount = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n\\n        evmCallRequests = new EVMCallRequestV1[](requestCount);\\n        for (uint16 i = 0; i < requestCount; i++) {\\n            uint8 requestVersion = uint8(_cmd[newOffset]);\\n            newOffset += 1;\\n            if (requestVersion != REQUEST_VERSION) revert InvalidVersion();\\n\\n            uint16 appRequestLabel = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n            newOffset += 2;\\n\\n            uint16 resolverType = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n            newOffset += 2;\\n\\n            if (resolverType == RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL) {\\n                (EVMCallRequestV1 memory request, uint256 nextOffset) = decodeEVMCallRequestV1(\\n                    _cmd,\\n                    newOffset,\\n                    appRequestLabel\\n                );\\n                newOffset = nextOffset;\\n                evmCallRequests[i] = request;\\n            } else {\\n                revert InvalidType();\\n            }\\n        }\\n    }\\n\\n    function decodeEVMCallRequestV1(\\n        bytes calldata _cmd,\\n        uint256 _offset,\\n        uint16 _appRequestLabel\\n    ) internal pure returns (EVMCallRequestV1 memory request, uint256 newOffset) {\\n        newOffset = _offset;\\n        request.appRequestLabel = _appRequestLabel;\\n\\n        uint16 requestSize = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        request.targetEid = uint32(bytes4(_cmd[newOffset:newOffset + 4]));\\n        newOffset += 4;\\n        request.isBlockNum = uint8(_cmd[newOffset]) == 1;\\n        newOffset += 1;\\n        request.blockNumOrTimestamp = uint64(bytes8(_cmd[newOffset:newOffset + 8]));\\n        newOffset += 8;\\n        request.confirmations = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        request.to = address(bytes20(_cmd[newOffset:newOffset + 20]));\\n        newOffset += 20;\\n        uint16 callDataSize = requestSize - 35;\\n        request.callData = _cmd[newOffset:newOffset + callDataSize];\\n        newOffset += callDataSize;\\n    }\\n\\n    function decodeEVMCallComputeV1(\\n        bytes calldata _cmd,\\n        uint256 _offset\\n    ) internal pure returns (EVMCallComputeV1 memory compute, uint256 newOffset) {\\n        newOffset = _offset;\\n        uint8 computeVersion = uint8(_cmd[newOffset]);\\n        newOffset += 1;\\n        if (computeVersion != COMPUTE_VERSION) revert InvalidVersion();\\n        uint16 computeType = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        if (computeType != COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL) revert InvalidType();\\n\\n        compute.computeSetting = uint8(_cmd[newOffset]);\\n        newOffset += 1;\\n        compute.targetEid = uint32(bytes4(_cmd[newOffset:newOffset + 4]));\\n        newOffset += 4;\\n        compute.isBlockNum = uint8(_cmd[newOffset]) == 1;\\n        newOffset += 1;\\n        compute.blockNumOrTimestamp = uint64(bytes8(_cmd[newOffset:newOffset + 8]));\\n        newOffset += 8;\\n        compute.confirmations = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        compute.to = address(bytes20(_cmd[newOffset:newOffset + 20]));\\n        newOffset += 20;\\n    }\\n\\n    function decodeCmdAppLabel(bytes calldata _cmd) internal pure returns (uint16) {\\n        uint256 offset = 0;\\n        uint16 cmdVersion = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n        if (cmdVersion != CMD_VERSION) revert InvalidVersion();\\n\\n        return uint16(bytes2(_cmd[offset:offset + 2]));\\n    }\\n\\n    function decodeRequestV1AppRequestLabel(bytes calldata _request) internal pure returns (uint16) {\\n        uint256 offset = 0;\\n        uint8 requestVersion = uint8(_request[offset]);\\n        offset += 1;\\n        if (requestVersion != REQUEST_VERSION) revert InvalidVersion();\\n\\n        return uint16(bytes2(_request[offset:offset + 2]));\\n    }\\n\\n    function encode(\\n        uint16 _appCmdLabel,\\n        EVMCallRequestV1[] memory _evmCallRequests,\\n        EVMCallComputeV1 memory _evmCallCompute\\n    ) internal pure returns (bytes memory) {\\n        bytes memory cmd = encode(_appCmdLabel, _evmCallRequests);\\n        if (_evmCallCompute.targetEid != 0) {\\n            // if eid is 0, it means no compute\\n            cmd = appendEVMCallComputeV1(cmd, _evmCallCompute);\\n        }\\n        return cmd;\\n    }\\n\\n    function encode(\\n        uint16 _appCmdLabel,\\n        EVMCallRequestV1[] memory _evmCallRequests\\n    ) internal pure returns (bytes memory) {\\n        bytes memory cmd = abi.encodePacked(CMD_VERSION, _appCmdLabel, _evmCallRequests.length.toUint16());\\n        for (uint256 i = 0; i < _evmCallRequests.length; i++) {\\n            cmd = appendEVMCallRequestV1(cmd, _evmCallRequests[i]);\\n        }\\n        return cmd;\\n    }\\n\\n    // todo: optimize this with Buffer\\n    function appendEVMCallRequestV1(\\n        bytes memory _cmd,\\n        EVMCallRequestV1 memory _request\\n    ) internal pure returns (bytes memory) {\\n        bytes memory newCmd = abi.encodePacked(\\n            _cmd,\\n            REQUEST_VERSION,\\n            _request.appRequestLabel,\\n            RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL,\\n            (_request.callData.length + 35).toUint16(),\\n            _request.targetEid\\n        );\\n        return\\n            abi.encodePacked(\\n                newCmd,\\n                _request.isBlockNum,\\n                _request.blockNumOrTimestamp,\\n                _request.confirmations,\\n                _request.to,\\n                _request.callData\\n            );\\n    }\\n\\n    function appendEVMCallComputeV1(\\n        bytes memory _cmd,\\n        EVMCallComputeV1 memory _compute\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _cmd,\\n                COMPUTE_VERSION,\\n                COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL,\\n                _compute.computeSetting,\\n                _compute.targetEid,\\n                _compute.isBlockNum,\\n                _compute.blockNumOrTimestamp,\\n                _compute.confirmations,\\n                _compute.to\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x483cb31075b3c9ba277856bccd6cf45f96859da6e3f92f88358d478c42e3e734\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title QuoterV2 Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoterV2 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\",\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniswapV3QuoteDemo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Import necessary interfaces and contracts\\nimport {IQuoterV2} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\\\";\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ILayerZeroEndpointV2, MessagingFee, MessagingReceipt, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { ReadCodecV1, EVMCallComputeV1, EVMCallRequestV1 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/ReadCodecV1.sol\\\";\\nimport { OAppRead } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppRead.sol\\\";\\nimport { OAppOptionsType3, EnforcedOptionParam } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\n\\n/**\\n * @title UniswapQuoteDemo\\n * @notice Simplified contract to query WETH/USDC prices on three chains and compute their average using LayerZero and Uniswap V3 QuoterV2.\\n * @dev Extends OAppRead and OAppOptionsType3 for cross-chain read and compute operations.\\n */\\ncontract UniswapV3QuoteDemo is OAppRead, OAppOptionsType3 {\\n    /// @notice Emitted when the aggregated average token price is computed and received.\\n    /// @param averagePrice The calculated average token price (USDC amount).\\n    event AggregatedPrice(uint256 averagePrice);\\n\\n    /// @notice LayerZero read message type.\\n    uint8 private constant READ_MSG_TYPE = 1;\\n\\n    /// @notice LayerZero read channel ID.\\n    uint32 public READ_CHANNEL;\\n\\n    /// @notice Struct to hold chain-specific configurations.\\n    struct ChainConfig {\\n        uint16 confirmations; // Number of confirmations required\\n        address quoterAddress; // Address of the Uniswap V3 QuoterV2 contract\\n        address tokenInAddress; // Address of WETH on the target chain\\n        address tokenOutAddress; // Address of USDC on the target chain\\n        uint24 fee; // Pool fee for WETH/USDC pair\\n    }\\n\\n    /// @notice Array to store all active targetEids for iteration.\\n    uint32[] public targetEids;\\n\\n    /// @notice Mapping to store chain configurations indexed by target chain ID (targetEid).\\n    mapping(uint32 => ChainConfig) public chainConfigs;\\n\\n    // ===========================\\n    // ======== CONSTANTS ========\\n    // ===========================\\n\\n    // Define constants for chain endpoint ids and addresses for clarity.\\n\\n    // Example Chain A: Ethereum Mainnet\\n    uint32 public constant CHAIN_A_EID = 30101; // LayerZero EID for Ethereum Mainnet\\n    address public constant CHAIN_A_QUOTER = 0x61fFE014bA17989E743c5F6cB21bF9697530B21e; // Uniswap V3 QuoterV2 on Ethereum Mainnet\\n    address public constant CHAIN_A_WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH on Ethereum Mainnet\\n    address public constant CHAIN_A_USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // USDC on Ethereum Mainnet\\n    uint24 public constant CHAIN_A_FEE = 3000; // 0.3% pool fee\\n\\n    // Example Chain B: Base Mainnet\\n    uint32 public constant CHAIN_B_EID = 30184; // LayerZero EID for Base Mainnet\\n    address public constant CHAIN_B_QUOTER = 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a; // Replace with actual QuoterV2 address on Base Mainnet\\n    address public constant CHAIN_B_WETH = 0x4200000000000000000000000000000000000006; // WETH on Base Mainnet\\n    address public constant CHAIN_B_USDC = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913; // USDC on Base Mainnet\\n    uint24 public constant CHAIN_B_FEE = 3000; // 0.3% pool fee\\n\\n    // Example Chain C: Optimism Mainnet\\n    uint32 public constant CHAIN_C_EID = 30111; // LayerZero EID for Optimism Mainnet\\n    address public constant CHAIN_C_QUOTER = 0x61fFE014bA17989E743c5F6cB21bF9697530B21e; // Replace with actual QuoterV2 address on Optimism Mainnet\\n    address public constant CHAIN_C_WETH = 0x4200000000000000000000000000000000000006; // WETH on Optimism Mainnet\\n    address public constant CHAIN_C_USDC = 0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85; // USDC on Optimism Mainnet\\n    uint24 public constant CHAIN_C_FEE = 3000; // 0.3% pool fee\\n\\n    // ===========================\\n    // ======== CONSTRUCTOR =======\\n    // ===========================\\n\\n    /**\\n     * @notice Constructor to initialize the UniswapQuoteDemo contract with hardcoded chain configurations.\\n     * @param _endpoint The LayerZero endpoint contract address.\\n     * @param _readChannel The LayerZero read channel ID.\\n     */\\n    constructor(address _endpoint, uint32 _readChannel) OAppRead(_endpoint, msg.sender) Ownable(msg.sender) {\\n        // Initialize Chain A Configuration (Ethereum Mainnet)\\n        ChainConfig memory chainAConfig = ChainConfig({\\n            confirmations: 5,\\n            quoterAddress: CHAIN_A_QUOTER,\\n            tokenInAddress: CHAIN_A_WETH,\\n            tokenOutAddress: CHAIN_A_USDC,\\n            fee: CHAIN_A_FEE\\n        });\\n\\n        // Initialize Chain B Configuration (Base Mainnet)\\n        ChainConfig memory chainBConfig = ChainConfig({\\n            confirmations: 5,\\n            quoterAddress: CHAIN_B_QUOTER,\\n            tokenInAddress: CHAIN_B_WETH,\\n            tokenOutAddress: CHAIN_B_USDC,\\n            fee: CHAIN_B_FEE\\n        });\\n\\n        // Initialize Chain C Configuration (Optimism Mainnet)\\n        ChainConfig memory chainCConfig = ChainConfig({\\n            confirmations: 5,\\n            quoterAddress: CHAIN_C_QUOTER,\\n            tokenInAddress: CHAIN_C_WETH,\\n            tokenOutAddress: CHAIN_C_USDC,\\n            fee: CHAIN_C_FEE\\n        });\\n\\n        // Set Chain A Configuration\\n        chainConfigs[CHAIN_A_EID] = chainAConfig;\\n        targetEids.push(CHAIN_A_EID);\\n\\n        // Set Chain B Configuration\\n        chainConfigs[CHAIN_B_EID] = chainBConfig;\\n        targetEids.push(CHAIN_B_EID);\\n\\n        // Set Chain C Configuration\\n        chainConfigs[CHAIN_C_EID] = chainCConfig;\\n        targetEids.push(CHAIN_C_EID);\\n\\n        // Set the read channel\\n        READ_CHANNEL = _readChannel;\\n        _setPeer(READ_CHANNEL, AddressCast.toBytes32(address(this)));\\n    }\\n\\n    // ===========================\\n    // ======= FUNCTIONS =========\\n    // ===========================\\n\\n    /**\\n     * @notice Sets the LayerZero read channel, enabling or disabling it based on `_active`.\\n     * @param _channelId The channel ID to set.\\n     * @param _active Flag to activate or deactivate the channel.\\n     */\\n    function setReadChannel(uint32 _channelId, bool _active) public override onlyOwner {\\n        _setPeer(_channelId, _active ? AddressCast.toBytes32(address(this)) : bytes32(0));\\n        READ_CHANNEL = _channelId;\\n    }\\n\\n    /**\\n     * @notice Sends a read request to LayerZero, querying Uniswap QuoterV2 for WETH/USDC prices on configured chains.\\n     * @param _extraOptions Additional messaging options, including gas and fee settings.\\n     * @return receipt The LayerZero messaging receipt for the request.\\n     */\\n    function readAverageUniswapPrice(\\n        bytes calldata _extraOptions\\n    ) external payable returns (MessagingReceipt memory receipt) {\\n        bytes memory cmd = getCmd();\\n        return\\n            _lzSend(\\n                READ_CHANNEL,\\n                cmd,\\n                combineOptions(READ_CHANNEL, READ_MSG_TYPE, _extraOptions),\\n                MessagingFee(msg.value, 0),\\n                payable(msg.sender)\\n            );\\n    }\\n\\n    /**\\n     * @notice Quotes the estimated messaging fee for querying Uniswap QuoterV2 for WETH/USDC prices.\\n     * @param _extraOptions Additional messaging options.\\n     * @param _payInLzToken Boolean flag indicating whether to pay in LayerZero tokens.\\n     * @return fee The estimated messaging fee.\\n     */\\n    function quoteAverageUniswapPrice(\\n        bytes calldata _extraOptions,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory fee) {\\n        bytes memory cmd = getCmd();\\n        return _quote(READ_CHANNEL, cmd, combineOptions(READ_CHANNEL, READ_MSG_TYPE, _extraOptions), _payInLzToken);\\n    }\\n\\n    /**\\n     * @notice Constructs a command to query the Uniswap QuoterV2 for WETH/USDC prices on all configured chains.\\n     * @return cmd The encoded command to request Uniswap quotes.\\n     */\\n    function getCmd() public view returns (bytes memory) {\\n        uint256 pairCount = targetEids.length;\\n        EVMCallRequestV1[] memory readRequests = new EVMCallRequestV1[](pairCount);\\n\\n        for (uint256 i = 0; i < pairCount; i++) {\\n            uint32 targetEid = targetEids[i];\\n            ChainConfig memory config = chainConfigs[targetEid];\\n\\n            // Define the QuoteExactInputSingleParams\\n            IQuoterV2.QuoteExactInputSingleParams memory params = IQuoterV2.QuoteExactInputSingleParams({\\n                tokenIn: config.tokenInAddress,\\n                tokenOut: config.tokenOutAddress,\\n                amountIn: 1 ether, // amountIn: 1 WETH\\n                fee: config.fee,\\n                sqrtPriceLimitX96: 0 // No price limit\\n            });\\n\\n            // Encode the function call\\n            bytes memory callData = abi.encodeWithSelector(IQuoterV2.quoteExactInputSingle.selector, params);\\n\\n            readRequests[i] = EVMCallRequestV1({\\n                appRequestLabel: uint16(i + 1),\\n                targetEid: targetEid,\\n                isBlockNum: false,\\n                blockNumOrTimestamp: uint64(block.timestamp),\\n                confirmations: config.confirmations,\\n                to: config.quoterAddress,\\n                callData: callData\\n            });\\n        }\\n\\n        EVMCallComputeV1 memory computeSettings = EVMCallComputeV1({\\n            computeSetting: 2, // lzMap() and lzReduce()\\n            targetEid: ILayerZeroEndpointV2(endpoint).eid(),\\n            isBlockNum: false,\\n            blockNumOrTimestamp: uint64(block.timestamp),\\n            confirmations: 15,\\n            to: address(this)\\n        });\\n\\n        return ReadCodecV1.encode(0, readRequests, computeSettings);\\n    }\\n\\n    /**\\n     * @notice Processes individual Uniswap QuoterV2 responses, encoding the result.\\n     * @param _response The response from the read request.\\n     * @return Encoded token output amount (USDC amount).\\n     */\\n    function lzMap(bytes calldata, bytes calldata _response) external pure returns (bytes memory) {\\n        require(_response.length >= 32, \\\"Invalid response length\\\"); // quoteExactInputSingle returns multiple values\\n\\n        // Decode the response to extract amountOut\\n        (uint256 amountOut, , , ) = abi.decode(_response, (uint256, uint160, uint32, uint256));\\n        return abi.encode(amountOut);\\n    }\\n\\n    /**\\n     * @notice Aggregates individual token output amounts to compute an average.\\n     * @param _responses Array of mapped responses containing token output amounts.\\n     * @return Encoded average token output amount.\\n     */\\n    function lzReduce(bytes calldata, bytes[] calldata _responses) external pure returns (bytes memory) {\\n        require(_responses.length == 3, \\\"Expected responses from 3 chains\\\");\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < _responses.length; i++) {\\n            uint256 amountOut = abi.decode(_responses[i], (uint256));\\n            total += amountOut;\\n        }\\n        uint256 averageAmountOut = total / _responses.length;\\n        return abi.encode(averageAmountOut);\\n    }\\n\\n    /**\\n     * @notice Handles the aggregated average quote received from LayerZero.\\n     * @dev Emits the AggregatedPrice event with the calculated average amount.\\n     * @param _message Encoded average token output amount.\\n     */\\n    function _lzReceive(\\n        Origin calldata,\\n        bytes32 /*_guid*/,\\n        bytes calldata _message,\\n        address,\\n        bytes calldata\\n    ) internal override {\\n        require(_message.length == 32, \\\"Invalid message length\\\");\\n        uint256 averagePrice = abi.decode(_message, (uint256));\\n        emit AggregatedPrice(averagePrice);\\n    }\\n\\n    /// @notice Allows the contract to receive Ether.\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x93d39199c6c2fb816e9d5621d61f7e1596c8251510d52f42fda9b31a647c4459\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620031f6380380620031f6833981016040819052620000349162000783565b81338181818180806200006157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006c81620006d2565b506001600160a01b0380831660805281166200009b57604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000e357600080fd5b505af1158015620000f8573d6000803e3d6000fd5b5050505050505050505060006040518060a00160405280600561ffff1681526020017361ffe014ba17989e743c5f6cb21bf9697530b21e6001600160a01b0316815260200173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316815260200173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b03168152602001610bb862ffffff16815250905060006040518060a00160405280600561ffff168152602001733d4e44eb1374240ce5f1b871ab261cd16335b76a6001600160a01b031681526020017342000000000000000000000000000000000000066001600160a01b0316815260200173833589fcd6edb6e08f4c7c32d4f71b54bda029136001600160a01b03168152602001610bb862ffffff16815250905060006040518060a00160405280600561ffff1681526020017361ffe014ba17989e743c5f6cb21bf9697530b21e6001600160a01b031681526020017342000000000000000000000000000000000000066001600160a01b03168152602001730b2c639c533813f4aa9d7837caf62653d097ff856001600160a01b03168152602001610bb862ffffff168152509050826005600061759563ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160020160146101000a81548162ffffff021916908362ffffff160217905550905050600461759590806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff16021790555081600560006175e863ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160020160146101000a81548162ffffff021916908362ffffff16021790555090505060046175e890806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff160217905550806005600061759f63ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160020160146101000a81548162ffffff021916908362ffffff160217905550905050600461759f90806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff16021790555083600360006101000a81548163ffffffff021916908363ffffffff160217905550620006c7600360009054906101000a900463ffffffff16620006c1306200072260201b60201c565b6200072e565b5050505050620007d5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b031690565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080604083850312156200079757600080fd5b82516001600160a01b0381168114620007af57600080fd5b602084015190925063ffffffff81168114620007ca57600080fd5b809150509250929050565b6080516129d462000822600039600081816103d5015281816107c101528181610c8801528181610f420152818161130d015281816114cd0152818161172e01526117e701526129d46000f3fe6080604052600436106102345760003560e01c806382413eac1161012e578063ca5eb5e1116100ab578063f0a9e4811161006f578063f0a9e48114610733578063f2fde38b14610753578063fa71141514610773578063fad4e69314610789578063ff7bd03d1461079f57600080fd5b8063ca5eb5e1146106b3578063d7952561146102a7578063dad41cae146106d3578063e60c287c146106f3578063eba1cf081461071357600080fd5b8063b98bd070116100f2578063b98bd07014610610578063bb0b6a5314610630578063bc70b3541461066b578063c726d6a81461045c578063c912f2a81461068b57600080fd5b806382413eac146105855780638bac61b1146105b55780638da5cb5b146105dd578063b10c7544146105fb578063b41e27df146105b557600080fd5b80634fed291f116101bc578063715018a611610180578063715018a6146104475780637517dc1c1461045c57806379e878ef146104775780637d25a05e146104a45780637ee74058146104df57600080fd5b80634fed291f1461036e5780635535d461146103965780635e280f11146103c35780636422f84e146103f7578063682706d11461041f57600080fd5b8063217c3b9f11610203578063217c3b9f146102a757806327e04efb146102d15780633400288b146102f1578063360b2ccb146103115780633859d9371461035157600080fd5b806313137d651461024057806317442b70146102555780631b9f4e031461027c57806320056bb2146102a757600080fd5b3661023b57005b600080fd5b61025361024e366004611c3b565b6107bf565b005b34801561026157600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561028857600080fd5b5061029261759581565b60405163ffffffff9091168152602001610273565b3480156102b357600080fd5b506102bd610bb881565b60405162ffffff9091168152602001610273565b6102e46102df366004611cda565b61087f565b6040516102739190611d1b565b3480156102fd57600080fd5b5061025361030c366004611d6f565b6108d5565b34801561031d57600080fd5b5061033973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b039091168152602001610273565b34801561035d57600080fd5b506003546102929063ffffffff1681565b34801561037a57600080fd5b5061033973833589fcd6edb6e08f4c7c32d4f71b54bda0291381565b3480156103a257600080fd5b506103b66103b1366004611db2565b6108eb565b6040516102739190611e37565b3480156103cf57600080fd5b506103397f000000000000000000000000000000000000000000000000000000000000000081565b34801561040357600080fd5b5061033973a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b34801561042b57600080fd5b50610339730b2c639c533813f4aa9d7837caf62653d097ff8581565b34801561045357600080fd5b50610253610990565b34801561046857600080fd5b506103396006602160991b0181565b34801561048357600080fd5b50610497610492366004611e58565b6109a4565b6040516102739190611eae565b3480156104b057600080fd5b506104c76104bf366004611d6f565b600092915050565b6040516001600160401b039091168152602001610273565b3480156104eb57600080fd5b506105446104fa366004611ec5565b60056020526000908152604090208054600182015460029092015461ffff821692620100009092046001600160a01b039081169281169190811690600160a01b900462ffffff1685565b6040805161ffff90961686526001600160a01b0394851660208701529284169285019290925291909116606083015262ffffff16608082015260a001610273565b34801561059157600080fd5b506105a56105a0366004611ee2565b6109f1565b6040519015158152602001610273565b3480156105c157600080fd5b506103397361ffe014ba17989e743c5f6cb21bf9697530b21e81565b3480156105e957600080fd5b506000546001600160a01b0316610339565b34801561060757600080fd5b506103b6610a06565b34801561061c57600080fd5b5061025361062b366004611f8c565b610d59565b34801561063c57600080fd5b5061065d61064b366004611ec5565b60016020526000908152604090205481565b604051908152602001610273565b34801561067757600080fd5b506103b6610686366004611fc1565b610d73565b34801561069757600080fd5b50610339733d4e44eb1374240ce5f1b871ab261cd16335b76a81565b3480156106bf57600080fd5b506102536106ce366004612023565b610f1b565b3480156106df57600080fd5b506102926106ee366004612040565b610fa1565b3480156106ff57600080fd5b506103b661070e366004612059565b610fdb565b34801561071f57600080fd5b506103b661072e3660046120b8565b61106e565b34801561073f57600080fd5b5061025361074e366004612117565b611153565b34801561075f57600080fd5b5061025361076e366004612023565b61118e565b34801561077f57600080fd5b506102926175e881565b34801561079557600080fd5b5061029261759f81565b3480156107ab57600080fd5b506105a56107ba366004612150565b6111cc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461080f576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061082990610824908a611ec5565b611202565b146108675761083b6020880188611ec5565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610806565b6108768787878787878761123e565b50505050505050565b610887611b7f565b6000610891610a06565b6003549091506108cb9063ffffffff16826108af8260018989610d73565b60405180604001604052803481526020016000815250336112da565b9150505b92915050565b6108dd6113e5565b6108e78282611412565b5050565b60026020908152600092835260408084209091529082529020805461090f9061216c565b80601f016020809104026020016040519081016040528092919081815260200182805461093b9061216c565b80156109885780601f1061095d57610100808354040283529160200191610988565b820191906000526020600020905b81548152906001019060200180831161096b57829003601f168201915b505050505081565b6109986113e5565b6109a26000611467565b565b604080518082019091526000808252602082015260006109c2610a06565b6003549091506109e69063ffffffff16826109e08260018a8a610d73565b866114b7565b9150505b9392505050565b6001600160a01b03811630145b949350505050565b6004546060906000816001600160401b03811115610a2657610a266121a0565b604051908082528060200260200182016040528015610a8f57816020015b6040805160e0810182526000808252602080830182905292820181905260608083018290526080830182905260a083019190915260c08201528252600019909201910181610a445790505b50905060005b82811015610c6e57600060048281548110610ab257610ab26121b6565b6000918252602080832060088304015463ffffffff60046007909416939093026101000a900491909116808352600582526040808420815160a08082018452825461ffff811683526001600160a01b03620100009091048116838801526001808501548216848701908152600290950154808316606080870191825262ffffff600160a01b909304831660808089019182528a519788018b529851861680885292518616878d01908152670de0b6b3a7640000888c01908152915185169288019283529887019c8d528951602481019390935297518516604483015296516064820152955116608486015297511660a4808501919091528451808503909101815260c4909301845294820180516001600160e01b0316636352813560e11b179052825160e0810190935292955091938190610bee9088906121cc565b61ffff1681526020018563ffffffff168152602001600015158152602001426001600160401b03168152602001846000015161ffff16815260200184602001516001600160a01b0316815260200182815250868681518110610c5257610c526121b6565b6020026020010181905250505050508080600101915050610a95565b5060006040518060c00160405280600260ff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0891906121ed565b63ffffffff168152602001600015158152602001426001600160401b03168152602001600f61ffff168152602001306001600160a01b03168152509050610d5160008383611598565b935050505090565b610d616113e5565b6108e7610d6e8284612262565b6115c4565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610da79061216c565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd39061216c565b8015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b505050505090508051600003610e705783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294506109fe9350505050565b6000839003610e805790506109fe565b60028310610efe57610ec784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116d692505050565b80610ed58460028188612389565b604051602001610ee7939291906123b3565b6040516020818303038152906040529150506109fe565b8383604051639a6d49cd60e01b81526004016108069291906123db565b610f236113e5565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b5050505050565b60048181548110610fb157600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6060602082101561102e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420726573706f6e7365206c656e6774680000000000000000006044820152606401610806565b600061103c8385018561240a565b50505090508060405160200161105491815260200190565b604051602081830303815290604052915050949350505050565b6060600382146110c05760405162461bcd60e51b815260206004820181905260248201527f457870656374656420726573706f6e7365732066726f6d203320636861696e736044820152606401610806565b6000805b838110156111165760008585838181106110e0576110e06121b6565b90506020028101906110f29190612452565b8101906110ff9190612040565b905061110b81846121cc565b9250506001016110c4565b5060006111238483612498565b90508060405160200161113891815260200190565b60405160208183030381529060405292505050949350505050565b61115b6113e5565b611171828261116b576000611412565b30611412565b506003805463ffffffff191663ffffffff92909216919091179055565b6111966113e5565b6001600160a01b0381166111c057604051631e4fbdf760e01b815260006004820152602401610806565b6111c981611467565b50565b60006020820180359060019083906111e49086611ec5565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806108cf5760405163f6ff4fb760e01b815263ffffffff84166004820152602401610806565b602084146112875760405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840dacae6e6c2ceca40d8cadccee8d60531b6044820152606401610806565b600061129585870187612040565b90507f3733046b677c6acde07c9cc7ad3f15345eb8ed2259cd927bb539b59b580eab0e816040516112c891815260200190565b60405180910390a15050505050505050565b6112e2611b7f565b60006112f18460000151611702565b60208501519091501561130b5761130b846020015161172a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff16815260200161135b8c611202565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016113979291906124ba565b60806040518083038185885af11580156113b5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113da9190612581565b979650505050505050565b6000546001600160a01b031633146109a25760405163118cdaa760e01b8152336004820152602401610806565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff16815260200161151a89611202565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b815260040161154f9291906124ba565b6040805180830381865afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f91906125d7565b95945050505050565b606060006115a6858561180c565b9050826020015163ffffffff166000146109fe5761158f818461189c565b60005b815181101561169b576115f68282815181106115e5576115e56121b6565b6020026020010151604001516116d6565b818181518110611608576116086121b6565b6020026020010151604001516002600084848151811061162a5761162a6121b6565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611664576116646121b6565b60200260200101516020015161ffff1661ffff16815260200190815260200160002090816116929190612643565b506001016115c7565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674816040516116cb9190612702565b60405180910390a150565b600281015161ffff81166003146108e75781604051639a6d49cd60e01b81526004016108069190611e37565b6000813414611726576040516304fb820960e51b8152346004820152602401610806565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae919061278d565b90506001600160a01b0381166117d7576040516329b99a9560e11b815260040160405180910390fd5b6108e76001600160a01b038216337f0000000000000000000000000000000000000000000000000000000000000000856118ef565b6060600060018461181d855161194f565b6040516001600160f01b031960f094851b8116602083015292841b83166022820152921b166024820152602601604051602081830303815290604052905060005b83518110156118945761188a8285838151811061187d5761187d6121b6565b602002602001015161197e565b915060010161185e565b509392505050565b606082600180846000015185602001518660400151876060015188608001518960a001516040516020016118d8999897969594939291906127aa565b604051602081830303815290604052905092915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611949908590611a10565b50505050565b600061ffff821115611726576040516306dfcc6560e41b81526010600482015260248101839052604401610806565b60606000836001846000015160016119a68760c001515160236119a191906121cc565b61194f565b6020808901516040516119be97969594939201612870565b60408051601f19818403018152828252908501516060860151608087015160a088015160c08901519496506119f8958795906020016128e3565b60405160208183030381529060405291505092915050565b6000611a256001600160a01b03841683611a78565b90508051600014158015611a4a575080806020019051810190611a489190612965565b155b15611a7357604051635274afe760e01b81526001600160a01b0384166004820152602401610806565b505050565b60606109ea8383600084600080856001600160a01b03168486604051611a9e9190612982565b60006040518083038185875af1925050503d8060008114611adb576040519150601f19603f3d011682016040523d82523d6000602084013e611ae0565b606091505b5091509150611af0868383611afa565b9695505050505050565b606082611b0f57611b0a82611b56565b6109ea565b8151158015611b2657506001600160a01b0384163b155b15611b4f57604051639996b31560e01b81526001600160a01b0385166004820152602401610806565b50806109ea565b805115611b665780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180606001604052806000801916815260200160006001600160401b03168152602001611bc1604051806040016040528060008152602001600081525090565b905290565b600060608284031215611bd857600080fd5b50919050565b60008083601f840112611bf057600080fd5b5081356001600160401b03811115611c0757600080fd5b602083019150836020828501011115611c1f57600080fd5b9250929050565b6001600160a01b03811681146111c957600080fd5b600080600080600080600060e0888a031215611c5657600080fd5b611c608989611bc6565b96506060880135955060808801356001600160401b0380821115611c8357600080fd5b611c8f8b838c01611bde565b909750955060a08a01359150611ca482611c26565b90935060c08901359080821115611cba57600080fd5b50611cc78a828b01611bde565b989b979a50959850939692959293505050565b60008060208385031215611ced57600080fd5b82356001600160401b03811115611d0357600080fd5b611d0f85828601611bde565b90969095509350505050565b6000608082019050825182526001600160401b0360208401511660208301526040830151611d56604084018280518252602090810151910152565b5092915050565b63ffffffff811681146111c957600080fd5b60008060408385031215611d8257600080fd5b8235611d8d81611d5d565b946020939093013593505050565b803561ffff81168114611dad57600080fd5b919050565b60008060408385031215611dc557600080fd5b8235611dd081611d5d565b9150611dde60208401611d9b565b90509250929050565b60005b83811015611e02578181015183820152602001611dea565b50506000910152565b60008151808452611e23816020860160208601611de7565b601f01601f19169290920160200192915050565b6020815260006109ea6020830184611e0b565b80151581146111c957600080fd5b600080600060408486031215611e6d57600080fd5b83356001600160401b03811115611e8357600080fd5b611e8f86828701611bde565b9094509250506020840135611ea381611e4a565b809150509250925092565b8151815260208083015190820152604081016108cf565b600060208284031215611ed757600080fd5b81356109ea81611d5d565b60008060008060a08587031215611ef857600080fd5b611f028686611bc6565b935060608501356001600160401b03811115611f1d57600080fd5b611f2987828801611bde565b9094509250506080850135611f3d81611c26565b939692955090935050565b60008083601f840112611f5a57600080fd5b5081356001600160401b03811115611f7157600080fd5b6020830191508360208260051b8501011115611c1f57600080fd5b60008060208385031215611f9f57600080fd5b82356001600160401b03811115611fb557600080fd5b611d0f85828601611f48565b60008060008060608587031215611fd757600080fd5b8435611fe281611d5d565b9350611ff060208601611d9b565b925060408501356001600160401b0381111561200b57600080fd5b61201787828801611bde565b95989497509550505050565b60006020828403121561203557600080fd5b81356109ea81611c26565b60006020828403121561205257600080fd5b5035919050565b6000806000806040858703121561206f57600080fd5b84356001600160401b038082111561208657600080fd5b61209288838901611bde565b909650945060208701359150808211156120ab57600080fd5b5061201787828801611bde565b600080600080604085870312156120ce57600080fd5b84356001600160401b03808211156120e557600080fd5b6120f188838901611bde565b9096509450602087013591508082111561210a57600080fd5b5061201787828801611f48565b6000806040838503121561212a57600080fd5b823561213581611d5d565b9150602083013561214581611e4a565b809150509250929050565b60006060828403121561216257600080fd5b6109ea8383611bc6565b600181811c9082168061218057607f821691505b602082108103611bd857634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b808201808211156108cf57634e487b7160e01b600052601160045260246000fd5b6000602082840312156121ff57600080fd5b81516109ea81611d5d565b604051606081016001600160401b038111828210171561222c5761222c6121a0565b60405290565b604051601f8201601f191681016001600160401b038111828210171561225a5761225a6121a0565b604052919050565b60006001600160401b038084111561227c5761227c6121a0565b8360051b602061228d818301612232565b8681529185019181810190368411156122a557600080fd5b865b8481101561237d578035868111156122bf5760008081fd5b880160603682900312156122d35760008081fd5b6122db61220a565b81356122e681611d5d565b81526122f3828701611d9b565b868201526040808301358981111561230b5760008081fd5b9290920191601f36818501126123215760008081fd5b83358a811115612333576123336121a0565b612344818301601f19168a01612232565b9150808252368982870101111561235b5760008081fd5b808986018a8401376000908201890152908201528452509183019183016122a7565b50979650505050505050565b6000808585111561239957600080fd5b838611156123a657600080fd5b5050820193919092039150565b600084516123c5818460208901611de7565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000806000806080858703121561242057600080fd5b84359350602085013561243281611c26565b9250604085013561244281611d5d565b9396929550929360600135925050565b6000808335601e1984360301811261246957600080fd5b8301803591506001600160401b0382111561248357600080fd5b602001915036819003821315611c1f57600080fd5b6000826124b557634e487b7160e01b600052601260045260246000fd5b500490565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526124f060e0840182611e0b565b90506060850151603f198483030160a085015261250d8282611e0b565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561254557600080fd5b604051604081018181106001600160401b0382111715612567576125676121a0565b604052825181526020928301519281019290925250919050565b60006080828403121561259357600080fd5b61259b61220a565b8251815260208301516001600160401b03811681146125b957600080fd5b60208201526125cb8460408501612533565b60408201529392505050565b6000604082840312156125e957600080fd5b6109ea8383612533565b601f821115611a73576000816000526020600020601f850160051c8101602086101561261c5750805b601f850160051c820191505b8181101561263b57828155600101612628565b505050505050565b81516001600160401b0381111561265c5761265c6121a0565b6126708161266a845461216c565b846125f3565b602080601f8311600181146126a5576000841561268d5750858301515b600019600386901b1c1916600185901b17855561263b565b600085815260208120601f198616915b828110156126d4578886015182559484019460019091019084016126b5565b50858210156126f25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561277f57888303603f190185528151805163ffffffff1684528781015161ffff1688850152860151606087850181905261276b81860183611e0b565b96890196945050509086019060010161272b565b509098975050505050505050565b60006020828403121561279f57600080fd5b81516109ea81611c26565b60008a516127bc818460208f01611de7565b60f88b811b6001600160f81b031990811692850192835260f08c901b6001600160f01b03191660018401528a821b16600383015260e089901b6001600160e01b0319166004830152871515901b6008820152612827600982018760c01b6001600160c01b0319169052565b612840601182018660f01b6001600160f01b0319169052565b61285e601382018560601b6bffffffffffffffffffffffff19169052565b6027019b9a5050505050505050505050565b60008751612882818460208c01611de7565b60f89790971b6001600160f81b0319169190960190815260f094851b6001600160f01b0319908116600183015293851b841660038201529190931b909116600582015260e09190911b6001600160e01b0319166007820152600b0192915050565b600087516128f5818460208c01611de7565b87151560f81b90830190815260c087901b6001600160c01b031916600182015260f086901b6001600160f01b0319166009820152606085901b6bffffffffffffffffffffffff1916600b820152835161295581601f840160208801611de7565b01601f0198975050505050505050565b60006020828403121561297757600080fd5b81516109ea81611e4a565b60008251612994818460208701611de7565b919091019291505056fea2646970667358221220f82735542d2123dfe79f1f154bd802bbaf3bd863d0c8733a84ed3e1cebda324364736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106102345760003560e01c806382413eac1161012e578063ca5eb5e1116100ab578063f0a9e4811161006f578063f0a9e48114610733578063f2fde38b14610753578063fa71141514610773578063fad4e69314610789578063ff7bd03d1461079f57600080fd5b8063ca5eb5e1146106b3578063d7952561146102a7578063dad41cae146106d3578063e60c287c146106f3578063eba1cf081461071357600080fd5b8063b98bd070116100f2578063b98bd07014610610578063bb0b6a5314610630578063bc70b3541461066b578063c726d6a81461045c578063c912f2a81461068b57600080fd5b806382413eac146105855780638bac61b1146105b55780638da5cb5b146105dd578063b10c7544146105fb578063b41e27df146105b557600080fd5b80634fed291f116101bc578063715018a611610180578063715018a6146104475780637517dc1c1461045c57806379e878ef146104775780637d25a05e146104a45780637ee74058146104df57600080fd5b80634fed291f1461036e5780635535d461146103965780635e280f11146103c35780636422f84e146103f7578063682706d11461041f57600080fd5b8063217c3b9f11610203578063217c3b9f146102a757806327e04efb146102d15780633400288b146102f1578063360b2ccb146103115780633859d9371461035157600080fd5b806313137d651461024057806317442b70146102555780631b9f4e031461027c57806320056bb2146102a757600080fd5b3661023b57005b600080fd5b61025361024e366004611c3b565b6107bf565b005b34801561026157600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561028857600080fd5b5061029261759581565b60405163ffffffff9091168152602001610273565b3480156102b357600080fd5b506102bd610bb881565b60405162ffffff9091168152602001610273565b6102e46102df366004611cda565b61087f565b6040516102739190611d1b565b3480156102fd57600080fd5b5061025361030c366004611d6f565b6108d5565b34801561031d57600080fd5b5061033973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b039091168152602001610273565b34801561035d57600080fd5b506003546102929063ffffffff1681565b34801561037a57600080fd5b5061033973833589fcd6edb6e08f4c7c32d4f71b54bda0291381565b3480156103a257600080fd5b506103b66103b1366004611db2565b6108eb565b6040516102739190611e37565b3480156103cf57600080fd5b506103397f000000000000000000000000000000000000000000000000000000000000000081565b34801561040357600080fd5b5061033973a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b34801561042b57600080fd5b50610339730b2c639c533813f4aa9d7837caf62653d097ff8581565b34801561045357600080fd5b50610253610990565b34801561046857600080fd5b506103396006602160991b0181565b34801561048357600080fd5b50610497610492366004611e58565b6109a4565b6040516102739190611eae565b3480156104b057600080fd5b506104c76104bf366004611d6f565b600092915050565b6040516001600160401b039091168152602001610273565b3480156104eb57600080fd5b506105446104fa366004611ec5565b60056020526000908152604090208054600182015460029092015461ffff821692620100009092046001600160a01b039081169281169190811690600160a01b900462ffffff1685565b6040805161ffff90961686526001600160a01b0394851660208701529284169285019290925291909116606083015262ffffff16608082015260a001610273565b34801561059157600080fd5b506105a56105a0366004611ee2565b6109f1565b6040519015158152602001610273565b3480156105c157600080fd5b506103397361ffe014ba17989e743c5f6cb21bf9697530b21e81565b3480156105e957600080fd5b506000546001600160a01b0316610339565b34801561060757600080fd5b506103b6610a06565b34801561061c57600080fd5b5061025361062b366004611f8c565b610d59565b34801561063c57600080fd5b5061065d61064b366004611ec5565b60016020526000908152604090205481565b604051908152602001610273565b34801561067757600080fd5b506103b6610686366004611fc1565b610d73565b34801561069757600080fd5b50610339733d4e44eb1374240ce5f1b871ab261cd16335b76a81565b3480156106bf57600080fd5b506102536106ce366004612023565b610f1b565b3480156106df57600080fd5b506102926106ee366004612040565b610fa1565b3480156106ff57600080fd5b506103b661070e366004612059565b610fdb565b34801561071f57600080fd5b506103b661072e3660046120b8565b61106e565b34801561073f57600080fd5b5061025361074e366004612117565b611153565b34801561075f57600080fd5b5061025361076e366004612023565b61118e565b34801561077f57600080fd5b506102926175e881565b34801561079557600080fd5b5061029261759f81565b3480156107ab57600080fd5b506105a56107ba366004612150565b6111cc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461080f576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061082990610824908a611ec5565b611202565b146108675761083b6020880188611ec5565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610806565b6108768787878787878761123e565b50505050505050565b610887611b7f565b6000610891610a06565b6003549091506108cb9063ffffffff16826108af8260018989610d73565b60405180604001604052803481526020016000815250336112da565b9150505b92915050565b6108dd6113e5565b6108e78282611412565b5050565b60026020908152600092835260408084209091529082529020805461090f9061216c565b80601f016020809104026020016040519081016040528092919081815260200182805461093b9061216c565b80156109885780601f1061095d57610100808354040283529160200191610988565b820191906000526020600020905b81548152906001019060200180831161096b57829003601f168201915b505050505081565b6109986113e5565b6109a26000611467565b565b604080518082019091526000808252602082015260006109c2610a06565b6003549091506109e69063ffffffff16826109e08260018a8a610d73565b866114b7565b9150505b9392505050565b6001600160a01b03811630145b949350505050565b6004546060906000816001600160401b03811115610a2657610a266121a0565b604051908082528060200260200182016040528015610a8f57816020015b6040805160e0810182526000808252602080830182905292820181905260608083018290526080830182905260a083019190915260c08201528252600019909201910181610a445790505b50905060005b82811015610c6e57600060048281548110610ab257610ab26121b6565b6000918252602080832060088304015463ffffffff60046007909416939093026101000a900491909116808352600582526040808420815160a08082018452825461ffff811683526001600160a01b03620100009091048116838801526001808501548216848701908152600290950154808316606080870191825262ffffff600160a01b909304831660808089019182528a519788018b529851861680885292518616878d01908152670de0b6b3a7640000888c01908152915185169288019283529887019c8d528951602481019390935297518516604483015296516064820152955116608486015297511660a4808501919091528451808503909101815260c4909301845294820180516001600160e01b0316636352813560e11b179052825160e0810190935292955091938190610bee9088906121cc565b61ffff1681526020018563ffffffff168152602001600015158152602001426001600160401b03168152602001846000015161ffff16815260200184602001516001600160a01b0316815260200182815250868681518110610c5257610c526121b6565b6020026020010181905250505050508080600101915050610a95565b5060006040518060c00160405280600260ff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0891906121ed565b63ffffffff168152602001600015158152602001426001600160401b03168152602001600f61ffff168152602001306001600160a01b03168152509050610d5160008383611598565b935050505090565b610d616113e5565b6108e7610d6e8284612262565b6115c4565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610da79061216c565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd39061216c565b8015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b505050505090508051600003610e705783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294506109fe9350505050565b6000839003610e805790506109fe565b60028310610efe57610ec784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116d692505050565b80610ed58460028188612389565b604051602001610ee7939291906123b3565b6040516020818303038152906040529150506109fe565b8383604051639a6d49cd60e01b81526004016108069291906123db565b610f236113e5565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b5050505050565b60048181548110610fb157600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6060602082101561102e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420726573706f6e7365206c656e6774680000000000000000006044820152606401610806565b600061103c8385018561240a565b50505090508060405160200161105491815260200190565b604051602081830303815290604052915050949350505050565b6060600382146110c05760405162461bcd60e51b815260206004820181905260248201527f457870656374656420726573706f6e7365732066726f6d203320636861696e736044820152606401610806565b6000805b838110156111165760008585838181106110e0576110e06121b6565b90506020028101906110f29190612452565b8101906110ff9190612040565b905061110b81846121cc565b9250506001016110c4565b5060006111238483612498565b90508060405160200161113891815260200190565b60405160208183030381529060405292505050949350505050565b61115b6113e5565b611171828261116b576000611412565b30611412565b506003805463ffffffff191663ffffffff92909216919091179055565b6111966113e5565b6001600160a01b0381166111c057604051631e4fbdf760e01b815260006004820152602401610806565b6111c981611467565b50565b60006020820180359060019083906111e49086611ec5565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806108cf5760405163f6ff4fb760e01b815263ffffffff84166004820152602401610806565b602084146112875760405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840dacae6e6c2ceca40d8cadccee8d60531b6044820152606401610806565b600061129585870187612040565b90507f3733046b677c6acde07c9cc7ad3f15345eb8ed2259cd927bb539b59b580eab0e816040516112c891815260200190565b60405180910390a15050505050505050565b6112e2611b7f565b60006112f18460000151611702565b60208501519091501561130b5761130b846020015161172a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff16815260200161135b8c611202565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016113979291906124ba565b60806040518083038185885af11580156113b5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113da9190612581565b979650505050505050565b6000546001600160a01b031633146109a25760405163118cdaa760e01b8152336004820152602401610806565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff16815260200161151a89611202565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b815260040161154f9291906124ba565b6040805180830381865afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f91906125d7565b95945050505050565b606060006115a6858561180c565b9050826020015163ffffffff166000146109fe5761158f818461189c565b60005b815181101561169b576115f68282815181106115e5576115e56121b6565b6020026020010151604001516116d6565b818181518110611608576116086121b6565b6020026020010151604001516002600084848151811061162a5761162a6121b6565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611664576116646121b6565b60200260200101516020015161ffff1661ffff16815260200190815260200160002090816116929190612643565b506001016115c7565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674816040516116cb9190612702565b60405180910390a150565b600281015161ffff81166003146108e75781604051639a6d49cd60e01b81526004016108069190611e37565b6000813414611726576040516304fb820960e51b8152346004820152602401610806565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae919061278d565b90506001600160a01b0381166117d7576040516329b99a9560e11b815260040160405180910390fd5b6108e76001600160a01b038216337f0000000000000000000000000000000000000000000000000000000000000000856118ef565b6060600060018461181d855161194f565b6040516001600160f01b031960f094851b8116602083015292841b83166022820152921b166024820152602601604051602081830303815290604052905060005b83518110156118945761188a8285838151811061187d5761187d6121b6565b602002602001015161197e565b915060010161185e565b509392505050565b606082600180846000015185602001518660400151876060015188608001518960a001516040516020016118d8999897969594939291906127aa565b604051602081830303815290604052905092915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611949908590611a10565b50505050565b600061ffff821115611726576040516306dfcc6560e41b81526010600482015260248101839052604401610806565b60606000836001846000015160016119a68760c001515160236119a191906121cc565b61194f565b6020808901516040516119be97969594939201612870565b60408051601f19818403018152828252908501516060860151608087015160a088015160c08901519496506119f8958795906020016128e3565b60405160208183030381529060405291505092915050565b6000611a256001600160a01b03841683611a78565b90508051600014158015611a4a575080806020019051810190611a489190612965565b155b15611a7357604051635274afe760e01b81526001600160a01b0384166004820152602401610806565b505050565b60606109ea8383600084600080856001600160a01b03168486604051611a9e9190612982565b60006040518083038185875af1925050503d8060008114611adb576040519150601f19603f3d011682016040523d82523d6000602084013e611ae0565b606091505b5091509150611af0868383611afa565b9695505050505050565b606082611b0f57611b0a82611b56565b6109ea565b8151158015611b2657506001600160a01b0384163b155b15611b4f57604051639996b31560e01b81526001600160a01b0385166004820152602401610806565b50806109ea565b805115611b665780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180606001604052806000801916815260200160006001600160401b03168152602001611bc1604051806040016040528060008152602001600081525090565b905290565b600060608284031215611bd857600080fd5b50919050565b60008083601f840112611bf057600080fd5b5081356001600160401b03811115611c0757600080fd5b602083019150836020828501011115611c1f57600080fd5b9250929050565b6001600160a01b03811681146111c957600080fd5b600080600080600080600060e0888a031215611c5657600080fd5b611c608989611bc6565b96506060880135955060808801356001600160401b0380821115611c8357600080fd5b611c8f8b838c01611bde565b909750955060a08a01359150611ca482611c26565b90935060c08901359080821115611cba57600080fd5b50611cc78a828b01611bde565b989b979a50959850939692959293505050565b60008060208385031215611ced57600080fd5b82356001600160401b03811115611d0357600080fd5b611d0f85828601611bde565b90969095509350505050565b6000608082019050825182526001600160401b0360208401511660208301526040830151611d56604084018280518252602090810151910152565b5092915050565b63ffffffff811681146111c957600080fd5b60008060408385031215611d8257600080fd5b8235611d8d81611d5d565b946020939093013593505050565b803561ffff81168114611dad57600080fd5b919050565b60008060408385031215611dc557600080fd5b8235611dd081611d5d565b9150611dde60208401611d9b565b90509250929050565b60005b83811015611e02578181015183820152602001611dea565b50506000910152565b60008151808452611e23816020860160208601611de7565b601f01601f19169290920160200192915050565b6020815260006109ea6020830184611e0b565b80151581146111c957600080fd5b600080600060408486031215611e6d57600080fd5b83356001600160401b03811115611e8357600080fd5b611e8f86828701611bde565b9094509250506020840135611ea381611e4a565b809150509250925092565b8151815260208083015190820152604081016108cf565b600060208284031215611ed757600080fd5b81356109ea81611d5d565b60008060008060a08587031215611ef857600080fd5b611f028686611bc6565b935060608501356001600160401b03811115611f1d57600080fd5b611f2987828801611bde565b9094509250506080850135611f3d81611c26565b939692955090935050565b60008083601f840112611f5a57600080fd5b5081356001600160401b03811115611f7157600080fd5b6020830191508360208260051b8501011115611c1f57600080fd5b60008060208385031215611f9f57600080fd5b82356001600160401b03811115611fb557600080fd5b611d0f85828601611f48565b60008060008060608587031215611fd757600080fd5b8435611fe281611d5d565b9350611ff060208601611d9b565b925060408501356001600160401b0381111561200b57600080fd5b61201787828801611bde565b95989497509550505050565b60006020828403121561203557600080fd5b81356109ea81611c26565b60006020828403121561205257600080fd5b5035919050565b6000806000806040858703121561206f57600080fd5b84356001600160401b038082111561208657600080fd5b61209288838901611bde565b909650945060208701359150808211156120ab57600080fd5b5061201787828801611bde565b600080600080604085870312156120ce57600080fd5b84356001600160401b03808211156120e557600080fd5b6120f188838901611bde565b9096509450602087013591508082111561210a57600080fd5b5061201787828801611f48565b6000806040838503121561212a57600080fd5b823561213581611d5d565b9150602083013561214581611e4a565b809150509250929050565b60006060828403121561216257600080fd5b6109ea8383611bc6565b600181811c9082168061218057607f821691505b602082108103611bd857634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b808201808211156108cf57634e487b7160e01b600052601160045260246000fd5b6000602082840312156121ff57600080fd5b81516109ea81611d5d565b604051606081016001600160401b038111828210171561222c5761222c6121a0565b60405290565b604051601f8201601f191681016001600160401b038111828210171561225a5761225a6121a0565b604052919050565b60006001600160401b038084111561227c5761227c6121a0565b8360051b602061228d818301612232565b8681529185019181810190368411156122a557600080fd5b865b8481101561237d578035868111156122bf5760008081fd5b880160603682900312156122d35760008081fd5b6122db61220a565b81356122e681611d5d565b81526122f3828701611d9b565b868201526040808301358981111561230b5760008081fd5b9290920191601f36818501126123215760008081fd5b83358a811115612333576123336121a0565b612344818301601f19168a01612232565b9150808252368982870101111561235b5760008081fd5b808986018a8401376000908201890152908201528452509183019183016122a7565b50979650505050505050565b6000808585111561239957600080fd5b838611156123a657600080fd5b5050820193919092039150565b600084516123c5818460208901611de7565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000806000806080858703121561242057600080fd5b84359350602085013561243281611c26565b9250604085013561244281611d5d565b9396929550929360600135925050565b6000808335601e1984360301811261246957600080fd5b8301803591506001600160401b0382111561248357600080fd5b602001915036819003821315611c1f57600080fd5b6000826124b557634e487b7160e01b600052601260045260246000fd5b500490565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526124f060e0840182611e0b565b90506060850151603f198483030160a085015261250d8282611e0b565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561254557600080fd5b604051604081018181106001600160401b0382111715612567576125676121a0565b604052825181526020928301519281019290925250919050565b60006080828403121561259357600080fd5b61259b61220a565b8251815260208301516001600160401b03811681146125b957600080fd5b60208201526125cb8460408501612533565b60408201529392505050565b6000604082840312156125e957600080fd5b6109ea8383612533565b601f821115611a73576000816000526020600020601f850160051c8101602086101561261c5750805b601f850160051c820191505b8181101561263b57828155600101612628565b505050505050565b81516001600160401b0381111561265c5761265c6121a0565b6126708161266a845461216c565b846125f3565b602080601f8311600181146126a5576000841561268d5750858301515b600019600386901b1c1916600185901b17855561263b565b600085815260208120601f198616915b828110156126d4578886015182559484019460019091019084016126b5565b50858210156126f25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561277f57888303603f190185528151805163ffffffff1684528781015161ffff1688850152860151606087850181905261276b81860183611e0b565b96890196945050509086019060010161272b565b509098975050505050505050565b60006020828403121561279f57600080fd5b81516109ea81611c26565b60008a516127bc818460208f01611de7565b60f88b811b6001600160f81b031990811692850192835260f08c901b6001600160f01b03191660018401528a821b16600383015260e089901b6001600160e01b0319166004830152871515901b6008820152612827600982018760c01b6001600160c01b0319169052565b612840601182018660f01b6001600160f01b0319169052565b61285e601382018560601b6bffffffffffffffffffffffff19169052565b6027019b9a5050505050505050505050565b60008751612882818460208c01611de7565b60f89790971b6001600160f81b0319169190960190815260f094851b6001600160f01b0319908116600183015293851b841660038201529190931b909116600582015260e09190911b6001600160e01b0319166007820152600b0192915050565b600087516128f5818460208c01611de7565b87151560f81b90830190815260c087901b6001600160c01b031916600182015260f086901b6001600160f01b0319166009820152606085901b6bffffffffffffffffffffffff1916600b820152835161295581601f840160208801611de7565b01601f0198975050505050505050565b60006020828403121561297757600080fd5b81516109ea81611e4a565b60008251612994818460208701611de7565b919091019291505056fea2646970667358221220f82735542d2123dfe79f1f154bd802bbaf3bd863d0c8733a84ed3e1cebda324364736f6c63430008160033",
  "devdoc": {
    "details": "Extends OAppRead and OAppOptionsType3 for cross-chain read and compute operations.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "AggregatedPrice(uint256)": {
        "params": {
          "averagePrice": "The calculated average token price (USDC amount)."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "constructor": {
        "params": {
          "_endpoint": "The LayerZero endpoint contract address.",
          "_readChannel": "The LayerZero read channel ID."
        }
      },
      "getCmd()": {
        "returns": {
          "_0": "cmd The encoded command to request Uniswap quotes."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzMap(bytes,bytes)": {
        "params": {
          "_response": "The response from the read request."
        },
        "returns": {
          "_0": "Encoded token output amount (USDC amount)."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "lzReduce(bytes,bytes[])": {
        "params": {
          "_responses": "Array of mapped responses containing token output amounts."
        },
        "returns": {
          "_0": "Encoded average token output amount."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteAverageUniswapPrice(bytes,bool)": {
        "params": {
          "_extraOptions": "Additional messaging options.",
          "_payInLzToken": "Boolean flag indicating whether to pay in LayerZero tokens."
        },
        "returns": {
          "fee": "The estimated messaging fee."
        }
      },
      "readAverageUniswapPrice(bytes)": {
        "params": {
          "_extraOptions": "Additional messaging options, including gas and fee settings."
        },
        "returns": {
          "receipt": "The LayerZero messaging receipt for the request."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "setReadChannel(uint32,bool)": {
        "params": {
          "_active": "Flag to activate or deactivate the channel.",
          "_channelId": "The channel ID to set."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "UniswapQuoteDemo",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AggregatedPrice(uint256)": {
        "notice": "Emitted when the aggregated average token price is computed and received."
      }
    },
    "kind": "user",
    "methods": {
      "READ_CHANNEL()": {
        "notice": "LayerZero read channel ID."
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "chainConfigs(uint32)": {
        "notice": "Mapping to store chain configurations indexed by target chain ID (targetEid)."
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "constructor": {
        "notice": "Constructor to initialize the UniswapQuoteDemo contract with hardcoded chain configurations."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "getCmd()": {
        "notice": "Constructs a command to query the Uniswap QuoterV2 for WETH/USDC prices on all configured chains."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "lzMap(bytes,bytes)": {
        "notice": "Processes individual Uniswap QuoterV2 responses, encoding the result."
      },
      "lzReduce(bytes,bytes[])": {
        "notice": "Aggregates individual token output amounts to compute an average."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "quoteAverageUniswapPrice(bytes,bool)": {
        "notice": "Quotes the estimated messaging fee for querying Uniswap QuoterV2 for WETH/USDC prices."
      },
      "readAverageUniswapPrice(bytes)": {
        "notice": "Sends a read request to LayerZero, querying Uniswap QuoterV2 for WETH/USDC prices on configured chains."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      },
      "setReadChannel(uint32,bool)": {
        "notice": "Sets the LayerZero read channel, enabling or disabling it based on `_active`."
      },
      "targetEids(uint256)": {
        "notice": "Array to store all active targetEids for iteration."
      }
    },
    "notice": "Simplified contract to query WETH/USDC prices on three chains and compute their average using LayerZero and Uniswap V3 QuoterV2.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2625,
        "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 938,
        "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 1582,
        "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 5338,
        "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
        "label": "READ_CHANNEL",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 5354,
        "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
        "label": "targetEids",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 5360,
        "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
        "label": "chainConfigs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_struct(ChainConfig)5350_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_mapping(t_uint32,t_struct(ChainConfig)5350_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct UniswapV3QuoteDemo.ChainConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainConfig)5350_storage"
      },
      "t_struct(ChainConfig)5350_storage": {
        "encoding": "inplace",
        "label": "struct UniswapV3QuoteDemo.ChainConfig",
        "members": [
          {
            "astId": 5341,
            "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
            "label": "confirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5343,
            "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
            "label": "quoterAddress",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5345,
            "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
            "label": "tokenInAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5347,
            "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
            "label": "tokenOutAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5349,
            "contract": "contracts/UniswapV3QuoteDemo.sol:UniswapV3QuoteDemo",
            "label": "fee",
            "offset": 20,
            "slot": "2",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
