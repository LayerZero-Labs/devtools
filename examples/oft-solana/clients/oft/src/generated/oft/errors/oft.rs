//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum OftError {
    /// 6000 - 
    #[error("")]
    Unauthorized = 0x1770,
    /// 6001 - 
    #[error("")]
    InvalidSender = 0x1771,
    /// 6002 - 
    #[error("")]
    InvalidDecimals = 0x1772,
    /// 6003 - 
    #[error("")]
    SlippageExceeded = 0x1773,
    /// 6004 - 
    #[error("")]
    InvalidTokenDest = 0x1774,
    /// 6005 - 
    #[error("")]
    RateLimitExceeded = 0x1775,
    /// 6006 - 
    #[error("")]
    InvalidFee = 0x1776,
    /// 6007 - 
    #[error("")]
    InvalidMintAuthority = 0x1777,
    /// 6008 - 
    #[error("")]
    Paused = 0x1778,
}

impl solana_program::program_error::PrintProgramError for OftError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for OftError {
    fn type_of() -> &'static str {
        "OftError"
    }
}

