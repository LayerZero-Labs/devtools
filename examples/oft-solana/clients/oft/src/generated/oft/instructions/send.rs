//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct Send {
      
              
          pub signer: solana_program::pubkey::Pubkey,
          
              
          pub peer: solana_program::pubkey::Pubkey,
          
              
          pub oft_store: solana_program::pubkey::Pubkey,
          
              
          pub token_source: solana_program::pubkey::Pubkey,
          
              
          pub token_escrow: solana_program::pubkey::Pubkey,
          
              
          pub token_mint: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl Send {
  pub fn instruction(&self, args: SendInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: SendInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.signer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.peer,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.oft_store,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_source,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_escrow,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&SendInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::OFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SendInstructionData {
            discriminator: [u8; 8],
                                                      }

impl SendInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [102, 251, 20, 187, 65, 75, 12, 69],
                                                                                                                                  }
  }
}

impl Default for SendInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SendInstructionArgs {
                  pub dst_eid: u32,
                pub to: [u8; 32],
                pub amount_ld: u64,
                pub min_amount_ld: u64,
                pub options: Vec<u8>,
                pub compose_msg: Option<Vec<u8>>,
                pub native_fee: u64,
                pub lz_token_fee: u64,
      }


/// Instruction builder for `Send`.
///
/// ### Accounts:
///
                ///   0. `[signer]` signer
                ///   1. `[writable]` peer
                ///   2. `[writable]` oft_store
                ///   3. `[writable]` token_source
                ///   4. `[writable]` token_escrow
                ///   5. `[writable]` token_mint
                ///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
          ///   7. `[]` event_authority
          ///   8. `[]` program
#[derive(Clone, Debug, Default)]
pub struct SendBuilder {
            signer: Option<solana_program::pubkey::Pubkey>,
                peer: Option<solana_program::pubkey::Pubkey>,
                oft_store: Option<solana_program::pubkey::Pubkey>,
                token_source: Option<solana_program::pubkey::Pubkey>,
                token_escrow: Option<solana_program::pubkey::Pubkey>,
                token_mint: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        dst_eid: Option<u32>,
                to: Option<[u8; 32]>,
                amount_ld: Option<u64>,
                min_amount_ld: Option<u64>,
                options: Option<Vec<u8>>,
                compose_msg: Option<Vec<u8>>,
                native_fee: Option<u64>,
                lz_token_fee: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SendBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn peer(&mut self, peer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.peer = Some(peer);
                    self
    }
            #[inline(always)]
    pub fn oft_store(&mut self, oft_store: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.oft_store = Some(oft_store);
                    self
    }
            #[inline(always)]
    pub fn token_source(&mut self, token_source: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_source = Some(token_source);
                    self
    }
            #[inline(always)]
    pub fn token_escrow(&mut self, token_escrow: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_escrow = Some(token_escrow);
                    self
    }
            #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn dst_eid(&mut self, dst_eid: u32) -> &mut Self {
        self.dst_eid = Some(dst_eid);
        self
      }
                #[inline(always)]
      pub fn to(&mut self, to: [u8; 32]) -> &mut Self {
        self.to = Some(to);
        self
      }
                #[inline(always)]
      pub fn amount_ld(&mut self, amount_ld: u64) -> &mut Self {
        self.amount_ld = Some(amount_ld);
        self
      }
                #[inline(always)]
      pub fn min_amount_ld(&mut self, min_amount_ld: u64) -> &mut Self {
        self.min_amount_ld = Some(min_amount_ld);
        self
      }
                #[inline(always)]
      pub fn options(&mut self, options: Vec<u8>) -> &mut Self {
        self.options = Some(options);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn compose_msg(&mut self, compose_msg: Vec<u8>) -> &mut Self {
        self.compose_msg = Some(compose_msg);
        self
      }
                #[inline(always)]
      pub fn native_fee(&mut self, native_fee: u64) -> &mut Self {
        self.native_fee = Some(native_fee);
        self
      }
                #[inline(always)]
      pub fn lz_token_fee(&mut self, lz_token_fee: u64) -> &mut Self {
        self.lz_token_fee = Some(lz_token_fee);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Send {
                              signer: self.signer.expect("signer is not set"),
                                        peer: self.peer.expect("peer is not set"),
                                        oft_store: self.oft_store.expect("oft_store is not set"),
                                        token_source: self.token_source.expect("token_source is not set"),
                                        token_escrow: self.token_escrow.expect("token_escrow is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = SendInstructionArgs {
                                                              dst_eid: self.dst_eid.clone().expect("dst_eid is not set"),
                                                                  to: self.to.clone().expect("to is not set"),
                                                                  amount_ld: self.amount_ld.clone().expect("amount_ld is not set"),
                                                                  min_amount_ld: self.min_amount_ld.clone().expect("min_amount_ld is not set"),
                                                                  options: self.options.clone().expect("options is not set"),
                                                                  compose_msg: self.compose_msg.clone(),
                                                                  native_fee: self.native_fee.clone().expect("native_fee is not set"),
                                                                  lz_token_fee: self.lz_token_fee.clone().expect("lz_token_fee is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `send` CPI accounts.
  pub struct SendCpiAccounts<'a, 'b> {
          
                    
              pub signer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub peer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub oft_store: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_source: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_escrow: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `send` CPI instruction.
pub struct SendCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub signer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub peer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub oft_store: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_source: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_escrow: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: SendInstructionArgs,
  }

impl<'a, 'b> SendCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: SendCpiAccounts<'a, 'b>,
              args: SendInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              peer: accounts.peer,
              oft_store: accounts.oft_store,
              token_source: accounts.token_source,
              token_escrow: accounts.token_escrow,
              token_mint: accounts.token_mint,
              token_program: accounts.token_program,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.peer.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.oft_store.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_source.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_escrow.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&SendInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::OFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.peer.clone());
                        account_infos.push(self.oft_store.clone());
                        account_infos.push(self.token_source.clone());
                        account_infos.push(self.token_escrow.clone());
                        account_infos.push(self.token_mint.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Send` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` signer
                ///   1. `[writable]` peer
                ///   2. `[writable]` oft_store
                ///   3. `[writable]` token_source
                ///   4. `[writable]` token_escrow
                ///   5. `[writable]` token_mint
          ///   6. `[]` token_program
          ///   7. `[]` event_authority
          ///   8. `[]` program
#[derive(Clone, Debug)]
pub struct SendCpiBuilder<'a, 'b> {
  instruction: Box<SendCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SendCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(SendCpiBuilderInstruction {
      __program: program,
              signer: None,
              peer: None,
              oft_store: None,
              token_source: None,
              token_escrow: None,
              token_mint: None,
              token_program: None,
              event_authority: None,
              program: None,
                                            dst_eid: None,
                                to: None,
                                amount_ld: None,
                                min_amount_ld: None,
                                options: None,
                                compose_msg: None,
                                native_fee: None,
                                lz_token_fee: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn peer(&mut self, peer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.peer = Some(peer);
                    self
    }
      #[inline(always)]
    pub fn oft_store(&mut self, oft_store: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.oft_store = Some(oft_store);
                    self
    }
      #[inline(always)]
    pub fn token_source(&mut self, token_source: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_source = Some(token_source);
                    self
    }
      #[inline(always)]
    pub fn token_escrow(&mut self, token_escrow: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_escrow = Some(token_escrow);
                    self
    }
      #[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn dst_eid(&mut self, dst_eid: u32) -> &mut Self {
        self.instruction.dst_eid = Some(dst_eid);
        self
      }
                #[inline(always)]
      pub fn to(&mut self, to: [u8; 32]) -> &mut Self {
        self.instruction.to = Some(to);
        self
      }
                #[inline(always)]
      pub fn amount_ld(&mut self, amount_ld: u64) -> &mut Self {
        self.instruction.amount_ld = Some(amount_ld);
        self
      }
                #[inline(always)]
      pub fn min_amount_ld(&mut self, min_amount_ld: u64) -> &mut Self {
        self.instruction.min_amount_ld = Some(min_amount_ld);
        self
      }
                #[inline(always)]
      pub fn options(&mut self, options: Vec<u8>) -> &mut Self {
        self.instruction.options = Some(options);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn compose_msg(&mut self, compose_msg: Vec<u8>) -> &mut Self {
        self.instruction.compose_msg = Some(compose_msg);
        self
      }
                #[inline(always)]
      pub fn native_fee(&mut self, native_fee: u64) -> &mut Self {
        self.instruction.native_fee = Some(native_fee);
        self
      }
                #[inline(always)]
      pub fn lz_token_fee(&mut self, lz_token_fee: u64) -> &mut Self {
        self.instruction.lz_token_fee = Some(lz_token_fee);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = SendInstructionArgs {
                                                              dst_eid: self.instruction.dst_eid.clone().expect("dst_eid is not set"),
                                                                  to: self.instruction.to.clone().expect("to is not set"),
                                                                  amount_ld: self.instruction.amount_ld.clone().expect("amount_ld is not set"),
                                                                  min_amount_ld: self.instruction.min_amount_ld.clone().expect("min_amount_ld is not set"),
                                                                  options: self.instruction.options.clone().expect("options is not set"),
                                                                  compose_msg: self.instruction.compose_msg.clone(),
                                                                  native_fee: self.instruction.native_fee.clone().expect("native_fee is not set"),
                                                                  lz_token_fee: self.instruction.lz_token_fee.clone().expect("lz_token_fee is not set"),
                                    };
        let instruction = SendCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          peer: self.instruction.peer.expect("peer is not set"),
                  
          oft_store: self.instruction.oft_store.expect("oft_store is not set"),
                  
          token_source: self.instruction.token_source.expect("token_source is not set"),
                  
          token_escrow: self.instruction.token_escrow.expect("token_escrow is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct SendCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                peer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                oft_store: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        dst_eid: Option<u32>,
                to: Option<[u8; 32]>,
                amount_ld: Option<u64>,
                min_amount_ld: Option<u64>,
                options: Option<Vec<u8>>,
                compose_msg: Option<Vec<u8>>,
                native_fee: Option<u64>,
                lz_token_fee: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

