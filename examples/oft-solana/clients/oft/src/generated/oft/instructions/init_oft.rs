//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::OFTType;
use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct InitOft {
      
              
          pub payer: solana_program::pubkey::Pubkey,
          
              
          pub oft_store: solana_program::pubkey::Pubkey,
          
              
          pub lz_receive_types_accounts: solana_program::pubkey::Pubkey,
          
              
          pub token_mint: solana_program::pubkey::Pubkey,
          
              
          pub token_escrow: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl InitOft {
  pub fn instruction(&self, args: InitOftInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitOftInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.oft_store,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.lz_receive_types_accounts,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_escrow,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitOftInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::OFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitOftInstructionData {
            discriminator: [u8; 8],
                              }

impl InitOftInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [182, 169, 147, 16, 201, 45, 76, 23],
                                                                          }
  }
}

impl Default for InitOftInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitOftInstructionArgs {
                  pub oft_type: OFTType,
                pub admin: Pubkey,
                pub shared_decimals: u8,
                pub endpoint_program: Option<Pubkey>,
      }


/// Instruction builder for `InitOft`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` oft_store
                ///   2. `[writable]` lz_receive_types_accounts
          ///   3. `[]` token_mint
                      ///   4. `[writable, signer]` token_escrow
                ///   5. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitOftBuilder {
            payer: Option<solana_program::pubkey::Pubkey>,
                oft_store: Option<solana_program::pubkey::Pubkey>,
                lz_receive_types_accounts: Option<solana_program::pubkey::Pubkey>,
                token_mint: Option<solana_program::pubkey::Pubkey>,
                token_escrow: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                        oft_type: Option<OFTType>,
                admin: Option<Pubkey>,
                shared_decimals: Option<u8>,
                endpoint_program: Option<Pubkey>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitOftBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            #[inline(always)]
    pub fn oft_store(&mut self, oft_store: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.oft_store = Some(oft_store);
                    self
    }
            #[inline(always)]
    pub fn lz_receive_types_accounts(&mut self, lz_receive_types_accounts: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.lz_receive_types_accounts = Some(lz_receive_types_accounts);
                    self
    }
            #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
            #[inline(always)]
    pub fn token_escrow(&mut self, token_escrow: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_escrow = Some(token_escrow);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn oft_type(&mut self, oft_type: OFTType) -> &mut Self {
        self.oft_type = Some(oft_type);
        self
      }
                #[inline(always)]
      pub fn admin(&mut self, admin: Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
      }
                #[inline(always)]
      pub fn shared_decimals(&mut self, shared_decimals: u8) -> &mut Self {
        self.shared_decimals = Some(shared_decimals);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn endpoint_program(&mut self, endpoint_program: Pubkey) -> &mut Self {
        self.endpoint_program = Some(endpoint_program);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = InitOft {
                              payer: self.payer.expect("payer is not set"),
                                        oft_store: self.oft_store.expect("oft_store is not set"),
                                        lz_receive_types_accounts: self.lz_receive_types_accounts.expect("lz_receive_types_accounts is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                                        token_escrow: self.token_escrow.expect("token_escrow is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
          let args = InitOftInstructionArgs {
                                                              oft_type: self.oft_type.clone().expect("oft_type is not set"),
                                                                  admin: self.admin.clone().expect("admin is not set"),
                                                                  shared_decimals: self.shared_decimals.clone().expect("shared_decimals is not set"),
                                                                  endpoint_program: self.endpoint_program.clone(),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `init_oft` CPI accounts.
  pub struct InitOftCpiAccounts<'a, 'b> {
          
                    
              pub payer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub oft_store: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub lz_receive_types_accounts: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_escrow: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `init_oft` CPI instruction.
pub struct InitOftCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub payer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub oft_store: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub lz_receive_types_accounts: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_escrow: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitOftInstructionArgs,
  }

impl<'a, 'b> InitOftCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: InitOftCpiAccounts<'a, 'b>,
              args: InitOftInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              payer: accounts.payer,
              oft_store: accounts.oft_store,
              lz_receive_types_accounts: accounts.lz_receive_types_accounts,
              token_mint: accounts.token_mint,
              token_escrow: accounts.token_escrow,
              token_program: accounts.token_program,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.oft_store.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lz_receive_types_accounts.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_escrow.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitOftInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::OFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.payer.clone());
                        account_infos.push(self.oft_store.clone());
                        account_infos.push(self.lz_receive_types_accounts.clone());
                        account_infos.push(self.token_mint.clone());
                        account_infos.push(self.token_escrow.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitOft` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` oft_store
                ///   2. `[writable]` lz_receive_types_accounts
          ///   3. `[]` token_mint
                      ///   4. `[writable, signer]` token_escrow
          ///   5. `[]` token_program
          ///   6. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitOftCpiBuilder<'a, 'b> {
  instruction: Box<InitOftCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitOftCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitOftCpiBuilderInstruction {
      __program: program,
              payer: None,
              oft_store: None,
              lz_receive_types_accounts: None,
              token_mint: None,
              token_escrow: None,
              token_program: None,
              system_program: None,
                                            oft_type: None,
                                admin: None,
                                shared_decimals: None,
                                endpoint_program: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      #[inline(always)]
    pub fn oft_store(&mut self, oft_store: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.oft_store = Some(oft_store);
                    self
    }
      #[inline(always)]
    pub fn lz_receive_types_accounts(&mut self, lz_receive_types_accounts: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lz_receive_types_accounts = Some(lz_receive_types_accounts);
                    self
    }
      #[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
      #[inline(always)]
    pub fn token_escrow(&mut self, token_escrow: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_escrow = Some(token_escrow);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn oft_type(&mut self, oft_type: OFTType) -> &mut Self {
        self.instruction.oft_type = Some(oft_type);
        self
      }
                #[inline(always)]
      pub fn admin(&mut self, admin: Pubkey) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
      }
                #[inline(always)]
      pub fn shared_decimals(&mut self, shared_decimals: u8) -> &mut Self {
        self.instruction.shared_decimals = Some(shared_decimals);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn endpoint_program(&mut self, endpoint_program: Pubkey) -> &mut Self {
        self.instruction.endpoint_program = Some(endpoint_program);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = InitOftInstructionArgs {
                                                              oft_type: self.instruction.oft_type.clone().expect("oft_type is not set"),
                                                                  admin: self.instruction.admin.clone().expect("admin is not set"),
                                                                  shared_decimals: self.instruction.shared_decimals.clone().expect("shared_decimals is not set"),
                                                                  endpoint_program: self.instruction.endpoint_program.clone(),
                                    };
        let instruction = InitOftCpi {
        __program: self.instruction.__program,
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          oft_store: self.instruction.oft_store.expect("oft_store is not set"),
                  
          lz_receive_types_accounts: self.instruction.lz_receive_types_accounts.expect("lz_receive_types_accounts is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                  
          token_escrow: self.instruction.token_escrow.expect("token_escrow is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitOftCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                oft_store: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                lz_receive_types_accounts: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        oft_type: Option<OFTType>,
                admin: Option<Pubkey>,
                shared_decimals: Option<u8>,
                endpoint_program: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

