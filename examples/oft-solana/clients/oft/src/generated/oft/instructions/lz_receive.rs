//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::LzReceiveParams;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct LzReceive {
      
              
          pub payer: solana_program::pubkey::Pubkey,
          
              
          pub peer: solana_program::pubkey::Pubkey,
          
              
          pub oft_store: solana_program::pubkey::Pubkey,
          
              
          pub token_escrow: solana_program::pubkey::Pubkey,
          
              
          pub to_address: solana_program::pubkey::Pubkey,
          
              
          pub token_dest: solana_program::pubkey::Pubkey,
          
              
          pub token_mint: solana_program::pubkey::Pubkey,
          
              
          pub mint_authority: Option<solana_program::pubkey::Pubkey>,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub associated_token_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl LzReceive {
  pub fn instruction(&self, args: LzReceiveInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: LzReceiveInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(13+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.peer,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.oft_store,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_escrow,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.to_address,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_dest,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_mint,
            false
          ));
                                                      if let Some(mint_authority) = self.mint_authority {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                mint_authority,
                false,
              ));
            } else {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OFT_ID,
                false,
              ));
            }
                                                    accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&LzReceiveInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::OFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct LzReceiveInstructionData {
            discriminator: [u8; 8],
            }

impl LzReceiveInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [8, 179, 120, 109, 33, 118, 189, 80],
                                }
  }
}

impl Default for LzReceiveInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct LzReceiveInstructionArgs {
                  pub params: LzReceiveParams,
      }


/// Instruction builder for `LzReceive`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` peer
                ///   2. `[writable]` oft_store
                ///   3. `[writable]` token_escrow
          ///   4. `[]` to_address
                ///   5. `[writable]` token_dest
                ///   6. `[writable]` token_mint
                ///   7. `[optional]` mint_authority
                ///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
          ///   9. `[]` associated_token_program
                ///   10. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   11. `[]` event_authority
          ///   12. `[]` program
#[derive(Clone, Debug, Default)]
pub struct LzReceiveBuilder {
            payer: Option<solana_program::pubkey::Pubkey>,
                peer: Option<solana_program::pubkey::Pubkey>,
                oft_store: Option<solana_program::pubkey::Pubkey>,
                token_escrow: Option<solana_program::pubkey::Pubkey>,
                to_address: Option<solana_program::pubkey::Pubkey>,
                token_dest: Option<solana_program::pubkey::Pubkey>,
                token_mint: Option<solana_program::pubkey::Pubkey>,
                mint_authority: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                associated_token_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        params: Option<LzReceiveParams>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LzReceiveBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            #[inline(always)]
    pub fn peer(&mut self, peer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.peer = Some(peer);
                    self
    }
            #[inline(always)]
    pub fn oft_store(&mut self, oft_store: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.oft_store = Some(oft_store);
                    self
    }
            #[inline(always)]
    pub fn token_escrow(&mut self, token_escrow: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_escrow = Some(token_escrow);
                    self
    }
            #[inline(always)]
    pub fn to_address(&mut self, to_address: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.to_address = Some(to_address);
                    self
    }
            #[inline(always)]
    pub fn token_dest(&mut self, token_dest: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_dest = Some(token_dest);
                    self
    }
            #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn mint_authority(&mut self, mint_authority: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
                        self.mint_authority = mint_authority;
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn params(&mut self, params: LzReceiveParams) -> &mut Self {
        self.params = Some(params);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = LzReceive {
                              payer: self.payer.expect("payer is not set"),
                                        peer: self.peer.expect("peer is not set"),
                                        oft_store: self.oft_store.expect("oft_store is not set"),
                                        token_escrow: self.token_escrow.expect("token_escrow is not set"),
                                        to_address: self.to_address.expect("to_address is not set"),
                                        token_dest: self.token_dest.expect("token_dest is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                                        mint_authority: self.mint_authority,
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        associated_token_program: self.associated_token_program.expect("associated_token_program is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = LzReceiveInstructionArgs {
                                                              params: self.params.clone().expect("params is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `lz_receive` CPI accounts.
  pub struct LzReceiveCpiAccounts<'a, 'b> {
          
                    
              pub payer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub peer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub oft_store: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_escrow: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub to_address: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_dest: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `lz_receive` CPI instruction.
pub struct LzReceiveCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub payer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub peer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub oft_store: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_escrow: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub to_address: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_dest: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: LzReceiveInstructionArgs,
  }

impl<'a, 'b> LzReceiveCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: LzReceiveCpiAccounts<'a, 'b>,
              args: LzReceiveInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              payer: accounts.payer,
              peer: accounts.peer,
              oft_store: accounts.oft_store,
              token_escrow: accounts.token_escrow,
              to_address: accounts.to_address,
              token_dest: accounts.token_dest,
              token_mint: accounts.token_mint,
              mint_authority: accounts.mint_authority,
              token_program: accounts.token_program,
              associated_token_program: accounts.associated_token_program,
              system_program: accounts.system_program,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(13+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.peer.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.oft_store.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_escrow.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.to_address.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_dest.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_mint.key,
            false
          ));
                                          if let Some(mint_authority) = self.mint_authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              *mint_authority.key,
              false,
            ));
          } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              crate::OFT_ID,
              false,
            ));
          }
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&LzReceiveInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::OFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.payer.clone());
                        account_infos.push(self.peer.clone());
                        account_infos.push(self.oft_store.clone());
                        account_infos.push(self.token_escrow.clone());
                        account_infos.push(self.to_address.clone());
                        account_infos.push(self.token_dest.clone());
                        account_infos.push(self.token_mint.clone());
                        if let Some(mint_authority) = self.mint_authority {
          account_infos.push(mint_authority.clone());
        }
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `LzReceive` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` peer
                ///   2. `[writable]` oft_store
                ///   3. `[writable]` token_escrow
          ///   4. `[]` to_address
                ///   5. `[writable]` token_dest
                ///   6. `[writable]` token_mint
                ///   7. `[optional]` mint_authority
          ///   8. `[]` token_program
          ///   9. `[]` associated_token_program
          ///   10. `[]` system_program
          ///   11. `[]` event_authority
          ///   12. `[]` program
#[derive(Clone, Debug)]
pub struct LzReceiveCpiBuilder<'a, 'b> {
  instruction: Box<LzReceiveCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LzReceiveCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(LzReceiveCpiBuilderInstruction {
      __program: program,
              payer: None,
              peer: None,
              oft_store: None,
              token_escrow: None,
              to_address: None,
              token_dest: None,
              token_mint: None,
              mint_authority: None,
              token_program: None,
              associated_token_program: None,
              system_program: None,
              event_authority: None,
              program: None,
                                            params: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      #[inline(always)]
    pub fn peer(&mut self, peer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.peer = Some(peer);
                    self
    }
      #[inline(always)]
    pub fn oft_store(&mut self, oft_store: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.oft_store = Some(oft_store);
                    self
    }
      #[inline(always)]
    pub fn token_escrow(&mut self, token_escrow: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_escrow = Some(token_escrow);
                    self
    }
      #[inline(always)]
    pub fn to_address(&mut self, to_address: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.to_address = Some(to_address);
                    self
    }
      #[inline(always)]
    pub fn token_dest(&mut self, token_dest: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_dest = Some(token_dest);
                    self
    }
      #[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn mint_authority(&mut self, mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.mint_authority = mint_authority;
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn params(&mut self, params: LzReceiveParams) -> &mut Self {
        self.instruction.params = Some(params);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = LzReceiveInstructionArgs {
                                                              params: self.instruction.params.clone().expect("params is not set"),
                                    };
        let instruction = LzReceiveCpi {
        __program: self.instruction.__program,
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          peer: self.instruction.peer.expect("peer is not set"),
                  
          oft_store: self.instruction.oft_store.expect("oft_store is not set"),
                  
          token_escrow: self.instruction.token_escrow.expect("token_escrow is not set"),
                  
          to_address: self.instruction.to_address.expect("to_address is not set"),
                  
          token_dest: self.instruction.token_dest.expect("token_dest is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                  
          mint_authority: self.instruction.mint_authority,
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct LzReceiveCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                peer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                oft_store: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                to_address: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_dest: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        params: Option<LzReceiveParams>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

