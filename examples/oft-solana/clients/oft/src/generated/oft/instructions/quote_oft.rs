//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct QuoteOft {
      
              
          pub oft_store: solana_program::pubkey::Pubkey,
          
              
          pub peer: solana_program::pubkey::Pubkey,
          
              
          pub token_mint: solana_program::pubkey::Pubkey,
      }

impl QuoteOft {
  pub fn instruction(&self, args: QuoteOftInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: QuoteOftInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oft_store,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.peer,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&QuoteOftInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::OFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct QuoteOftInstructionData {
            discriminator: [u8; 8],
                                                }

impl QuoteOftInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [179, 255, 92, 202, 251, 82, 82, 118],
                                                                                                                    }
  }
}

impl Default for QuoteOftInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct QuoteOftInstructionArgs {
                  pub dst_eid: u32,
                pub to: [u8; 32],
                pub amount_ld: u64,
                pub min_amount_ld: u64,
                pub options: Vec<u8>,
                pub compose_msg: Option<Vec<u8>>,
                pub pay_in_lz_token: bool,
      }


/// Instruction builder for `QuoteOft`.
///
/// ### Accounts:
///
          ///   0. `[]` oft_store
          ///   1. `[]` peer
          ///   2. `[]` token_mint
#[derive(Clone, Debug, Default)]
pub struct QuoteOftBuilder {
            oft_store: Option<solana_program::pubkey::Pubkey>,
                peer: Option<solana_program::pubkey::Pubkey>,
                token_mint: Option<solana_program::pubkey::Pubkey>,
                        dst_eid: Option<u32>,
                to: Option<[u8; 32]>,
                amount_ld: Option<u64>,
                min_amount_ld: Option<u64>,
                options: Option<Vec<u8>>,
                compose_msg: Option<Vec<u8>>,
                pay_in_lz_token: Option<bool>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl QuoteOftBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn oft_store(&mut self, oft_store: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.oft_store = Some(oft_store);
                    self
    }
            #[inline(always)]
    pub fn peer(&mut self, peer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.peer = Some(peer);
                    self
    }
            #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
                    #[inline(always)]
      pub fn dst_eid(&mut self, dst_eid: u32) -> &mut Self {
        self.dst_eid = Some(dst_eid);
        self
      }
                #[inline(always)]
      pub fn to(&mut self, to: [u8; 32]) -> &mut Self {
        self.to = Some(to);
        self
      }
                #[inline(always)]
      pub fn amount_ld(&mut self, amount_ld: u64) -> &mut Self {
        self.amount_ld = Some(amount_ld);
        self
      }
                #[inline(always)]
      pub fn min_amount_ld(&mut self, min_amount_ld: u64) -> &mut Self {
        self.min_amount_ld = Some(min_amount_ld);
        self
      }
                #[inline(always)]
      pub fn options(&mut self, options: Vec<u8>) -> &mut Self {
        self.options = Some(options);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn compose_msg(&mut self, compose_msg: Vec<u8>) -> &mut Self {
        self.compose_msg = Some(compose_msg);
        self
      }
                #[inline(always)]
      pub fn pay_in_lz_token(&mut self, pay_in_lz_token: bool) -> &mut Self {
        self.pay_in_lz_token = Some(pay_in_lz_token);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = QuoteOft {
                              oft_store: self.oft_store.expect("oft_store is not set"),
                                        peer: self.peer.expect("peer is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                      };
          let args = QuoteOftInstructionArgs {
                                                              dst_eid: self.dst_eid.clone().expect("dst_eid is not set"),
                                                                  to: self.to.clone().expect("to is not set"),
                                                                  amount_ld: self.amount_ld.clone().expect("amount_ld is not set"),
                                                                  min_amount_ld: self.min_amount_ld.clone().expect("min_amount_ld is not set"),
                                                                  options: self.options.clone().expect("options is not set"),
                                                                  compose_msg: self.compose_msg.clone(),
                                                                  pay_in_lz_token: self.pay_in_lz_token.clone().expect("pay_in_lz_token is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `quote_oft` CPI accounts.
  pub struct QuoteOftCpiAccounts<'a, 'b> {
          
                    
              pub oft_store: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub peer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `quote_oft` CPI instruction.
pub struct QuoteOftCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub oft_store: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub peer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: QuoteOftInstructionArgs,
  }

impl<'a, 'b> QuoteOftCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: QuoteOftCpiAccounts<'a, 'b>,
              args: QuoteOftInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              oft_store: accounts.oft_store,
              peer: accounts.peer,
              token_mint: accounts.token_mint,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oft_store.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.peer.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&QuoteOftInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::OFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.oft_store.clone());
                        account_infos.push(self.peer.clone());
                        account_infos.push(self.token_mint.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `QuoteOft` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` oft_store
          ///   1. `[]` peer
          ///   2. `[]` token_mint
#[derive(Clone, Debug)]
pub struct QuoteOftCpiBuilder<'a, 'b> {
  instruction: Box<QuoteOftCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> QuoteOftCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(QuoteOftCpiBuilderInstruction {
      __program: program,
              oft_store: None,
              peer: None,
              token_mint: None,
                                            dst_eid: None,
                                to: None,
                                amount_ld: None,
                                min_amount_ld: None,
                                options: None,
                                compose_msg: None,
                                pay_in_lz_token: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn oft_store(&mut self, oft_store: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.oft_store = Some(oft_store);
                    self
    }
      #[inline(always)]
    pub fn peer(&mut self, peer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.peer = Some(peer);
                    self
    }
      #[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
                    #[inline(always)]
      pub fn dst_eid(&mut self, dst_eid: u32) -> &mut Self {
        self.instruction.dst_eid = Some(dst_eid);
        self
      }
                #[inline(always)]
      pub fn to(&mut self, to: [u8; 32]) -> &mut Self {
        self.instruction.to = Some(to);
        self
      }
                #[inline(always)]
      pub fn amount_ld(&mut self, amount_ld: u64) -> &mut Self {
        self.instruction.amount_ld = Some(amount_ld);
        self
      }
                #[inline(always)]
      pub fn min_amount_ld(&mut self, min_amount_ld: u64) -> &mut Self {
        self.instruction.min_amount_ld = Some(min_amount_ld);
        self
      }
                #[inline(always)]
      pub fn options(&mut self, options: Vec<u8>) -> &mut Self {
        self.instruction.options = Some(options);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn compose_msg(&mut self, compose_msg: Vec<u8>) -> &mut Self {
        self.instruction.compose_msg = Some(compose_msg);
        self
      }
                #[inline(always)]
      pub fn pay_in_lz_token(&mut self, pay_in_lz_token: bool) -> &mut Self {
        self.instruction.pay_in_lz_token = Some(pay_in_lz_token);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = QuoteOftInstructionArgs {
                                                              dst_eid: self.instruction.dst_eid.clone().expect("dst_eid is not set"),
                                                                  to: self.instruction.to.clone().expect("to is not set"),
                                                                  amount_ld: self.instruction.amount_ld.clone().expect("amount_ld is not set"),
                                                                  min_amount_ld: self.instruction.min_amount_ld.clone().expect("min_amount_ld is not set"),
                                                                  options: self.instruction.options.clone().expect("options is not set"),
                                                                  compose_msg: self.instruction.compose_msg.clone(),
                                                                  pay_in_lz_token: self.instruction.pay_in_lz_token.clone().expect("pay_in_lz_token is not set"),
                                    };
        let instruction = QuoteOftCpi {
        __program: self.instruction.__program,
                  
          oft_store: self.instruction.oft_store.expect("oft_store is not set"),
                  
          peer: self.instruction.peer.expect("peer is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct QuoteOftCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            oft_store: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                peer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        dst_eid: Option<u32>,
                to: Option<[u8; 32]>,
                amount_ld: Option<u64>,
                min_amount_ld: Option<u64>,
                options: Option<Vec<u8>>,
                compose_msg: Option<Vec<u8>>,
                pay_in_lz_token: Option<bool>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

