//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct ClearCompose {
      
              
          pub to: solana_program::pubkey::Pubkey,
          
              
          pub compose_message: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl ClearCompose {
  pub fn instruction(&self, args: ClearComposeInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: ClearComposeInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.to,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.compose_message,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&ClearComposeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClearComposeInstructionData {
            discriminator: [u8; 8],
                              }

impl ClearComposeInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [118, 1, 18, 142, 95, 175, 21, 125],
                                                                          }
  }
}

impl Default for ClearComposeInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClearComposeInstructionArgs {
                  pub from: Pubkey,
                pub guid: [u8; 32],
                pub index: u16,
                pub message: Vec<u8>,
      }


/// Instruction builder for `ClearCompose`.
///
/// ### Accounts:
///
                ///   0. `[signer]` to
                ///   1. `[writable]` compose_message
          ///   2. `[]` event_authority
          ///   3. `[]` program
#[derive(Clone, Debug, Default)]
pub struct ClearComposeBuilder {
            to: Option<solana_program::pubkey::Pubkey>,
                compose_message: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        from: Option<Pubkey>,
                guid: Option<[u8; 32]>,
                index: Option<u16>,
                message: Option<Vec<u8>>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ClearComposeBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn to(&mut self, to: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.to = Some(to);
                    self
    }
            #[inline(always)]
    pub fn compose_message(&mut self, compose_message: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.compose_message = Some(compose_message);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn from(&mut self, from: Pubkey) -> &mut Self {
        self.from = Some(from);
        self
      }
                #[inline(always)]
      pub fn guid(&mut self, guid: [u8; 32]) -> &mut Self {
        self.guid = Some(guid);
        self
      }
                #[inline(always)]
      pub fn index(&mut self, index: u16) -> &mut Self {
        self.index = Some(index);
        self
      }
                #[inline(always)]
      pub fn message(&mut self, message: Vec<u8>) -> &mut Self {
        self.message = Some(message);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = ClearCompose {
                              to: self.to.expect("to is not set"),
                                        compose_message: self.compose_message.expect("compose_message is not set"),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = ClearComposeInstructionArgs {
                                                              from: self.from.clone().expect("from is not set"),
                                                                  guid: self.guid.clone().expect("guid is not set"),
                                                                  index: self.index.clone().expect("index is not set"),
                                                                  message: self.message.clone().expect("message is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `clear_compose` CPI accounts.
  pub struct ClearComposeCpiAccounts<'a, 'b> {
          
                    
              pub to: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub compose_message: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `clear_compose` CPI instruction.
pub struct ClearComposeCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub to: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub compose_message: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: ClearComposeInstructionArgs,
  }

impl<'a, 'b> ClearComposeCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: ClearComposeCpiAccounts<'a, 'b>,
              args: ClearComposeInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              to: accounts.to,
              compose_message: accounts.compose_message,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.to.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.compose_message.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&ClearComposeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.to.clone());
                        account_infos.push(self.compose_message.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ClearCompose` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` to
                ///   1. `[writable]` compose_message
          ///   2. `[]` event_authority
          ///   3. `[]` program
#[derive(Clone, Debug)]
pub struct ClearComposeCpiBuilder<'a, 'b> {
  instruction: Box<ClearComposeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClearComposeCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ClearComposeCpiBuilderInstruction {
      __program: program,
              to: None,
              compose_message: None,
              event_authority: None,
              program: None,
                                            from: None,
                                guid: None,
                                index: None,
                                message: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn to(&mut self, to: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.to = Some(to);
                    self
    }
      #[inline(always)]
    pub fn compose_message(&mut self, compose_message: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.compose_message = Some(compose_message);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn from(&mut self, from: Pubkey) -> &mut Self {
        self.instruction.from = Some(from);
        self
      }
                #[inline(always)]
      pub fn guid(&mut self, guid: [u8; 32]) -> &mut Self {
        self.instruction.guid = Some(guid);
        self
      }
                #[inline(always)]
      pub fn index(&mut self, index: u16) -> &mut Self {
        self.instruction.index = Some(index);
        self
      }
                #[inline(always)]
      pub fn message(&mut self, message: Vec<u8>) -> &mut Self {
        self.instruction.message = Some(message);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = ClearComposeInstructionArgs {
                                                              from: self.instruction.from.clone().expect("from is not set"),
                                                                  guid: self.instruction.guid.clone().expect("guid is not set"),
                                                                  index: self.instruction.index.clone().expect("index is not set"),
                                                                  message: self.instruction.message.clone().expect("message is not set"),
                                    };
        let instruction = ClearComposeCpi {
        __program: self.instruction.__program,
                  
          to: self.instruction.to.expect("to is not set"),
                  
          compose_message: self.instruction.compose_message.expect("compose_message is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ClearComposeCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                compose_message: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        from: Option<Pubkey>,
                guid: Option<[u8; 32]>,
                index: Option<u16>,
                message: Option<Vec<u8>>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

