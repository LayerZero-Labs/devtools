//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct InitDefaultReceiveLibrary {
      
              
          pub admin: solana_program::pubkey::Pubkey,
          
              
          pub endpoint: solana_program::pubkey::Pubkey,
          
              
          pub default_receive_library_config: solana_program::pubkey::Pubkey,
          
              
          pub message_lib_info: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl InitDefaultReceiveLibrary {
  pub fn instruction(&self, args: InitDefaultReceiveLibraryInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitDefaultReceiveLibraryInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.endpoint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.default_receive_library_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.message_lib_info,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitDefaultReceiveLibraryInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitDefaultReceiveLibraryInstructionData {
            discriminator: [u8; 8],
                  }

impl InitDefaultReceiveLibraryInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [32, 202, 76, 22, 42, 249, 227, 109],
                                              }
  }
}

impl Default for InitDefaultReceiveLibraryInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitDefaultReceiveLibraryInstructionArgs {
                  pub eid: u32,
                pub new_lib: Pubkey,
      }


/// Instruction builder for `InitDefaultReceiveLibrary`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` admin
          ///   1. `[]` endpoint
                ///   2. `[writable]` default_receive_library_config
          ///   3. `[]` message_lib_info
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   5. `[]` event_authority
          ///   6. `[]` program
#[derive(Clone, Debug, Default)]
pub struct InitDefaultReceiveLibraryBuilder {
            admin: Option<solana_program::pubkey::Pubkey>,
                endpoint: Option<solana_program::pubkey::Pubkey>,
                default_receive_library_config: Option<solana_program::pubkey::Pubkey>,
                message_lib_info: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        eid: Option<u32>,
                new_lib: Option<Pubkey>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitDefaultReceiveLibraryBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.admin = Some(admin);
                    self
    }
            #[inline(always)]
    pub fn endpoint(&mut self, endpoint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.endpoint = Some(endpoint);
                    self
    }
            #[inline(always)]
    pub fn default_receive_library_config(&mut self, default_receive_library_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.default_receive_library_config = Some(default_receive_library_config);
                    self
    }
            #[inline(always)]
    pub fn message_lib_info(&mut self, message_lib_info: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.message_lib_info = Some(message_lib_info);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn eid(&mut self, eid: u32) -> &mut Self {
        self.eid = Some(eid);
        self
      }
                #[inline(always)]
      pub fn new_lib(&mut self, new_lib: Pubkey) -> &mut Self {
        self.new_lib = Some(new_lib);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = InitDefaultReceiveLibrary {
                              admin: self.admin.expect("admin is not set"),
                                        endpoint: self.endpoint.expect("endpoint is not set"),
                                        default_receive_library_config: self.default_receive_library_config.expect("default_receive_library_config is not set"),
                                        message_lib_info: self.message_lib_info.expect("message_lib_info is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = InitDefaultReceiveLibraryInstructionArgs {
                                                              eid: self.eid.clone().expect("eid is not set"),
                                                                  new_lib: self.new_lib.clone().expect("new_lib is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `init_default_receive_library` CPI accounts.
  pub struct InitDefaultReceiveLibraryCpiAccounts<'a, 'b> {
          
                    
              pub admin: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub endpoint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub default_receive_library_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub message_lib_info: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `init_default_receive_library` CPI instruction.
pub struct InitDefaultReceiveLibraryCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub admin: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub endpoint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub default_receive_library_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub message_lib_info: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitDefaultReceiveLibraryInstructionArgs,
  }

impl<'a, 'b> InitDefaultReceiveLibraryCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: InitDefaultReceiveLibraryCpiAccounts<'a, 'b>,
              args: InitDefaultReceiveLibraryInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              admin: accounts.admin,
              endpoint: accounts.endpoint,
              default_receive_library_config: accounts.default_receive_library_config,
              message_lib_info: accounts.message_lib_info,
              system_program: accounts.system_program,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.endpoint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.default_receive_library_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.message_lib_info.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitDefaultReceiveLibraryInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.admin.clone());
                        account_infos.push(self.endpoint.clone());
                        account_infos.push(self.default_receive_library_config.clone());
                        account_infos.push(self.message_lib_info.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitDefaultReceiveLibrary` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` admin
          ///   1. `[]` endpoint
                ///   2. `[writable]` default_receive_library_config
          ///   3. `[]` message_lib_info
          ///   4. `[]` system_program
          ///   5. `[]` event_authority
          ///   6. `[]` program
#[derive(Clone, Debug)]
pub struct InitDefaultReceiveLibraryCpiBuilder<'a, 'b> {
  instruction: Box<InitDefaultReceiveLibraryCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitDefaultReceiveLibraryCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitDefaultReceiveLibraryCpiBuilderInstruction {
      __program: program,
              admin: None,
              endpoint: None,
              default_receive_library_config: None,
              message_lib_info: None,
              system_program: None,
              event_authority: None,
              program: None,
                                            eid: None,
                                new_lib: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.admin = Some(admin);
                    self
    }
      #[inline(always)]
    pub fn endpoint(&mut self, endpoint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.endpoint = Some(endpoint);
                    self
    }
      #[inline(always)]
    pub fn default_receive_library_config(&mut self, default_receive_library_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.default_receive_library_config = Some(default_receive_library_config);
                    self
    }
      #[inline(always)]
    pub fn message_lib_info(&mut self, message_lib_info: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.message_lib_info = Some(message_lib_info);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn eid(&mut self, eid: u32) -> &mut Self {
        self.instruction.eid = Some(eid);
        self
      }
                #[inline(always)]
      pub fn new_lib(&mut self, new_lib: Pubkey) -> &mut Self {
        self.instruction.new_lib = Some(new_lib);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = InitDefaultReceiveLibraryInstructionArgs {
                                                              eid: self.instruction.eid.clone().expect("eid is not set"),
                                                                  new_lib: self.instruction.new_lib.clone().expect("new_lib is not set"),
                                    };
        let instruction = InitDefaultReceiveLibraryCpi {
        __program: self.instruction.__program,
                  
          admin: self.instruction.admin.expect("admin is not set"),
                  
          endpoint: self.instruction.endpoint.expect("endpoint is not set"),
                  
          default_receive_library_config: self.instruction.default_receive_library_config.expect("default_receive_library_config is not set"),
                  
          message_lib_info: self.instruction.message_lib_info.expect("message_lib_info is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitDefaultReceiveLibraryCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                endpoint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                default_receive_library_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                message_lib_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        eid: Option<u32>,
                new_lib: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

