//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct LzReceiveAlert {
      
              
          pub executor: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl LzReceiveAlert {
  pub fn instruction(&self, args: LzReceiveAlertInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: LzReceiveAlertInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.executor,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&LzReceiveAlertInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct LzReceiveAlertInstructionData {
            discriminator: [u8; 8],
                                                                  }

impl LzReceiveAlertInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [131, 141, 48, 222, 15, 235, 141, 160],
                                                                                                                                                              }
  }
}

impl Default for LzReceiveAlertInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct LzReceiveAlertInstructionArgs {
                  pub receiver: Pubkey,
                pub src_eid: u32,
                pub sender: [u8; 32],
                pub nonce: u64,
                pub guid: [u8; 32],
                pub compute_units: u64,
                pub value: u64,
                pub message: Vec<u8>,
                pub extra_data: Vec<u8>,
                pub reason: Vec<u8>,
      }


/// Instruction builder for `LzReceiveAlert`.
///
/// ### Accounts:
///
                ///   0. `[signer]` executor
          ///   1. `[]` event_authority
          ///   2. `[]` program
#[derive(Clone, Debug, Default)]
pub struct LzReceiveAlertBuilder {
            executor: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        receiver: Option<Pubkey>,
                src_eid: Option<u32>,
                sender: Option<[u8; 32]>,
                nonce: Option<u64>,
                guid: Option<[u8; 32]>,
                compute_units: Option<u64>,
                value: Option<u64>,
                message: Option<Vec<u8>>,
                extra_data: Option<Vec<u8>>,
                reason: Option<Vec<u8>>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LzReceiveAlertBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn executor(&mut self, executor: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.executor = Some(executor);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn receiver(&mut self, receiver: Pubkey) -> &mut Self {
        self.receiver = Some(receiver);
        self
      }
                #[inline(always)]
      pub fn src_eid(&mut self, src_eid: u32) -> &mut Self {
        self.src_eid = Some(src_eid);
        self
      }
                #[inline(always)]
      pub fn sender(&mut self, sender: [u8; 32]) -> &mut Self {
        self.sender = Some(sender);
        self
      }
                #[inline(always)]
      pub fn nonce(&mut self, nonce: u64) -> &mut Self {
        self.nonce = Some(nonce);
        self
      }
                #[inline(always)]
      pub fn guid(&mut self, guid: [u8; 32]) -> &mut Self {
        self.guid = Some(guid);
        self
      }
                #[inline(always)]
      pub fn compute_units(&mut self, compute_units: u64) -> &mut Self {
        self.compute_units = Some(compute_units);
        self
      }
                #[inline(always)]
      pub fn value(&mut self, value: u64) -> &mut Self {
        self.value = Some(value);
        self
      }
                #[inline(always)]
      pub fn message(&mut self, message: Vec<u8>) -> &mut Self {
        self.message = Some(message);
        self
      }
                #[inline(always)]
      pub fn extra_data(&mut self, extra_data: Vec<u8>) -> &mut Self {
        self.extra_data = Some(extra_data);
        self
      }
                #[inline(always)]
      pub fn reason(&mut self, reason: Vec<u8>) -> &mut Self {
        self.reason = Some(reason);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = LzReceiveAlert {
                              executor: self.executor.expect("executor is not set"),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = LzReceiveAlertInstructionArgs {
                                                              receiver: self.receiver.clone().expect("receiver is not set"),
                                                                  src_eid: self.src_eid.clone().expect("src_eid is not set"),
                                                                  sender: self.sender.clone().expect("sender is not set"),
                                                                  nonce: self.nonce.clone().expect("nonce is not set"),
                                                                  guid: self.guid.clone().expect("guid is not set"),
                                                                  compute_units: self.compute_units.clone().expect("compute_units is not set"),
                                                                  value: self.value.clone().expect("value is not set"),
                                                                  message: self.message.clone().expect("message is not set"),
                                                                  extra_data: self.extra_data.clone().expect("extra_data is not set"),
                                                                  reason: self.reason.clone().expect("reason is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `lz_receive_alert` CPI accounts.
  pub struct LzReceiveAlertCpiAccounts<'a, 'b> {
          
                    
              pub executor: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `lz_receive_alert` CPI instruction.
pub struct LzReceiveAlertCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub executor: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: LzReceiveAlertInstructionArgs,
  }

impl<'a, 'b> LzReceiveAlertCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: LzReceiveAlertCpiAccounts<'a, 'b>,
              args: LzReceiveAlertInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              executor: accounts.executor,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.executor.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&LzReceiveAlertInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.executor.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `LzReceiveAlert` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` executor
          ///   1. `[]` event_authority
          ///   2. `[]` program
#[derive(Clone, Debug)]
pub struct LzReceiveAlertCpiBuilder<'a, 'b> {
  instruction: Box<LzReceiveAlertCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LzReceiveAlertCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(LzReceiveAlertCpiBuilderInstruction {
      __program: program,
              executor: None,
              event_authority: None,
              program: None,
                                            receiver: None,
                                src_eid: None,
                                sender: None,
                                nonce: None,
                                guid: None,
                                compute_units: None,
                                value: None,
                                message: None,
                                extra_data: None,
                                reason: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn executor(&mut self, executor: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.executor = Some(executor);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn receiver(&mut self, receiver: Pubkey) -> &mut Self {
        self.instruction.receiver = Some(receiver);
        self
      }
                #[inline(always)]
      pub fn src_eid(&mut self, src_eid: u32) -> &mut Self {
        self.instruction.src_eid = Some(src_eid);
        self
      }
                #[inline(always)]
      pub fn sender(&mut self, sender: [u8; 32]) -> &mut Self {
        self.instruction.sender = Some(sender);
        self
      }
                #[inline(always)]
      pub fn nonce(&mut self, nonce: u64) -> &mut Self {
        self.instruction.nonce = Some(nonce);
        self
      }
                #[inline(always)]
      pub fn guid(&mut self, guid: [u8; 32]) -> &mut Self {
        self.instruction.guid = Some(guid);
        self
      }
                #[inline(always)]
      pub fn compute_units(&mut self, compute_units: u64) -> &mut Self {
        self.instruction.compute_units = Some(compute_units);
        self
      }
                #[inline(always)]
      pub fn value(&mut self, value: u64) -> &mut Self {
        self.instruction.value = Some(value);
        self
      }
                #[inline(always)]
      pub fn message(&mut self, message: Vec<u8>) -> &mut Self {
        self.instruction.message = Some(message);
        self
      }
                #[inline(always)]
      pub fn extra_data(&mut self, extra_data: Vec<u8>) -> &mut Self {
        self.instruction.extra_data = Some(extra_data);
        self
      }
                #[inline(always)]
      pub fn reason(&mut self, reason: Vec<u8>) -> &mut Self {
        self.instruction.reason = Some(reason);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = LzReceiveAlertInstructionArgs {
                                                              receiver: self.instruction.receiver.clone().expect("receiver is not set"),
                                                                  src_eid: self.instruction.src_eid.clone().expect("src_eid is not set"),
                                                                  sender: self.instruction.sender.clone().expect("sender is not set"),
                                                                  nonce: self.instruction.nonce.clone().expect("nonce is not set"),
                                                                  guid: self.instruction.guid.clone().expect("guid is not set"),
                                                                  compute_units: self.instruction.compute_units.clone().expect("compute_units is not set"),
                                                                  value: self.instruction.value.clone().expect("value is not set"),
                                                                  message: self.instruction.message.clone().expect("message is not set"),
                                                                  extra_data: self.instruction.extra_data.clone().expect("extra_data is not set"),
                                                                  reason: self.instruction.reason.clone().expect("reason is not set"),
                                    };
        let instruction = LzReceiveAlertCpi {
        __program: self.instruction.__program,
                  
          executor: self.instruction.executor.expect("executor is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct LzReceiveAlertCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            executor: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        receiver: Option<Pubkey>,
                src_eid: Option<u32>,
                sender: Option<[u8; 32]>,
                nonce: Option<u64>,
                guid: Option<[u8; 32]>,
                compute_units: Option<u64>,
                value: Option<u64>,
                message: Option<Vec<u8>>,
                extra_data: Option<Vec<u8>>,
                reason: Option<Vec<u8>>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

