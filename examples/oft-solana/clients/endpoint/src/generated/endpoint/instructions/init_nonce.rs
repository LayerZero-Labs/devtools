//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct InitNonce {
            /// only the delegate can initialize the nonce accounts

    
              
          pub delegate: solana_program::pubkey::Pubkey,
          
              
          pub oapp_registry: solana_program::pubkey::Pubkey,
          
              
          pub nonce: solana_program::pubkey::Pubkey,
          
              
          pub pending_inbound_nonce: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl InitNonce {
  pub fn instruction(&self, args: InitNonceInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitNonceInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.delegate,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oapp_registry,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.nonce,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.pending_inbound_nonce,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitNonceInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitNonceInstructionData {
            discriminator: [u8; 8],
                        }

impl InitNonceInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [204, 171, 16, 214, 182, 191, 27, 196],
                                                            }
  }
}

impl Default for InitNonceInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitNonceInstructionArgs {
                  pub local_oapp: Pubkey,
                pub remote_eid: u32,
                pub remote_oapp: [u8; 32],
      }


/// Instruction builder for `InitNonce`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` delegate
          ///   1. `[]` oapp_registry
                ///   2. `[writable]` nonce
                ///   3. `[writable]` pending_inbound_nonce
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitNonceBuilder {
            delegate: Option<solana_program::pubkey::Pubkey>,
                oapp_registry: Option<solana_program::pubkey::Pubkey>,
                nonce: Option<solana_program::pubkey::Pubkey>,
                pending_inbound_nonce: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                        local_oapp: Option<Pubkey>,
                remote_eid: Option<u32>,
                remote_oapp: Option<[u8; 32]>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitNonceBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// only the delegate can initialize the nonce accounts
#[inline(always)]
    pub fn delegate(&mut self, delegate: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.delegate = Some(delegate);
                    self
    }
            #[inline(always)]
    pub fn oapp_registry(&mut self, oapp_registry: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.oapp_registry = Some(oapp_registry);
                    self
    }
            #[inline(always)]
    pub fn nonce(&mut self, nonce: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.nonce = Some(nonce);
                    self
    }
            #[inline(always)]
    pub fn pending_inbound_nonce(&mut self, pending_inbound_nonce: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pending_inbound_nonce = Some(pending_inbound_nonce);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn local_oapp(&mut self, local_oapp: Pubkey) -> &mut Self {
        self.local_oapp = Some(local_oapp);
        self
      }
                #[inline(always)]
      pub fn remote_eid(&mut self, remote_eid: u32) -> &mut Self {
        self.remote_eid = Some(remote_eid);
        self
      }
                #[inline(always)]
      pub fn remote_oapp(&mut self, remote_oapp: [u8; 32]) -> &mut Self {
        self.remote_oapp = Some(remote_oapp);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = InitNonce {
                              delegate: self.delegate.expect("delegate is not set"),
                                        oapp_registry: self.oapp_registry.expect("oapp_registry is not set"),
                                        nonce: self.nonce.expect("nonce is not set"),
                                        pending_inbound_nonce: self.pending_inbound_nonce.expect("pending_inbound_nonce is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
          let args = InitNonceInstructionArgs {
                                                              local_oapp: self.local_oapp.clone().expect("local_oapp is not set"),
                                                                  remote_eid: self.remote_eid.clone().expect("remote_eid is not set"),
                                                                  remote_oapp: self.remote_oapp.clone().expect("remote_oapp is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `init_nonce` CPI accounts.
  pub struct InitNonceCpiAccounts<'a, 'b> {
                  /// only the delegate can initialize the nonce accounts

      
                    
              pub delegate: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub oapp_registry: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub nonce: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub pending_inbound_nonce: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `init_nonce` CPI instruction.
pub struct InitNonceCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
            /// only the delegate can initialize the nonce accounts

    
              
          pub delegate: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub oapp_registry: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub nonce: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub pending_inbound_nonce: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitNonceInstructionArgs,
  }

impl<'a, 'b> InitNonceCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: InitNonceCpiAccounts<'a, 'b>,
              args: InitNonceInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              delegate: accounts.delegate,
              oapp_registry: accounts.oapp_registry,
              nonce: accounts.nonce,
              pending_inbound_nonce: accounts.pending_inbound_nonce,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.delegate.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oapp_registry.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.nonce.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pending_inbound_nonce.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitNonceInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.delegate.clone());
                        account_infos.push(self.oapp_registry.clone());
                        account_infos.push(self.nonce.clone());
                        account_infos.push(self.pending_inbound_nonce.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitNonce` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` delegate
          ///   1. `[]` oapp_registry
                ///   2. `[writable]` nonce
                ///   3. `[writable]` pending_inbound_nonce
          ///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitNonceCpiBuilder<'a, 'b> {
  instruction: Box<InitNonceCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitNonceCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitNonceCpiBuilderInstruction {
      __program: program,
              delegate: None,
              oapp_registry: None,
              nonce: None,
              pending_inbound_nonce: None,
              system_program: None,
                                            local_oapp: None,
                                remote_eid: None,
                                remote_oapp: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// only the delegate can initialize the nonce accounts
#[inline(always)]
    pub fn delegate(&mut self, delegate: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.delegate = Some(delegate);
                    self
    }
      #[inline(always)]
    pub fn oapp_registry(&mut self, oapp_registry: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.oapp_registry = Some(oapp_registry);
                    self
    }
      #[inline(always)]
    pub fn nonce(&mut self, nonce: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.nonce = Some(nonce);
                    self
    }
      #[inline(always)]
    pub fn pending_inbound_nonce(&mut self, pending_inbound_nonce: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pending_inbound_nonce = Some(pending_inbound_nonce);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn local_oapp(&mut self, local_oapp: Pubkey) -> &mut Self {
        self.instruction.local_oapp = Some(local_oapp);
        self
      }
                #[inline(always)]
      pub fn remote_eid(&mut self, remote_eid: u32) -> &mut Self {
        self.instruction.remote_eid = Some(remote_eid);
        self
      }
                #[inline(always)]
      pub fn remote_oapp(&mut self, remote_oapp: [u8; 32]) -> &mut Self {
        self.instruction.remote_oapp = Some(remote_oapp);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = InitNonceInstructionArgs {
                                                              local_oapp: self.instruction.local_oapp.clone().expect("local_oapp is not set"),
                                                                  remote_eid: self.instruction.remote_eid.clone().expect("remote_eid is not set"),
                                                                  remote_oapp: self.instruction.remote_oapp.clone().expect("remote_oapp is not set"),
                                    };
        let instruction = InitNonceCpi {
        __program: self.instruction.__program,
                  
          delegate: self.instruction.delegate.expect("delegate is not set"),
                  
          oapp_registry: self.instruction.oapp_registry.expect("oapp_registry is not set"),
                  
          nonce: self.instruction.nonce.expect("nonce is not set"),
                  
          pending_inbound_nonce: self.instruction.pending_inbound_nonce.expect("pending_inbound_nonce is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitNonceCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            delegate: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                oapp_registry: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                nonce: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pending_inbound_nonce: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        local_oapp: Option<Pubkey>,
                remote_eid: Option<u32>,
                remote_oapp: Option<[u8; 32]>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

