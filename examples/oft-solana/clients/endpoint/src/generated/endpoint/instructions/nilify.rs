//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct Nilify {
            /// The PDA of the OApp or delegate

    
              
          pub signer: solana_program::pubkey::Pubkey,
          
              
          pub oapp_registry: solana_program::pubkey::Pubkey,
          
              
          pub nonce: solana_program::pubkey::Pubkey,
          
              
          pub pending_inbound_nonce: solana_program::pubkey::Pubkey,
          
              
          pub payload_hash: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl Nilify {
  pub fn instruction(&self, args: NilifyInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: NilifyInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.signer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oapp_registry,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.nonce,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.pending_inbound_nonce,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.payload_hash,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&NilifyInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct NilifyInstructionData {
            discriminator: [u8; 8],
                                    }

impl NilifyInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [143, 136, 129, 199, 36, 35, 160, 85],
                                                                                        }
  }
}

impl Default for NilifyInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct NilifyInstructionArgs {
                  pub receiver: Pubkey,
                pub src_eid: u32,
                pub sender: [u8; 32],
                pub nonce_arg: u64,
                pub payload_hash_arg: [u8; 32],
      }


/// Instruction builder for `Nilify`.
///
/// ### Accounts:
///
                ///   0. `[signer]` signer
          ///   1. `[]` oapp_registry
                ///   2. `[writable]` nonce
                ///   3. `[writable]` pending_inbound_nonce
                ///   4. `[writable]` payload_hash
          ///   5. `[]` event_authority
          ///   6. `[]` program
#[derive(Clone, Debug, Default)]
pub struct NilifyBuilder {
            signer: Option<solana_program::pubkey::Pubkey>,
                oapp_registry: Option<solana_program::pubkey::Pubkey>,
                nonce: Option<solana_program::pubkey::Pubkey>,
                pending_inbound_nonce: Option<solana_program::pubkey::Pubkey>,
                payload_hash: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        receiver: Option<Pubkey>,
                src_eid: Option<u32>,
                sender: Option<[u8; 32]>,
                nonce_arg: Option<u64>,
                payload_hash_arg: Option<[u8; 32]>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl NilifyBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// The PDA of the OApp or delegate
#[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn oapp_registry(&mut self, oapp_registry: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.oapp_registry = Some(oapp_registry);
                    self
    }
            #[inline(always)]
    pub fn nonce(&mut self, nonce: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.nonce = Some(nonce);
                    self
    }
            #[inline(always)]
    pub fn pending_inbound_nonce(&mut self, pending_inbound_nonce: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pending_inbound_nonce = Some(pending_inbound_nonce);
                    self
    }
            #[inline(always)]
    pub fn payload_hash(&mut self, payload_hash: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payload_hash = Some(payload_hash);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn receiver(&mut self, receiver: Pubkey) -> &mut Self {
        self.receiver = Some(receiver);
        self
      }
                #[inline(always)]
      pub fn src_eid(&mut self, src_eid: u32) -> &mut Self {
        self.src_eid = Some(src_eid);
        self
      }
                #[inline(always)]
      pub fn sender(&mut self, sender: [u8; 32]) -> &mut Self {
        self.sender = Some(sender);
        self
      }
                #[inline(always)]
      pub fn nonce_arg(&mut self, nonce_arg: u64) -> &mut Self {
        self.nonce_arg = Some(nonce_arg);
        self
      }
                #[inline(always)]
      pub fn payload_hash_arg(&mut self, payload_hash_arg: [u8; 32]) -> &mut Self {
        self.payload_hash_arg = Some(payload_hash_arg);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Nilify {
                              signer: self.signer.expect("signer is not set"),
                                        oapp_registry: self.oapp_registry.expect("oapp_registry is not set"),
                                        nonce: self.nonce.expect("nonce is not set"),
                                        pending_inbound_nonce: self.pending_inbound_nonce.expect("pending_inbound_nonce is not set"),
                                        payload_hash: self.payload_hash.expect("payload_hash is not set"),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = NilifyInstructionArgs {
                                                              receiver: self.receiver.clone().expect("receiver is not set"),
                                                                  src_eid: self.src_eid.clone().expect("src_eid is not set"),
                                                                  sender: self.sender.clone().expect("sender is not set"),
                                                                  nonce_arg: self.nonce_arg.clone().expect("nonce_arg is not set"),
                                                                  payload_hash_arg: self.payload_hash_arg.clone().expect("payload_hash_arg is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `nilify` CPI accounts.
  pub struct NilifyCpiAccounts<'a, 'b> {
                  /// The PDA of the OApp or delegate

      
                    
              pub signer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub oapp_registry: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub nonce: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub pending_inbound_nonce: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub payload_hash: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `nilify` CPI instruction.
pub struct NilifyCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The PDA of the OApp or delegate

    
              
          pub signer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub oapp_registry: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub nonce: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub pending_inbound_nonce: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub payload_hash: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: NilifyInstructionArgs,
  }

impl<'a, 'b> NilifyCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: NilifyCpiAccounts<'a, 'b>,
              args: NilifyInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              oapp_registry: accounts.oapp_registry,
              nonce: accounts.nonce,
              pending_inbound_nonce: accounts.pending_inbound_nonce,
              payload_hash: accounts.payload_hash,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oapp_registry.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.nonce.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pending_inbound_nonce.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payload_hash.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&NilifyInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ENDPOINT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.oapp_registry.clone());
                        account_infos.push(self.nonce.clone());
                        account_infos.push(self.pending_inbound_nonce.clone());
                        account_infos.push(self.payload_hash.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Nilify` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` signer
          ///   1. `[]` oapp_registry
                ///   2. `[writable]` nonce
                ///   3. `[writable]` pending_inbound_nonce
                ///   4. `[writable]` payload_hash
          ///   5. `[]` event_authority
          ///   6. `[]` program
#[derive(Clone, Debug)]
pub struct NilifyCpiBuilder<'a, 'b> {
  instruction: Box<NilifyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> NilifyCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(NilifyCpiBuilderInstruction {
      __program: program,
              signer: None,
              oapp_registry: None,
              nonce: None,
              pending_inbound_nonce: None,
              payload_hash: None,
              event_authority: None,
              program: None,
                                            receiver: None,
                                src_eid: None,
                                sender: None,
                                nonce_arg: None,
                                payload_hash_arg: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// The PDA of the OApp or delegate
#[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn oapp_registry(&mut self, oapp_registry: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.oapp_registry = Some(oapp_registry);
                    self
    }
      #[inline(always)]
    pub fn nonce(&mut self, nonce: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.nonce = Some(nonce);
                    self
    }
      #[inline(always)]
    pub fn pending_inbound_nonce(&mut self, pending_inbound_nonce: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pending_inbound_nonce = Some(pending_inbound_nonce);
                    self
    }
      #[inline(always)]
    pub fn payload_hash(&mut self, payload_hash: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payload_hash = Some(payload_hash);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn receiver(&mut self, receiver: Pubkey) -> &mut Self {
        self.instruction.receiver = Some(receiver);
        self
      }
                #[inline(always)]
      pub fn src_eid(&mut self, src_eid: u32) -> &mut Self {
        self.instruction.src_eid = Some(src_eid);
        self
      }
                #[inline(always)]
      pub fn sender(&mut self, sender: [u8; 32]) -> &mut Self {
        self.instruction.sender = Some(sender);
        self
      }
                #[inline(always)]
      pub fn nonce_arg(&mut self, nonce_arg: u64) -> &mut Self {
        self.instruction.nonce_arg = Some(nonce_arg);
        self
      }
                #[inline(always)]
      pub fn payload_hash_arg(&mut self, payload_hash_arg: [u8; 32]) -> &mut Self {
        self.instruction.payload_hash_arg = Some(payload_hash_arg);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = NilifyInstructionArgs {
                                                              receiver: self.instruction.receiver.clone().expect("receiver is not set"),
                                                                  src_eid: self.instruction.src_eid.clone().expect("src_eid is not set"),
                                                                  sender: self.instruction.sender.clone().expect("sender is not set"),
                                                                  nonce_arg: self.instruction.nonce_arg.clone().expect("nonce_arg is not set"),
                                                                  payload_hash_arg: self.instruction.payload_hash_arg.clone().expect("payload_hash_arg is not set"),
                                    };
        let instruction = NilifyCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          oapp_registry: self.instruction.oapp_registry.expect("oapp_registry is not set"),
                  
          nonce: self.instruction.nonce.expect("nonce is not set"),
                  
          pending_inbound_nonce: self.instruction.pending_inbound_nonce.expect("pending_inbound_nonce is not set"),
                  
          payload_hash: self.instruction.payload_hash.expect("payload_hash is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct NilifyCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                oapp_registry: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                nonce: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pending_inbound_nonce: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                payload_hash: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        receiver: Option<Pubkey>,
                src_eid: Option<u32>,
                sender: Option<[u8; 32]>,
                nonce_arg: Option<u64>,
                payload_hash_arg: Option<[u8; 32]>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

