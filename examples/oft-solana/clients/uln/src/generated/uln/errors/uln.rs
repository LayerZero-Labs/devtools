//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum UlnError {
    /// 6000 - 
    #[error("")]
    Unauthorized = 0x1770,
    /// 6001 - 
    #[error("")]
    InvalidAmount = 0x1771,
    /// 6002 - 
    #[error("")]
    InvalidExecutor = 0x1772,
    /// 6003 - 
    #[error("")]
    ZeroMessageSize = 0x1773,
    /// 6004 - 
    #[error("")]
    InvalidRequiredDVNCount = 0x1774,
    /// 6005 - 
    #[error("")]
    InvalidOptionalDVNCount = 0x1775,
    /// 6006 - 
    #[error("")]
    InvalidOptionalDVNThreshold = 0x1776,
    /// 6007 - 
    #[error("")]
    InvalidConfirmations = 0x1777,
    /// 6008 - 
    #[error("")]
    AtLeastOneDVN = 0x1778,
    /// 6009 - 
    #[error("")]
    Unsorted = 0x1779,
    /// 6010 - 
    #[error("")]
    InvalidTreasuryFeeCap = 0x177A,
    /// 6011 - 
    #[error("")]
    InvalidPacketVersion = 0x177B,
    /// 6012 - 
    #[error("")]
    InvalidEid = 0x177C,
    /// 6013 - 
    #[error("")]
    Verifying = 0x177D,
    /// 6014 - 
    #[error("")]
    InvalidWorkerId = 0x177E,
    /// 6015 - 
    #[error("")]
    InvalidOptionType = 0x177F,
    /// 6016 - 
    #[error("")]
    InvalidBps = 0x1780,
    /// 6017 - 
    #[error("")]
    ExceededMaxMessageSize = 0x1781,
    /// 6018 - 
    #[error("")]
    InvalidExecutorProgram = 0x1782,
    /// 6019 - 
    #[error("")]
    InvalidAccountLength = 0x1783,
    /// 6020 - 
    #[error("")]
    InvalidDvnProgram = 0x1784,
    /// 6021 - 
    #[error("")]
    InvalidDvn = 0x1785,
    /// 6022 - 
    #[error("")]
    LzTokenUnavailable = 0x1786,
    /// 6023 - 
    #[error("")]
    InsufficientFee = 0x1787,
    /// 6024 - 
    #[error("")]
    InvalidTreasury = 0x1788,
    /// 6025 - 
    #[error("")]
    InvalidLzTokenMint = 0x1789,
    /// 6026 - 
    #[error("")]
    InvalidConfigType = 0x178A,
    /// 6027 - 
    #[error("")]
    InvalidConfirmation = 0x178B,
    /// 6028 - 
    #[error("")]
    InvalidType1Size = 0x178C,
    /// 6029 - 
    #[error("")]
    InvalidType2Size = 0x178D,
    /// 6030 - 
    #[error("")]
    ExceededU128 = 0x178E,
    /// 6031 - 
    #[error("")]
    NonSigner = 0x178F,
    /// 6032 - 
    #[error("")]
    InvalidPayer = 0x1790,
}

impl solana_program::program_error::PrintProgramError for UlnError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for UlnError {
    fn type_of() -> &'static str {
        "UlnError"
    }
}

