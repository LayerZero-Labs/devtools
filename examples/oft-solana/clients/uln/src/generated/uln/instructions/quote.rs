//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::Packet;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct Quote {
      
              
          pub endpoint: solana_program::pubkey::Pubkey,
          
              
          pub uln: solana_program::pubkey::Pubkey,
                /// The custom send config account may be uninitialized, so deserialize it only if it's initialized

    
              
          pub send_config: solana_program::pubkey::Pubkey,
          
              
          pub default_send_config: solana_program::pubkey::Pubkey,
      }

impl Quote {
  pub fn instruction(&self, args: QuoteInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: QuoteInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.endpoint,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.uln,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.send_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.default_send_config,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&QuoteInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ULN_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct QuoteInstructionData {
            discriminator: [u8; 8],
                        }

impl QuoteInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [149, 42, 109, 247, 134, 146, 213, 123],
                                                            }
  }
}

impl Default for QuoteInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct QuoteInstructionArgs {
                  pub packet: Packet,
                pub options: Vec<u8>,
                pub pay_in_lz_token: bool,
      }


/// Instruction builder for `Quote`.
///
/// ### Accounts:
///
                ///   0. `[signer]` endpoint
          ///   1. `[]` uln
          ///   2. `[]` send_config
          ///   3. `[]` default_send_config
#[derive(Clone, Debug, Default)]
pub struct QuoteBuilder {
            endpoint: Option<solana_program::pubkey::Pubkey>,
                uln: Option<solana_program::pubkey::Pubkey>,
                send_config: Option<solana_program::pubkey::Pubkey>,
                default_send_config: Option<solana_program::pubkey::Pubkey>,
                        packet: Option<Packet>,
                options: Option<Vec<u8>>,
                pay_in_lz_token: Option<bool>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl QuoteBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn endpoint(&mut self, endpoint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.endpoint = Some(endpoint);
                    self
    }
            #[inline(always)]
    pub fn uln(&mut self, uln: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.uln = Some(uln);
                    self
    }
            /// The custom send config account may be uninitialized, so deserialize it only if it's initialized
#[inline(always)]
    pub fn send_config(&mut self, send_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.send_config = Some(send_config);
                    self
    }
            #[inline(always)]
    pub fn default_send_config(&mut self, default_send_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.default_send_config = Some(default_send_config);
                    self
    }
                    #[inline(always)]
      pub fn packet(&mut self, packet: Packet) -> &mut Self {
        self.packet = Some(packet);
        self
      }
                #[inline(always)]
      pub fn options(&mut self, options: Vec<u8>) -> &mut Self {
        self.options = Some(options);
        self
      }
                #[inline(always)]
      pub fn pay_in_lz_token(&mut self, pay_in_lz_token: bool) -> &mut Self {
        self.pay_in_lz_token = Some(pay_in_lz_token);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Quote {
                              endpoint: self.endpoint.expect("endpoint is not set"),
                                        uln: self.uln.expect("uln is not set"),
                                        send_config: self.send_config.expect("send_config is not set"),
                                        default_send_config: self.default_send_config.expect("default_send_config is not set"),
                      };
          let args = QuoteInstructionArgs {
                                                              packet: self.packet.clone().expect("packet is not set"),
                                                                  options: self.options.clone().expect("options is not set"),
                                                                  pay_in_lz_token: self.pay_in_lz_token.clone().expect("pay_in_lz_token is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `quote` CPI accounts.
  pub struct QuoteCpiAccounts<'a, 'b> {
          
                    
              pub endpoint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub uln: &'b solana_program::account_info::AccountInfo<'a>,
                        /// The custom send config account may be uninitialized, so deserialize it only if it's initialized

      
                    
              pub send_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub default_send_config: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `quote` CPI instruction.
pub struct QuoteCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub endpoint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub uln: &'b solana_program::account_info::AccountInfo<'a>,
                /// The custom send config account may be uninitialized, so deserialize it only if it's initialized

    
              
          pub send_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub default_send_config: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: QuoteInstructionArgs,
  }

impl<'a, 'b> QuoteCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: QuoteCpiAccounts<'a, 'b>,
              args: QuoteInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              endpoint: accounts.endpoint,
              uln: accounts.uln,
              send_config: accounts.send_config,
              default_send_config: accounts.default_send_config,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.endpoint.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.uln.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.send_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.default_send_config.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&QuoteInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ULN_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.endpoint.clone());
                        account_infos.push(self.uln.clone());
                        account_infos.push(self.send_config.clone());
                        account_infos.push(self.default_send_config.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Quote` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` endpoint
          ///   1. `[]` uln
          ///   2. `[]` send_config
          ///   3. `[]` default_send_config
#[derive(Clone, Debug)]
pub struct QuoteCpiBuilder<'a, 'b> {
  instruction: Box<QuoteCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> QuoteCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(QuoteCpiBuilderInstruction {
      __program: program,
              endpoint: None,
              uln: None,
              send_config: None,
              default_send_config: None,
                                            packet: None,
                                options: None,
                                pay_in_lz_token: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn endpoint(&mut self, endpoint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.endpoint = Some(endpoint);
                    self
    }
      #[inline(always)]
    pub fn uln(&mut self, uln: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.uln = Some(uln);
                    self
    }
      /// The custom send config account may be uninitialized, so deserialize it only if it's initialized
#[inline(always)]
    pub fn send_config(&mut self, send_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.send_config = Some(send_config);
                    self
    }
      #[inline(always)]
    pub fn default_send_config(&mut self, default_send_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.default_send_config = Some(default_send_config);
                    self
    }
                    #[inline(always)]
      pub fn packet(&mut self, packet: Packet) -> &mut Self {
        self.instruction.packet = Some(packet);
        self
      }
                #[inline(always)]
      pub fn options(&mut self, options: Vec<u8>) -> &mut Self {
        self.instruction.options = Some(options);
        self
      }
                #[inline(always)]
      pub fn pay_in_lz_token(&mut self, pay_in_lz_token: bool) -> &mut Self {
        self.instruction.pay_in_lz_token = Some(pay_in_lz_token);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = QuoteInstructionArgs {
                                                              packet: self.instruction.packet.clone().expect("packet is not set"),
                                                                  options: self.instruction.options.clone().expect("options is not set"),
                                                                  pay_in_lz_token: self.instruction.pay_in_lz_token.clone().expect("pay_in_lz_token is not set"),
                                    };
        let instruction = QuoteCpi {
        __program: self.instruction.__program,
                  
          endpoint: self.instruction.endpoint.expect("endpoint is not set"),
                  
          uln: self.instruction.uln.expect("uln is not set"),
                  
          send_config: self.instruction.send_config.expect("send_config is not set"),
                  
          default_send_config: self.instruction.default_send_config.expect("default_send_config is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct QuoteCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            endpoint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                uln: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                send_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                default_send_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        packet: Option<Packet>,
                options: Option<Vec<u8>>,
                pay_in_lz_token: Option<bool>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

