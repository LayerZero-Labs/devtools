//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct CloseVerify {
      
              
          pub dvn: solana_program::pubkey::Pubkey,
          
              
          pub receiver: solana_program::pubkey::Pubkey,
          
              
          pub confirmations: solana_program::pubkey::Pubkey,
      }

impl CloseVerify {
  pub fn instruction(&self, args: CloseVerifyInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: CloseVerifyInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.dvn,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.receiver,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.confirmations,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&CloseVerifyInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ULN_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CloseVerifyInstructionData {
            discriminator: [u8; 8],
                  }

impl CloseVerifyInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [44, 133, 228, 138, 169, 242, 53, 36],
                                              }
  }
}

impl Default for CloseVerifyInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CloseVerifyInstructionArgs {
                  pub packet_header_hash: [u8; 32],
                pub payload_hash: [u8; 32],
      }


/// Instruction builder for `CloseVerify`.
///
/// ### Accounts:
///
                ///   0. `[signer]` dvn
                ///   1. `[writable]` receiver
                ///   2. `[writable]` confirmations
#[derive(Clone, Debug, Default)]
pub struct CloseVerifyBuilder {
            dvn: Option<solana_program::pubkey::Pubkey>,
                receiver: Option<solana_program::pubkey::Pubkey>,
                confirmations: Option<solana_program::pubkey::Pubkey>,
                        packet_header_hash: Option<[u8; 32]>,
                payload_hash: Option<[u8; 32]>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CloseVerifyBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn dvn(&mut self, dvn: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.dvn = Some(dvn);
                    self
    }
            #[inline(always)]
    pub fn receiver(&mut self, receiver: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.receiver = Some(receiver);
                    self
    }
            #[inline(always)]
    pub fn confirmations(&mut self, confirmations: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.confirmations = Some(confirmations);
                    self
    }
                    #[inline(always)]
      pub fn packet_header_hash(&mut self, packet_header_hash: [u8; 32]) -> &mut Self {
        self.packet_header_hash = Some(packet_header_hash);
        self
      }
                #[inline(always)]
      pub fn payload_hash(&mut self, payload_hash: [u8; 32]) -> &mut Self {
        self.payload_hash = Some(payload_hash);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = CloseVerify {
                              dvn: self.dvn.expect("dvn is not set"),
                                        receiver: self.receiver.expect("receiver is not set"),
                                        confirmations: self.confirmations.expect("confirmations is not set"),
                      };
          let args = CloseVerifyInstructionArgs {
                                                              packet_header_hash: self.packet_header_hash.clone().expect("packet_header_hash is not set"),
                                                                  payload_hash: self.payload_hash.clone().expect("payload_hash is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `close_verify` CPI accounts.
  pub struct CloseVerifyCpiAccounts<'a, 'b> {
          
                    
              pub dvn: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub receiver: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub confirmations: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `close_verify` CPI instruction.
pub struct CloseVerifyCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub dvn: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub receiver: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub confirmations: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: CloseVerifyInstructionArgs,
  }

impl<'a, 'b> CloseVerifyCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: CloseVerifyCpiAccounts<'a, 'b>,
              args: CloseVerifyInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              dvn: accounts.dvn,
              receiver: accounts.receiver,
              confirmations: accounts.confirmations,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.dvn.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.receiver.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.confirmations.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&CloseVerifyInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ULN_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.dvn.clone());
                        account_infos.push(self.receiver.clone());
                        account_infos.push(self.confirmations.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CloseVerify` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` dvn
                ///   1. `[writable]` receiver
                ///   2. `[writable]` confirmations
#[derive(Clone, Debug)]
pub struct CloseVerifyCpiBuilder<'a, 'b> {
  instruction: Box<CloseVerifyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloseVerifyCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CloseVerifyCpiBuilderInstruction {
      __program: program,
              dvn: None,
              receiver: None,
              confirmations: None,
                                            packet_header_hash: None,
                                payload_hash: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn dvn(&mut self, dvn: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.dvn = Some(dvn);
                    self
    }
      #[inline(always)]
    pub fn receiver(&mut self, receiver: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.receiver = Some(receiver);
                    self
    }
      #[inline(always)]
    pub fn confirmations(&mut self, confirmations: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.confirmations = Some(confirmations);
                    self
    }
                    #[inline(always)]
      pub fn packet_header_hash(&mut self, packet_header_hash: [u8; 32]) -> &mut Self {
        self.instruction.packet_header_hash = Some(packet_header_hash);
        self
      }
                #[inline(always)]
      pub fn payload_hash(&mut self, payload_hash: [u8; 32]) -> &mut Self {
        self.instruction.payload_hash = Some(payload_hash);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = CloseVerifyInstructionArgs {
                                                              packet_header_hash: self.instruction.packet_header_hash.clone().expect("packet_header_hash is not set"),
                                                                  payload_hash: self.instruction.payload_hash.clone().expect("payload_hash is not set"),
                                    };
        let instruction = CloseVerifyCpi {
        __program: self.instruction.__program,
                  
          dvn: self.instruction.dvn.expect("dvn is not set"),
                  
          receiver: self.instruction.receiver.expect("receiver is not set"),
                  
          confirmations: self.instruction.confirmations.expect("confirmations is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CloseVerifyCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            dvn: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                receiver: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                confirmations: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        packet_header_hash: Option<[u8; 32]>,
                payload_hash: Option<[u8; 32]>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

