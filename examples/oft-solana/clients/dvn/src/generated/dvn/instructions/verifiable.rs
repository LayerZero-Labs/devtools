//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct Verifiable {
      
              
          pub nonce: solana_program::pubkey::Pubkey,
          
              
          pub payload_hash: solana_program::pubkey::Pubkey,
          
              
          pub receive_config: solana_program::pubkey::Pubkey,
          
              
          pub default_receive_config: solana_program::pubkey::Pubkey,
      }

impl Verifiable {
  pub fn instruction(&self, args: VerifiableInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: VerifiableInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.nonce,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payload_hash,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.receive_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.default_receive_config,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&VerifiableInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::DVN_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct VerifiableInstructionData {
            discriminator: [u8; 8],
                  }

impl VerifiableInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [249, 50, 227, 157, 238, 249, 211, 90],
                                              }
  }
}

impl Default for VerifiableInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct VerifiableInstructionArgs {
                  pub packet_header: [u8; 81],
                pub payload_hash_arg: [u8; 32],
      }


/// Instruction builder for `Verifiable`.
///
/// ### Accounts:
///
          ///   0. `[]` nonce
          ///   1. `[]` payload_hash
          ///   2. `[]` receive_config
          ///   3. `[]` default_receive_config
#[derive(Clone, Debug, Default)]
pub struct VerifiableBuilder {
            nonce: Option<solana_program::pubkey::Pubkey>,
                payload_hash: Option<solana_program::pubkey::Pubkey>,
                receive_config: Option<solana_program::pubkey::Pubkey>,
                default_receive_config: Option<solana_program::pubkey::Pubkey>,
                        packet_header: Option<[u8; 81]>,
                payload_hash_arg: Option<[u8; 32]>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl VerifiableBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn nonce(&mut self, nonce: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.nonce = Some(nonce);
                    self
    }
            #[inline(always)]
    pub fn payload_hash(&mut self, payload_hash: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payload_hash = Some(payload_hash);
                    self
    }
            #[inline(always)]
    pub fn receive_config(&mut self, receive_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.receive_config = Some(receive_config);
                    self
    }
            #[inline(always)]
    pub fn default_receive_config(&mut self, default_receive_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.default_receive_config = Some(default_receive_config);
                    self
    }
                    #[inline(always)]
      pub fn packet_header(&mut self, packet_header: [u8; 81]) -> &mut Self {
        self.packet_header = Some(packet_header);
        self
      }
                #[inline(always)]
      pub fn payload_hash_arg(&mut self, payload_hash_arg: [u8; 32]) -> &mut Self {
        self.payload_hash_arg = Some(payload_hash_arg);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Verifiable {
                              nonce: self.nonce.expect("nonce is not set"),
                                        payload_hash: self.payload_hash.expect("payload_hash is not set"),
                                        receive_config: self.receive_config.expect("receive_config is not set"),
                                        default_receive_config: self.default_receive_config.expect("default_receive_config is not set"),
                      };
          let args = VerifiableInstructionArgs {
                                                              packet_header: self.packet_header.clone().expect("packet_header is not set"),
                                                                  payload_hash_arg: self.payload_hash_arg.clone().expect("payload_hash_arg is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `verifiable` CPI accounts.
  pub struct VerifiableCpiAccounts<'a, 'b> {
          
                    
              pub nonce: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub payload_hash: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub receive_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub default_receive_config: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `verifiable` CPI instruction.
pub struct VerifiableCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub nonce: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub payload_hash: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub receive_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub default_receive_config: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: VerifiableInstructionArgs,
  }

impl<'a, 'b> VerifiableCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: VerifiableCpiAccounts<'a, 'b>,
              args: VerifiableInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              nonce: accounts.nonce,
              payload_hash: accounts.payload_hash,
              receive_config: accounts.receive_config,
              default_receive_config: accounts.default_receive_config,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.nonce.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payload_hash.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.receive_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.default_receive_config.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&VerifiableInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::DVN_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.nonce.clone());
                        account_infos.push(self.payload_hash.clone());
                        account_infos.push(self.receive_config.clone());
                        account_infos.push(self.default_receive_config.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Verifiable` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` nonce
          ///   1. `[]` payload_hash
          ///   2. `[]` receive_config
          ///   3. `[]` default_receive_config
#[derive(Clone, Debug)]
pub struct VerifiableCpiBuilder<'a, 'b> {
  instruction: Box<VerifiableCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> VerifiableCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(VerifiableCpiBuilderInstruction {
      __program: program,
              nonce: None,
              payload_hash: None,
              receive_config: None,
              default_receive_config: None,
                                            packet_header: None,
                                payload_hash_arg: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn nonce(&mut self, nonce: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.nonce = Some(nonce);
                    self
    }
      #[inline(always)]
    pub fn payload_hash(&mut self, payload_hash: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payload_hash = Some(payload_hash);
                    self
    }
      #[inline(always)]
    pub fn receive_config(&mut self, receive_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.receive_config = Some(receive_config);
                    self
    }
      #[inline(always)]
    pub fn default_receive_config(&mut self, default_receive_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.default_receive_config = Some(default_receive_config);
                    self
    }
                    #[inline(always)]
      pub fn packet_header(&mut self, packet_header: [u8; 81]) -> &mut Self {
        self.instruction.packet_header = Some(packet_header);
        self
      }
                #[inline(always)]
      pub fn payload_hash_arg(&mut self, payload_hash_arg: [u8; 32]) -> &mut Self {
        self.instruction.payload_hash_arg = Some(payload_hash_arg);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = VerifiableInstructionArgs {
                                                              packet_header: self.instruction.packet_header.clone().expect("packet_header is not set"),
                                                                  payload_hash_arg: self.instruction.payload_hash_arg.clone().expect("payload_hash_arg is not set"),
                                    };
        let instruction = VerifiableCpi {
        __program: self.instruction.__program,
                  
          nonce: self.instruction.nonce.expect("nonce is not set"),
                  
          payload_hash: self.instruction.payload_hash.expect("payload_hash is not set"),
                  
          receive_config: self.instruction.receive_config.expect("receive_config is not set"),
                  
          default_receive_config: self.instruction.default_receive_config.expect("default_receive_config is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct VerifiableCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            nonce: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                payload_hash: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                receive_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                default_receive_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        packet_header: Option<[u8; 81]>,
                payload_hash_arg: Option<[u8; 32]>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

