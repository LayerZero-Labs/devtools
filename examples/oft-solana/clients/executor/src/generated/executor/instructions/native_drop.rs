//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use crate::generated::types::NativeDropRequest;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct NativeDrop {
      
              
          pub executor: solana_program::pubkey::Pubkey,
          
              
          pub config: solana_program::pubkey::Pubkey,
                /// For native drop transfer

    
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl NativeDrop {
  pub fn instruction(&self, args: NativeDropInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: NativeDropInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.executor,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&NativeDropInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::EXECUTOR_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct NativeDropInstructionData {
            discriminator: [u8; 8],
                                          }

impl NativeDropInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [105, 30, 218, 121, 155, 234, 85, 12],
                                                                                                      }
  }
}

impl Default for NativeDropInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct NativeDropInstructionArgs {
                  pub src_eid: u32,
                pub sender: [u8; 32],
                pub nonce: u64,
                pub dst_eid: u32,
                pub oapp: Pubkey,
                pub native_drop_requests: Vec<NativeDropRequest>,
      }


/// Instruction builder for `NativeDrop`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` executor
                ///   1. `[writable]` config
                ///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   3. `[]` event_authority
          ///   4. `[]` program
#[derive(Clone, Debug, Default)]
pub struct NativeDropBuilder {
            executor: Option<solana_program::pubkey::Pubkey>,
                config: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        src_eid: Option<u32>,
                sender: Option<[u8; 32]>,
                nonce: Option<u64>,
                dst_eid: Option<u32>,
                oapp: Option<Pubkey>,
                native_drop_requests: Option<Vec<NativeDropRequest>>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl NativeDropBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn executor(&mut self, executor: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.executor = Some(executor);
                    self
    }
            #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.config = Some(config);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
/// For native drop transfer
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn src_eid(&mut self, src_eid: u32) -> &mut Self {
        self.src_eid = Some(src_eid);
        self
      }
                #[inline(always)]
      pub fn sender(&mut self, sender: [u8; 32]) -> &mut Self {
        self.sender = Some(sender);
        self
      }
                #[inline(always)]
      pub fn nonce(&mut self, nonce: u64) -> &mut Self {
        self.nonce = Some(nonce);
        self
      }
                #[inline(always)]
      pub fn dst_eid(&mut self, dst_eid: u32) -> &mut Self {
        self.dst_eid = Some(dst_eid);
        self
      }
                #[inline(always)]
      pub fn oapp(&mut self, oapp: Pubkey) -> &mut Self {
        self.oapp = Some(oapp);
        self
      }
                #[inline(always)]
      pub fn native_drop_requests(&mut self, native_drop_requests: Vec<NativeDropRequest>) -> &mut Self {
        self.native_drop_requests = Some(native_drop_requests);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = NativeDrop {
                              executor: self.executor.expect("executor is not set"),
                                        config: self.config.expect("config is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = NativeDropInstructionArgs {
                                                              src_eid: self.src_eid.clone().expect("src_eid is not set"),
                                                                  sender: self.sender.clone().expect("sender is not set"),
                                                                  nonce: self.nonce.clone().expect("nonce is not set"),
                                                                  dst_eid: self.dst_eid.clone().expect("dst_eid is not set"),
                                                                  oapp: self.oapp.clone().expect("oapp is not set"),
                                                                  native_drop_requests: self.native_drop_requests.clone().expect("native_drop_requests is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `native_drop` CPI accounts.
  pub struct NativeDropCpiAccounts<'a, 'b> {
          
                    
              pub executor: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub config: &'b solana_program::account_info::AccountInfo<'a>,
                        /// For native drop transfer

      
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `native_drop` CPI instruction.
pub struct NativeDropCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub executor: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub config: &'b solana_program::account_info::AccountInfo<'a>,
                /// For native drop transfer

    
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: NativeDropInstructionArgs,
  }

impl<'a, 'b> NativeDropCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: NativeDropCpiAccounts<'a, 'b>,
              args: NativeDropInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              executor: accounts.executor,
              config: accounts.config,
              system_program: accounts.system_program,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.executor.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&NativeDropInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::EXECUTOR_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.executor.clone());
                        account_infos.push(self.config.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `NativeDrop` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` executor
                ///   1. `[writable]` config
          ///   2. `[]` system_program
          ///   3. `[]` event_authority
          ///   4. `[]` program
#[derive(Clone, Debug)]
pub struct NativeDropCpiBuilder<'a, 'b> {
  instruction: Box<NativeDropCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> NativeDropCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(NativeDropCpiBuilderInstruction {
      __program: program,
              executor: None,
              config: None,
              system_program: None,
              event_authority: None,
              program: None,
                                            src_eid: None,
                                sender: None,
                                nonce: None,
                                dst_eid: None,
                                oapp: None,
                                native_drop_requests: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn executor(&mut self, executor: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.executor = Some(executor);
                    self
    }
      #[inline(always)]
    pub fn config(&mut self, config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.config = Some(config);
                    self
    }
      /// For native drop transfer
#[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn src_eid(&mut self, src_eid: u32) -> &mut Self {
        self.instruction.src_eid = Some(src_eid);
        self
      }
                #[inline(always)]
      pub fn sender(&mut self, sender: [u8; 32]) -> &mut Self {
        self.instruction.sender = Some(sender);
        self
      }
                #[inline(always)]
      pub fn nonce(&mut self, nonce: u64) -> &mut Self {
        self.instruction.nonce = Some(nonce);
        self
      }
                #[inline(always)]
      pub fn dst_eid(&mut self, dst_eid: u32) -> &mut Self {
        self.instruction.dst_eid = Some(dst_eid);
        self
      }
                #[inline(always)]
      pub fn oapp(&mut self, oapp: Pubkey) -> &mut Self {
        self.instruction.oapp = Some(oapp);
        self
      }
                #[inline(always)]
      pub fn native_drop_requests(&mut self, native_drop_requests: Vec<NativeDropRequest>) -> &mut Self {
        self.instruction.native_drop_requests = Some(native_drop_requests);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = NativeDropInstructionArgs {
                                                              src_eid: self.instruction.src_eid.clone().expect("src_eid is not set"),
                                                                  sender: self.instruction.sender.clone().expect("sender is not set"),
                                                                  nonce: self.instruction.nonce.clone().expect("nonce is not set"),
                                                                  dst_eid: self.instruction.dst_eid.clone().expect("dst_eid is not set"),
                                                                  oapp: self.instruction.oapp.clone().expect("oapp is not set"),
                                                                  native_drop_requests: self.instruction.native_drop_requests.clone().expect("native_drop_requests is not set"),
                                    };
        let instruction = NativeDropCpi {
        __program: self.instruction.__program,
                  
          executor: self.instruction.executor.expect("executor is not set"),
                  
          config: self.instruction.config.expect("config is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct NativeDropCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            executor: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        src_eid: Option<u32>,
                sender: Option<[u8; 32]>,
                nonce: Option<u64>,
                dst_eid: Option<u32>,
                oapp: Option<Pubkey>,
                native_drop_requests: Option<Vec<NativeDropRequest>>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

