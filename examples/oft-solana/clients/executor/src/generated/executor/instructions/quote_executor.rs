//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use crate::generated::types::LzOption;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct QuoteExecutor {
      
              
          pub executor_config: solana_program::pubkey::Pubkey,
          
              
          pub price_feed_program: solana_program::pubkey::Pubkey,
          
              
          pub price_feed_config: solana_program::pubkey::Pubkey,
      }

impl QuoteExecutor {
  pub fn instruction(&self, args: QuoteExecutorInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: QuoteExecutorInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.executor_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.price_feed_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.price_feed_config,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&QuoteExecutorInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::EXECUTOR_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct QuoteExecutorInstructionData {
            discriminator: [u8; 8],
                                    }

impl QuoteExecutorInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [84, 246, 255, 191, 82, 65, 164, 92],
                                                                                        }
  }
}

impl Default for QuoteExecutorInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct QuoteExecutorInstructionArgs {
                  pub msglib: Pubkey,
                pub dst_eid: u32,
                pub sender: Pubkey,
                pub calldata_size: u64,
                pub options: Vec<LzOption>,
      }


/// Instruction builder for `QuoteExecutor`.
///
/// ### Accounts:
///
          ///   0. `[]` executor_config
          ///   1. `[]` price_feed_program
          ///   2. `[]` price_feed_config
#[derive(Clone, Debug, Default)]
pub struct QuoteExecutorBuilder {
            executor_config: Option<solana_program::pubkey::Pubkey>,
                price_feed_program: Option<solana_program::pubkey::Pubkey>,
                price_feed_config: Option<solana_program::pubkey::Pubkey>,
                        msglib: Option<Pubkey>,
                dst_eid: Option<u32>,
                sender: Option<Pubkey>,
                calldata_size: Option<u64>,
                options: Option<Vec<LzOption>>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl QuoteExecutorBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn executor_config(&mut self, executor_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.executor_config = Some(executor_config);
                    self
    }
            #[inline(always)]
    pub fn price_feed_program(&mut self, price_feed_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.price_feed_program = Some(price_feed_program);
                    self
    }
            #[inline(always)]
    pub fn price_feed_config(&mut self, price_feed_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.price_feed_config = Some(price_feed_config);
                    self
    }
                    #[inline(always)]
      pub fn msglib(&mut self, msglib: Pubkey) -> &mut Self {
        self.msglib = Some(msglib);
        self
      }
                #[inline(always)]
      pub fn dst_eid(&mut self, dst_eid: u32) -> &mut Self {
        self.dst_eid = Some(dst_eid);
        self
      }
                #[inline(always)]
      pub fn sender(&mut self, sender: Pubkey) -> &mut Self {
        self.sender = Some(sender);
        self
      }
                #[inline(always)]
      pub fn calldata_size(&mut self, calldata_size: u64) -> &mut Self {
        self.calldata_size = Some(calldata_size);
        self
      }
                #[inline(always)]
      pub fn options(&mut self, options: Vec<LzOption>) -> &mut Self {
        self.options = Some(options);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = QuoteExecutor {
                              executor_config: self.executor_config.expect("executor_config is not set"),
                                        price_feed_program: self.price_feed_program.expect("price_feed_program is not set"),
                                        price_feed_config: self.price_feed_config.expect("price_feed_config is not set"),
                      };
          let args = QuoteExecutorInstructionArgs {
                                                              msglib: self.msglib.clone().expect("msglib is not set"),
                                                                  dst_eid: self.dst_eid.clone().expect("dst_eid is not set"),
                                                                  sender: self.sender.clone().expect("sender is not set"),
                                                                  calldata_size: self.calldata_size.clone().expect("calldata_size is not set"),
                                                                  options: self.options.clone().expect("options is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `quote_executor` CPI accounts.
  pub struct QuoteExecutorCpiAccounts<'a, 'b> {
          
                    
              pub executor_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub price_feed_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub price_feed_config: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `quote_executor` CPI instruction.
pub struct QuoteExecutorCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub executor_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub price_feed_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub price_feed_config: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: QuoteExecutorInstructionArgs,
  }

impl<'a, 'b> QuoteExecutorCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: QuoteExecutorCpiAccounts<'a, 'b>,
              args: QuoteExecutorInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              executor_config: accounts.executor_config,
              price_feed_program: accounts.price_feed_program,
              price_feed_config: accounts.price_feed_config,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.executor_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.price_feed_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.price_feed_config.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&QuoteExecutorInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::EXECUTOR_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.executor_config.clone());
                        account_infos.push(self.price_feed_program.clone());
                        account_infos.push(self.price_feed_config.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `QuoteExecutor` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` executor_config
          ///   1. `[]` price_feed_program
          ///   2. `[]` price_feed_config
#[derive(Clone, Debug)]
pub struct QuoteExecutorCpiBuilder<'a, 'b> {
  instruction: Box<QuoteExecutorCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> QuoteExecutorCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(QuoteExecutorCpiBuilderInstruction {
      __program: program,
              executor_config: None,
              price_feed_program: None,
              price_feed_config: None,
                                            msglib: None,
                                dst_eid: None,
                                sender: None,
                                calldata_size: None,
                                options: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn executor_config(&mut self, executor_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.executor_config = Some(executor_config);
                    self
    }
      #[inline(always)]
    pub fn price_feed_program(&mut self, price_feed_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.price_feed_program = Some(price_feed_program);
                    self
    }
      #[inline(always)]
    pub fn price_feed_config(&mut self, price_feed_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.price_feed_config = Some(price_feed_config);
                    self
    }
                    #[inline(always)]
      pub fn msglib(&mut self, msglib: Pubkey) -> &mut Self {
        self.instruction.msglib = Some(msglib);
        self
      }
                #[inline(always)]
      pub fn dst_eid(&mut self, dst_eid: u32) -> &mut Self {
        self.instruction.dst_eid = Some(dst_eid);
        self
      }
                #[inline(always)]
      pub fn sender(&mut self, sender: Pubkey) -> &mut Self {
        self.instruction.sender = Some(sender);
        self
      }
                #[inline(always)]
      pub fn calldata_size(&mut self, calldata_size: u64) -> &mut Self {
        self.instruction.calldata_size = Some(calldata_size);
        self
      }
                #[inline(always)]
      pub fn options(&mut self, options: Vec<LzOption>) -> &mut Self {
        self.instruction.options = Some(options);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = QuoteExecutorInstructionArgs {
                                                              msglib: self.instruction.msglib.clone().expect("msglib is not set"),
                                                                  dst_eid: self.instruction.dst_eid.clone().expect("dst_eid is not set"),
                                                                  sender: self.instruction.sender.clone().expect("sender is not set"),
                                                                  calldata_size: self.instruction.calldata_size.clone().expect("calldata_size is not set"),
                                                                  options: self.instruction.options.clone().expect("options is not set"),
                                    };
        let instruction = QuoteExecutorCpi {
        __program: self.instruction.__program,
                  
          executor_config: self.instruction.executor_config.expect("executor_config is not set"),
                  
          price_feed_program: self.instruction.price_feed_program.expect("price_feed_program is not set"),
                  
          price_feed_config: self.instruction.price_feed_config.expect("price_feed_config is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct QuoteExecutorCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            executor_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                price_feed_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                price_feed_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        msglib: Option<Pubkey>,
                dst_eid: Option<u32>,
                sender: Option<Pubkey>,
                calldata_size: Option<u64>,
                options: Option<Vec<LzOption>>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

