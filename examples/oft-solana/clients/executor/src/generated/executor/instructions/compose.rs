//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::LzComposeParams;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct Compose {
      
              
          pub executor: solana_program::pubkey::Pubkey,
          
              
          pub config: solana_program::pubkey::Pubkey,
          
              
          pub endpoint_program: solana_program::pubkey::Pubkey,
                /// The authority for the endpoint program to emit events

    
              
          pub endpoint_event_authority: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl Compose {
  pub fn instruction(&self, args: ComposeInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: ComposeInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.executor,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.endpoint_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.endpoint_event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&ComposeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::EXECUTOR_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ComposeInstructionData {
            discriminator: [u8; 8],
                        }

impl ComposeInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [106, 64, 131, 142, 7, 159, 42, 15],
                                                            }
  }
}

impl Default for ComposeInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ComposeInstructionArgs {
                  pub lz_compose: LzComposeParams,
                pub compute_units: u64,
                pub value: u64,
      }


/// Instruction builder for `Compose`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` executor
          ///   1. `[]` config
          ///   2. `[]` endpoint_program
          ///   3. `[]` endpoint_event_authority
          ///   4. `[]` event_authority
          ///   5. `[]` program
#[derive(Clone, Debug, Default)]
pub struct ComposeBuilder {
            executor: Option<solana_program::pubkey::Pubkey>,
                config: Option<solana_program::pubkey::Pubkey>,
                endpoint_program: Option<solana_program::pubkey::Pubkey>,
                endpoint_event_authority: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        lz_compose: Option<LzComposeParams>,
                compute_units: Option<u64>,
                value: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ComposeBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn executor(&mut self, executor: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.executor = Some(executor);
                    self
    }
            #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.config = Some(config);
                    self
    }
            #[inline(always)]
    pub fn endpoint_program(&mut self, endpoint_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.endpoint_program = Some(endpoint_program);
                    self
    }
            /// The authority for the endpoint program to emit events
#[inline(always)]
    pub fn endpoint_event_authority(&mut self, endpoint_event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.endpoint_event_authority = Some(endpoint_event_authority);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn lz_compose(&mut self, lz_compose: LzComposeParams) -> &mut Self {
        self.lz_compose = Some(lz_compose);
        self
      }
                #[inline(always)]
      pub fn compute_units(&mut self, compute_units: u64) -> &mut Self {
        self.compute_units = Some(compute_units);
        self
      }
                #[inline(always)]
      pub fn value(&mut self, value: u64) -> &mut Self {
        self.value = Some(value);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Compose {
                              executor: self.executor.expect("executor is not set"),
                                        config: self.config.expect("config is not set"),
                                        endpoint_program: self.endpoint_program.expect("endpoint_program is not set"),
                                        endpoint_event_authority: self.endpoint_event_authority.expect("endpoint_event_authority is not set"),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = ComposeInstructionArgs {
                                                              lz_compose: self.lz_compose.clone().expect("lz_compose is not set"),
                                                                  compute_units: self.compute_units.clone().expect("compute_units is not set"),
                                                                  value: self.value.clone().expect("value is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `compose` CPI accounts.
  pub struct ComposeCpiAccounts<'a, 'b> {
          
                    
              pub executor: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub endpoint_program: &'b solana_program::account_info::AccountInfo<'a>,
                        /// The authority for the endpoint program to emit events

      
                    
              pub endpoint_event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `compose` CPI instruction.
pub struct ComposeCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub executor: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub endpoint_program: &'b solana_program::account_info::AccountInfo<'a>,
                /// The authority for the endpoint program to emit events

    
              
          pub endpoint_event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: ComposeInstructionArgs,
  }

impl<'a, 'b> ComposeCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: ComposeCpiAccounts<'a, 'b>,
              args: ComposeInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              executor: accounts.executor,
              config: accounts.config,
              endpoint_program: accounts.endpoint_program,
              endpoint_event_authority: accounts.endpoint_event_authority,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.executor.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.endpoint_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.endpoint_event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&ComposeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::EXECUTOR_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.executor.clone());
                        account_infos.push(self.config.clone());
                        account_infos.push(self.endpoint_program.clone());
                        account_infos.push(self.endpoint_event_authority.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Compose` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` executor
          ///   1. `[]` config
          ///   2. `[]` endpoint_program
          ///   3. `[]` endpoint_event_authority
          ///   4. `[]` event_authority
          ///   5. `[]` program
#[derive(Clone, Debug)]
pub struct ComposeCpiBuilder<'a, 'b> {
  instruction: Box<ComposeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ComposeCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ComposeCpiBuilderInstruction {
      __program: program,
              executor: None,
              config: None,
              endpoint_program: None,
              endpoint_event_authority: None,
              event_authority: None,
              program: None,
                                            lz_compose: None,
                                compute_units: None,
                                value: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn executor(&mut self, executor: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.executor = Some(executor);
                    self
    }
      #[inline(always)]
    pub fn config(&mut self, config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.config = Some(config);
                    self
    }
      #[inline(always)]
    pub fn endpoint_program(&mut self, endpoint_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.endpoint_program = Some(endpoint_program);
                    self
    }
      /// The authority for the endpoint program to emit events
#[inline(always)]
    pub fn endpoint_event_authority(&mut self, endpoint_event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.endpoint_event_authority = Some(endpoint_event_authority);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn lz_compose(&mut self, lz_compose: LzComposeParams) -> &mut Self {
        self.instruction.lz_compose = Some(lz_compose);
        self
      }
                #[inline(always)]
      pub fn compute_units(&mut self, compute_units: u64) -> &mut Self {
        self.instruction.compute_units = Some(compute_units);
        self
      }
                #[inline(always)]
      pub fn value(&mut self, value: u64) -> &mut Self {
        self.instruction.value = Some(value);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = ComposeInstructionArgs {
                                                              lz_compose: self.instruction.lz_compose.clone().expect("lz_compose is not set"),
                                                                  compute_units: self.instruction.compute_units.clone().expect("compute_units is not set"),
                                                                  value: self.instruction.value.clone().expect("value is not set"),
                                    };
        let instruction = ComposeCpi {
        __program: self.instruction.__program,
                  
          executor: self.instruction.executor.expect("executor is not set"),
                  
          config: self.instruction.config.expect("config is not set"),
                  
          endpoint_program: self.instruction.endpoint_program.expect("endpoint_program is not set"),
                  
          endpoint_event_authority: self.instruction.endpoint_event_authority.expect("endpoint_event_authority is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ComposeCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            executor: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                endpoint_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                endpoint_event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        lz_compose: Option<LzComposeParams>,
                compute_units: Option<u64>,
                value: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

