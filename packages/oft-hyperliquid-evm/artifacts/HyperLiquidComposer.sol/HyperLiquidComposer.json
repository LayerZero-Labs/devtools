{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        { "name": "_endpoint", "type": "address", "internalType": "address" },
        { "name": "_oft", "type": "address", "internalType": "address" },
        { "name": "_coreIndexId", "type": "uint64", "internalType": "uint64" },
        { "name": "_weiDiff", "type": "uint64", "internalType": "uint64" }
      ],
      "stateMutability": "nonpayable"
    },
    { "type": "receive", "stateMutability": "payable" },
    {
      "type": "function",
      "name": "HLP_PRECOMPILE_READ_SPOT_BALANCE",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "HLP_PRECOMPILE_WRITE",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "VALID_COMPOSE_MESSAGE_LENGTH_ENCODE",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "VALID_COMPOSE_MESSAGE_LENGTH_PACKED",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "balanceOfHyperCore",
      "inputs": [
        { "name": "_user", "type": "address", "internalType": "address" },
        { "name": "_tokenId", "type": "uint64", "internalType": "uint64" }
      ],
      "outputs": [{ "name": "", "type": "uint64", "internalType": "uint64" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "endpoint",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getHypeAsset",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IHyperAsset",
          "components": [
            {
              "name": "assetBridgeAddress",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "coreIndexId",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "decimalDiff",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getOFTAsset",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IHyperAsset",
          "components": [
            {
              "name": "assetBridgeAddress",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "coreIndexId",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "decimalDiff",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hypeAsset",
      "inputs": [],
      "outputs": [
        {
          "name": "assetBridgeAddress",
          "type": "address",
          "internalType": "address"
        },
        { "name": "coreIndexId", "type": "uint64", "internalType": "uint64" },
        { "name": "decimalDiff", "type": "uint64", "internalType": "uint64" }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "lzCompose",
      "inputs": [
        { "name": "_oft", "type": "address", "internalType": "address" },
        { "name": "", "type": "bytes32", "internalType": "bytes32" },
        { "name": "_message", "type": "bytes", "internalType": "bytes" },
        { "name": "", "type": "address", "internalType": "address" },
        { "name": "", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "oft",
      "inputs": [],
      "outputs": [
        { "name": "", "type": "address", "internalType": "contract IOFT" }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oftAsset",
      "inputs": [],
      "outputs": [
        {
          "name": "assetBridgeAddress",
          "type": "address",
          "internalType": "address"
        },
        { "name": "coreIndexId", "type": "uint64", "internalType": "uint64" },
        { "name": "decimalDiff", "type": "uint64", "internalType": "uint64" }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "quoteHyperCoreAmount",
      "inputs": [
        { "name": "_amount", "type": "uint256", "internalType": "uint256" },
        { "name": "_isOFT", "type": "bool", "internalType": "bool" }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IHyperAssetAmount",
          "components": [
            { "name": "evm", "type": "uint256", "internalType": "uint256" },
            { "name": "dust", "type": "uint256", "internalType": "uint256" },
            { "name": "core", "type": "uint64", "internalType": "uint64" }
          ]
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "refundERC20",
      "inputs": [
        {
          "name": "_refundAddress",
          "type": "address",
          "internalType": "address"
        },
        { "name": "_amount", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "refundNativeTokens",
      "inputs": [
        {
          "name": "_refundAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "token",
      "inputs": [],
      "outputs": [
        { "name": "", "type": "address", "internalType": "contract IERC20" }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "validate_addresses_or_refund",
      "inputs": [
        { "name": "_maybeReceiver", "type": "bytes", "internalType": "bytes" },
        {
          "name": "_senderBytes32",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        { "name": "_amountLD", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "validate_payload",
      "inputs": [
        { "name": "_composeMessage", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [
        { "name": "", "type": "uint256", "internalType": "uint256" },
        { "name": "", "type": "bytes32", "internalType": "bytes32" },
        { "name": "", "type": "bytes", "internalType": "bytes" }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "event",
      "name": "ErrorERC20_Refund",
      "inputs": [
        {
          "name": "refundTo",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "refundAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ErrorHYPE_Refund",
      "inputs": [
        {
          "name": "refundTo",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "refundAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ErrorMessage",
      "inputs": [
        {
          "name": "reason",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OverflowDetected",
      "inputs": [
        {
          "name": "amountCore",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        },
        {
          "name": "maxTransferableAmount",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrorMsg",
      "inputs": [
        { "name": "errorMessage", "type": "bytes", "internalType": "bytes" }
      ]
    },
    {
      "type": "error",
      "name": "HyperLiquidComposerCore_SpotBalanceRead_Failed",
      "inputs": [
        { "name": "user", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint64", "internalType": "uint64" }
      ]
    },
    {
      "type": "error",
      "name": "HyperLiquidComposer_FailedToRefund_HYPE",
      "inputs": [
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "amount", "type": "uint256", "internalType": "uint256" }
      ]
    },
    {
      "type": "error",
      "name": "ErrorMsg",
      "inputs": [
        { "name": "errorMessage", "type": "bytes", "internalType": "bytes" }
      ]
    },
    {
      "type": "error",
      "name": "HyperLiquidComposer_FailedToSend_HYPE",
      "inputs": [
        { "name": "amount", "type": "uint256", "internalType": "uint256" }
      ]
    },
    {
      "type": "error",
      "name": "HyperLiquidComposer_InvalidCall_NotComposer",
      "inputs": [
        {
          "name": "notComposerAddress",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "HyperLiquidComposer_InvalidCall_NotEndpoint",
      "inputs": [
        {
          "name": "notEndpointAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "expectedEndpointAddress",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "HyperLiquidComposer_InvalidCall_NotOFT",
      "inputs": [
        {
          "name": "internalOFTAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "receivedOFTAddress",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "HyperLiquidComposer_InvalidComposeMessage",
      "inputs": [
        { "name": "errorMessage", "type": "bytes", "internalType": "bytes" }
      ]
    }
  ],
  "bytecode": {
    "object": "$583e42a4fcd29c5c863b44cd876f1d3349$__63a405952790916040518263ffffffff1660e01b81526004016113f79190612bf5565b5f60405180830381865af4158015611411573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906114399190612c15565b90505f818060200190518101906114509190612cd9565b90503073ffffffffffffffffffffffffffffffffffffffff1663ebaeefd6825f015183602001516040518363ffffffff1660e01b81526004016114949291906125a7565b5f604051808303815f87803b1580156114ab575f80fd5b505af19250505080156114bc575060015b611505577feb907f6e0de6862ca2ced78e890a55c5e8352dc4051697356bc835abf7cedcac815f015182602001516040516114f89291906125a7565b60405180910390a1611506565b5b3073ffffffffffffffffffffffffffffffffffffffff16638483bc0034835f01516040518363ffffffff1660e01b8152600401611543919061214f565b5f604051808303818588803b15801561155a575f80fd5b505af19350505050801561156c575060015b611659575f3273ffffffffffffffffffffffffffffffffffffffff163460405161159590612593565b5f6040518083038185875af1925050503d805f81146115cf576040519150601f19603f3d011682016040523d82523d5f602084013e6115d4565b606091505b5050905080611617577f0b0fd82e76ce2ddfcaf289bd460de0980c71a02674dbe00c04e45dfc44e9d577323460405161160e9291906125a7565b60405180910390a15b7f0b0fd82e76ce2ddfcaf289bd460de0980c71a02674dbe00c04e45dfc44e9d577825f01513460405161164b9291906125a7565b60405180910390a15061165a565b5b806040015192505050919050565b5f611673825f610ea9565b90505f60025f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16825f01516040516116c090612593565b5f6040518083038185875af1925050503d805f81146116fa576040519150601f19603f3d011682016040523d82523d5f602084013e6116ff565b606091505b505090508061174557826040517fb7e54a0700000000000000000000000000000000000000000000000000000000815260040161173c91906121ac565b60405180910390fd5b73333333333333333333333333333333333333333373ffffffffffffffffffffffffffffffffffffffff16630b0ac0ab8560025f0160149054906101000a900467ffffffffffffffff1685604001516040518463ffffffff1660e01b81526004016117b293929190612177565b5f604051808303815f87803b1580156117c9575f80fd5b505af11580156117db573d5f803e3d5ffd5b505050505f8260200151111561194a573073ffffffffffffffffffffffffffffffffffffffff16638483bc008360200151866040518363ffffffff1660e01b8152600401611829919061214f565b5f604051808303818588803b158015611840575f80fd5b505af193505050508015611852575060015b611948573273ffffffffffffffffffffffffffffffffffffffff16826020015160405161187e90612593565b5f6040518083038185875af1925050503d805f81146118b8576040519150601f19603f3d011682016040523d82523d5f602084013e6118bd565b606091505b50508091505080611906577f0b0fd82e76ce2ddfcaf289bd460de0980c71a02674dbe00c04e45dfc44e9d5773283602001516040516118fd9291906125a7565b60405180910390a15b7f0b0fd82e76ce2ddfcaf289bd460de0980c71a02674dbe00c04e45dfc44e9d57784836020015160405161193b9291906125a7565b60405180910390a1611949565b5b5b50505050565b5f61195c826001610ea9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb5f80015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16835f01516040518363ffffffff1660e01b81526004016119de9291906125a7565b6020604051808303815f875af11580156119fa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a1e91906127d4565b5073333333333333333333333333333333333333333373ffffffffffffffffffffffffffffffffffffffff16630b0ac0ab845f800160149054906101000a900467ffffffffffffffff1684604001516040518463ffffffff1660e01b8152600401611a8b93929190612177565b5f604051808303815f87803b158015611aa2575f80fd5b505af1158015611ab4573d5f803e3d5ffd5b505050505f81602001511115611b65577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8483602001516040518363ffffffff1660e01b8152600401611b239291906125a7565b6020604051808303815f875af1158015611b3f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b6391906127d4565b505b505050565b611b72611cc3565b5f8260400151600a611b849190612e7c565b90505f80828781611b9857611b97612ec6565b5b06915081870390505f8388611bad9190612ef3565b90508667ffffffffffffffff168167ffffffffffffffff161115611c49577ff17459c2e89c2b011fa739accb3b853858d0a689d31382b9aa4f56a1ca00f9d38188604051611bfc929190612f23565b60405180910390a15f848883611c129190612f4a565b67ffffffffffffffff16611c269190612f85565b90508791508083611c379190612fc6565b92508084611c459190612ff9565b9350505b60405180606001604052808381526020018481526020018267ffffffffffffffff168152509450505050509392505050565b60405180606001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681525090565b60405180606001604052805f81526020015f81526020015f67ffffffffffffffff1681525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112611d1d57611d1c611cfc565b5b8235905067ffffffffffffffff811115611d3a57611d39611d00565b5b602083019150836001820283011115611d5657611d55611d04565b5b9250929050565b5f8060208385031215611d7357611d72611cf4565b5b5f83013567ffffffffffffffff811115611d9057611d8f611cf8565b5b611d9c85828601611d08565b92509250509250929050565b5f819050919050565b611dba81611da8565b82525050565b5f819050919050565b611dd281611dc0565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611e0f578082015181840152602081019050611df4565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611e3482611dd8565b611e3e8185611de2565b9350611e4e818560208601611df2565b611e5781611e1a565b840191505092915050565b5f606082019050611e755f830186611db1565b611e826020830185611dc9565b8181036040830152611e948184611e2a565b9050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ec782611e9e565b9050919050565b611ed781611ebd565b82525050565b5f67ffffffffffffffff82169050919050565b611ef981611edd565b82525050565b606082015f820151611f135f850182611ece565b506020820151611f266020850182611ef0565b506040820151611f396040850182611ef0565b50505050565b5f606082019050611f525f830184611eff565b92915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611f9282611e1a565b810181811067ffffffffffffffff82111715611fb157611fb0611f5c565b5b80604052505050565b5f611fc3611ceb565b9050611fcf8282611f89565b919050565b5f67ffffffffffffffff821115611fee57611fed611f5c565b5b611ff782611e1a565b9050602081019050919050565b828183375f83830152505050565b5f61202461201f84611fd4565b611fba565b9050828152602081018484840111156120405761203f611f58565b5b61204b848285612004565b509392505050565b5f82601f83011261206757612066611cfc565b5b8135612077848260208601612012565b91505092915050565b61208981611dc0565b8114612093575f80fd5b50565b5f813590506120a481612080565b92915050565b6120b381611da8565b81146120bd575f80fd5b50565b5f813590506120ce816120aa565b92915050565b5f805f606084860312156120eb576120ea611cf4565b5b5f84013567ffffffffffffffff81111561210857612107611cf8565b5b61211486828701612053565b935050602061212586828701612096565b9250506040612136868287016120c0565b9150509250925092565b61214981611ebd565b82525050565b5f6020820190506121625f830184612140565b92915050565b61217181611edd565b82525050565b5f60608201905061218a5f830186612140565b6121976020830185612168565b6121a46040830184612168565b949350505050565b5f6020820190506121bf5f830184611db1565b92915050565b6121ce81611ebd565b81146121d8575f80fd5b50565b5f813590506121e9816121c5565b92915050565b6121f881611edd565b8114612202575f80fd5b50565b5f81359050612213816121ef565b92915050565b5f806040838503121561222f5761222e611cf4565b5b5f61223c858286016121db565b925050602061224d85828601612205565b9150509250929050565b5f60208201905061226a5f830184612168565b92915050565b5f6020828403121561228557612284611cf4565b5b5f612292848285016121db565b91505092915050565b5f819050919050565b5f6122be6122b96122b484611e9e565b61229b565b611e9e565b9050919050565b5f6122cf826122a4565b9050919050565b5f6122e0826122c5565b9050919050565b6122f0816122d6565b82525050565b5f6020820190506123095f8301846122e7565b92915050565b5f805f805f805f60a0888a03121561232a57612329611cf4565b5b5f6123378a828b016121db565b97505060206123488a828b01612096565b965050604088013567ffffffffffffffff81111561236957612368611cf8565b5b6123758a828b01611d08565b955095505060606123888a828b016121db565b935050608088013567ffffffffffffffff8111156123a9576123a8611cf8565b5b6123b58a828b01611d08565b925092505092959891949750929550565b5f80604083850312156123dc576123db611cf4565b5b5f6123e9858286016121db565b92505060206123fa858286016120c0565b9150509250929050565b5f8115159050919050565b61241881612404565b8114612422575f80fd5b50565b5f813590506124338161240f565b92915050565b5f806040838503121561244f5761244e611cf4565b5b5f61245c858286016120c0565b925050602061246d85828601612425565b9150509250929050565b61248081611da8565b82525050565b606082015f82015161249a5f850182612477565b5060208201516124ad6020850182612477565b5060408201516124c06040850182611ef0565b50505050565b5f6060820190506124d95f830184612486565b92915050565b5f6124e9826122c5565b9050919050565b6124f9816124df565b82525050565b5f6020820190506125125f8301846124f0565b92915050565b5f6040820190508181035f8301526125308185611e2a565b905061253f6020830184611db1565b9392505050565b5f6020820190508181035f83015261255e8184611e2a565b905092915050565b5f81905092915050565b50565b5f61257e5f83612566565b915061258982612570565b5f82019050919050565b5f61259d82612573565b9150819050919050565b5f6040820190506125ba5f830185612140565b6125c76020830184611db1565b9392505050565b5f6040820190506125e15f830185612140565b6125ee6020830184612140565b9392505050565b5f6126008385611de2565b935061260d838584612004565b61261683611e1a565b840190509392505050565b5f6020820190508181035f83015261263a8184866125f5565b90509392505050565b5f81519050612651816120aa565b92915050565b5f8151905061266581612080565b92915050565b5f61267d61267884611fd4565b611fba565b90508281526020810184848401111561269957612698611f58565b5b6126a4848285611df2565b509392505050565b5f82601f8301126126c0576126bf611cfc565b5b81516126d084826020860161266b565b91505092915050565b5f805f606084860312156126f0576126ef611cf4565b5b5f6126fd86828701612643565b935050602061270e86828701612657565b925050604084015167ffffffffffffffff81111561272f5761272e611cf8565b5b61273b868287016126ac565b9150509250925092565b5f6060820190508181035f83015261275d8186611e2a565b905061276c6020830185611dc9565b6127796040830184611db1565b949350505050565b5f8151905061278f816121c5565b92915050565b5f602082840312156127aa576127a9611cf4565b5b5f6127b784828501612781565b91505092915050565b5f815190506127ce8161240f565b92915050565b5f602082840312156127e9576127e8611cf4565b5b5f6127f6848285016127c0565b91505092915050565b5f80fd5b5f80fd5b5f808585111561281a576128196127ff565b5b8386111561282b5761282a612803565b5b6001850283019150848603905094509492505050565b5f82905092915050565b5f82821b905092915050565b5f6128628383612841565b8261286d8135611dc0565b925060208210156128ad576128a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261284b565b831692505b505092915050565b5f819050602082019050919050565b5f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b5f6128fa82516128c4565b80915050919050565b5f61290d82611dd8565b82612917846128b5565b9050612922816128ef565b925060148210156129625761295d7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008360140360080261284b565b831692505b5050919050565b5f6129748251611dc0565b80915050919050565b5f61298782611dd8565b82612991846128b5565b905061299c81612969565b925060208210156129dc576129d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261284b565b831692505b5050919050565b5f82825260208201905092915050565b5f6129fd82611dd8565b612a0781856129e3565b9350612a17818560208601611df2565b612a2081611e1a565b840191505092915050565b5f606083015f830151612a405f860182611ece565b506020830151612a536020860182612477565b5060408301518482036040860152612a6b82826129f3565b9150508091505092915050565b5f6020820190508181035f830152612a908184612a2b565b905092915050565b5f604082019050612aab5f830185612140565b612ab86020830184612168565b9392505050565b5f612ac982611dd8565b612ad38185612566565b9350612ae3818560208601611df2565b80840191505092915050565b5f612afa8284612abf565b915081905092915050565b5f80fd5b5f80fd5b5f81519050612b1b816121ef565b92915050565b5f60608284031215612b3657612b35612b05565b5b612b406060611fba565b90505f612b4f84828501612b0d565b5f830152506020612b6284828501612b0d565b6020830152506040612b7684828501612b0d565b60408301525092915050565b5f60608284031215612b9757612b96611cf4565b5b5f612ba484828501612b21565b91505092915050565b5f82825260208201905092915050565b5f612bc782611dd8565b612bd18185612bad565b9350612be1818560208601611df2565b612bea81611e1a565b840191505092915050565b5f6020820190508181035f830152612c0d8184612bbd565b905092915050565b5f60208284031215612c2a57612c29611cf4565b5b5f82015167ffffffffffffffff811115612c4757612c46611cf8565b5b612c53848285016126ac565b91505092915050565b5f60608284031215612c7157612c70612b05565b5b612c7b6060611fba565b90505f612c8a84828501612781565b5f830152506020612c9d84828501612643565b602083015250604082015167ffffffffffffffff811115612cc157612cc0612b09565b5b612ccd848285016126ac565b60408301525092915050565b5f60208284031215612cee57612ced611cf4565b5b5f82015167ffffffffffffffff811115612d0b57612d0a611cf8565b5b612d1784828501612c5c565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b6001851115612da257808604811115612d7e57612d7d612d20565b5b6001851615612d8d5780820291505b8081029050612d9b85612d4d565b9450612d62565b94509492505050565b5f82612dba5760019050612e75565b81612dc7575f9050612e75565b8160018114612ddd5760028114612de757612e16565b6001915050612e75565b60ff841115612df957612df8612d20565b5b8360020a915084821115612e1057612e0f612d20565b5b50612e75565b5060208310610133831016604e8410600b8410161715612e4b5782820a905083811115612e4657612e45612d20565b5b612e75565b612e588484846001612d59565b92509050818404811115612e6f57612e6e612d20565b5b81810290505b9392505050565b5f612e8682611da8565b9150612e9183611edd565b9250612ebe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612dab565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612efd82611da8565b9150612f0883611da8565b925082612f1857612f17612ec6565b5b828204905092915050565b5f604082019050612f365f830185612168565b612f436020830184612168565b9392505050565b5f612f5482611edd565b9150612f5f83611edd565b9250828203905067ffffffffffffffff811115612f7f57612f7e612d20565b5b92915050565b5f612f8f82611da8565b9150612f9a83611da8565b9250828202612fa881611da8565b91508282048414831517612fbf57612fbe612d20565b5b5092915050565b5f612fd082611da8565b9150612fdb83611da8565b9250828203905081811115612ff357612ff2612d20565b5b92915050565b5f61300382611da8565b915061300e83611da8565b925082820190508082111561302657613025612d20565b5b9291505056fea264697066735822122071985d961321e1bdce2201740af446e08456eb6ced8aecf3761c5b0de55378c264736f6c63430008160033",
    "sourceMap": "781:10330:0:-:0;;;1615:1698;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2127:169;;;;;;;;2173:38;:12;:36;;;;;:38;;:::i;:::-;2127:169;;;;;;2238:12;2127:169;;;;;;2277:8;2127:169;;;;;2116:8;:180;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2824:332;;;;;;;;2870:42;2824:332;;;;;;2939:4;2824:332;;;;;;3139:6;2824:332;;;;;2812:9;:344;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3234:4;3223:16;;;;;;;;;;3264:3;;:9;;;:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3249:27;;;;;;;;;;3297:9;3286:20;;;;;;;;;;1615:1698;;;;781:10330;;1797:177:7;1875:7;1953:12;1283:42;1391:43;;1917:48;;;;:::i;:::-;1894:73;;1797:177;;;:::o;88:117:84:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:101::-;881:7;921:18;914:5;910:30;899:41;;845:101;;;:::o;952:120::-;1024:23;1041:5;1024:23;:::i;:::-;1017:5;1014:34;1004:62;;1062:1;1059;1052:12;1004:62;952:120;:::o;1078:141::-;1134:5;1165:6;1159:13;1150:22;;1181:32;1207:5;1181:32;:::i;:::-;1078:141;;;;:::o;1225:816::-;1320:6;1328;1336;1344;1393:3;1381:9;1372:7;1368:23;1364:33;1361:120;;;1400:79;;:::i;:::-;1361:120;1520:1;1545:64;1601:7;1592:6;1581:9;1577:22;1545:64;:::i;:::-;1535:74;;1491:128;1658:2;1684:64;1740:7;1731:6;1720:9;1716:22;1684:64;:::i;:::-;1674:74;;1629:129;1797:2;1823:63;1878:7;1869:6;1858:9;1854:22;1823:63;:::i;:::-;1813:73;;1768:128;1935:2;1961:63;2016:7;2007:6;1996:9;1992:22;1961:63;:::i;:::-;1951:73;;1906:128;1225:816;;;;;;;:::o;2047:351::-;2117:6;2166:2;2154:9;2145:7;2141:23;2137:32;2134:119;;;2172:79;;:::i;:::-;2134:119;2292:1;2317:64;2373:7;2364:6;2353:9;2349:22;2317:64;:::i;:::-;2307:74;;2263:128;2047:351;;;;:::o;2404:77::-;2441:7;2470:5;2459:16;;2404:77;;;:::o;2487:180::-;2535:77;2532:1;2525:88;2632:4;2629:1;2622:15;2656:4;2653:1;2646:15;2673:191;2713:3;2732:20;2750:1;2732:20;:::i;:::-;2727:25;;2766:20;2784:1;2766:20;:::i;:::-;2761:25;;2809:1;2806;2802:9;2795:16;;2830:3;2827:1;2824:10;2821:36;;;2837:18;;:::i;:::-;2821:36;2673:191;;;;:::o;781:10330:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {
      "contracts/library/HyperLiquidComposerCodec.sol": {
        "HyperLiquidComposerCodec": [{ "start": 6500, "length": 20 }]
      }
    }
  },
  "deployedBytecode": {
    "object": "0x60806040526004361061010c575f3560e01c80639b5215f611610094578063dd85007511610063578063dd85007514610357578063ebaeefd614610381578063f6e6b2401461039d578063f9716faf146103c9578063fc0c546a1461040557610113565b80639b5215f6146102bd578063aae12e46146102e7578063ba87267914610311578063d0a102601461033b57610113565b8063765008a1116100db578063765008a1146101e5578063807d6c3f1461021157806381e8dcb41461023b5780638483bc00146102775780639278d99a1461029357610113565b80631b224831146101175780632d0e315c146101555780635241b4961461017f5780635e280f11146101bb57610113565b3661011357005b5f80fd5b348015610122575f80fd5b5061013d60048036038101906101389190611d5d565b61042f565b60405161014c93929190611e62565b60405180910390f35b348015610160575f80fd5b5061016961046d565b6040516101769190611f3f565b60405180910390f35b34801561018a575f80fd5b506101a560048036038101906101a091906120d4565b61053c565b6040516101b2919061214f565b60405180910390f35b3480156101c6575f80fd5b506101cf610661565b6040516101dc919061214f565b60405180910390f35b3480156101f0575f80fd5b506101f9610685565b60405161020893929190612177565b60405180910390f35b34801561021c575f80fd5b506102256106e0565b60405161023291906121ac565b60405180910390f35b348015610246575f80fd5b50610261600480360381019061025c9190612219565b6106e5565b60405161026e9190612257565b60405180910390f35b610291600480360381019061028c9190612270565b6106f8565b005b34801561029e575f80fd5b506102a7610860565b6040516102b491906121ac565b60405180910390f35b3480156102c8575f80fd5b506102d1610865565b6040516102de91906122f6565b60405180910390f35b3480156102f2575f80fd5b506102fb610889565b6040516103089190611f3f565b60405180910390f35b34801561031c575f80fd5b50610325610959565b604051610332919061214f565b60405180910390f35b6103556004803603810190610350919061230f565b61095f565b005b348015610362575f80fd5b5061036b610ce4565b604051610378919061214f565b60405180910390f35b61039b600480360381019061039691906123c6565b610cfc565b005b3480156103a8575f80fd5b506103b1610e4d565b6040516103c093929190612177565b60405180910390f35b3480156103d4575f80fd5b506103ef60048036038101906103ea9190612439565b610ea9565b6040516103fc91906124c6565b60405180910390f35b348015610410575f80fd5b506104196110fa565b60405161042691906124ff565b60405180910390f35b5f8060605f61043e868661111e565b90505f61044b878761114e565b90505f610458888861117c565b90508282829550955095505050509250925092565b610475611c7b565b5f6040518060600160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905090565b5f80610547846111de565b90505f61055386611215565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610655575f6309b3473160e01b8788516040516024016105a5929190612518565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506106198386836112699092919063ffffffff16565b6040517f4f95203300000000000000000000000000000000000000000000000000000000815260040161064c9190612546565b60405180910390fd5b80925050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690805f0160149054906101000a900467ffffffffffffffff1690806001015f9054906101000a900467ffffffffffffffff16905083565b601481565b5f6106f083836112c4565b905092915050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076857336040517f5950c85e00000000000000000000000000000000000000000000000000000000815260040161075f919061214f565b60405180910390fd5b5f34111561085d575f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107aa57816107ac565b325b90505f8173ffffffffffffffffffffffffffffffffffffffff16346040516107d390612593565b5f6040518083038185875af1925050503d805f811461080d576040519150601f19603f3d011682016040523d82523d5f602084013e610812565b606091505b505090508061085a5781346040517fc8ee485e0000000000000000000000000000000000000000000000000000000081526004016108519291906125a7565b60405180910390fd5b50505b50565b602081565b7f000000000000000000000000000000000000000000000000000000000000000081565b610891611c7b565b60026040518060600160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905090565b61080181565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610a11577f0000000000000000000000000000000000000000000000000000000000000000336040517fefa9309d000000000000000000000000000000000000000000000000000000008152600401610a089291906125ce565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610ac3577f0000000000000000000000000000000000000000000000000000000000000000876040517f86fee0c0000000000000000000000000000000000000000000000000000000008152600401610aba9291906125ce565b60405180910390fd5b5f805f60603073ffffffffffffffffffffffffffffffffffffffff16631b2248318a8a6040518363ffffffff1660e01b8152600401610b03929190612621565b5f60405180830381865afa925050508015610b4057506040513d5f823e3d601f19601f82011682018060405250810190610b3d91906126d9565b60015b610bb0573d805f8114610b6e576040519150601f19603f3d011682016040523d82523d5f602084013e610b73565b606091505b50806040517ed4895a000000000000000000000000000000000000000000000000000000008152600401610ba79190612546565b60405180910390fd5b8295508194508093505050503073ffffffffffffffffffffffffffffffffffffffff16635241b4968284866040518463ffffffff1660e01b8152600401610bf993929190612745565b602060405180830381865afa925050508015610c3357506040513d601f19601f82011682018060405250810190610c309190612795565b60015b610cb5573d805f8114610c61576040519150601f19603f3d011682016040523d82523d5f602084013e610c66565b606091505b505f610c71826113bb565b90507f612baef0082f9abcf6dc7b491d75346418381b75756830d7029939026d1b46b981604051610ca29190612546565b60405180910390a1505050505050610cdb565b809450505f341115610ccc57610ccb8434611668565b5b610cd68484611950565b505050505b50505050505050565b73333333333333333333333333333333333333333381565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d6c57336040517f5950c85e000000000000000000000000000000000000000000000000000000008152600401610d63919061214f565b60405180910390fd5b5f81118015610da757505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15610e49577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610e079291906125a7565b6020604051808303815f875af1158015610e23573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e4791906127d4565b505b5050565b6002805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690805f0160149054906101000a900467ffffffffffffffff1690806001015f9054906101000a900467ffffffffffffffff16905083565b610eb1611cc3565b610eb9611c7b565b5f8315610fce575f6040518060600160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509150610fc75f80015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff165f800160149054906101000a900467ffffffffffffffff166112c4565b90506110db565b60026040518060600160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505091506110d860025f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025f0160149054906101000a900467ffffffffffffffff166112c4565b90505b6110f0818387611b6a9092919063ffffffff16565b9250505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f8282600c60ff1690602c60ff169261113993929190612807565b906111449190612857565b5f1c905092915050565b5f8282602c60ff1690604c60ff169261116993929190612807565b906111749190612857565b905092915050565b60608282604c60ff1690809261119493929190612807565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050905092915050565b5f80825f1c905073ffffffffffffffffffffffffffffffffffffffff8016811161120b5780915050611210565b5f9150505b919050565b5f808251905060148103611238578261122d90612903565b60601c915050611264565b6020810361125f575f8361124b9061297d565b9050611256816111de565b92505050611264565b5f9150505b919050565b606060405180606001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001858152506040516020016112ac9190612a78565b60405160208183030381529060405290509392505050565b5f80606061080173ffffffffffffffffffffffffffffffffffffffff1685856040516020016112f4929190612a98565b6040516020818303038152906040526040516113109190612aef565b5f60405180830381855afa9150503d805f8114611348576040519150601f19603f3d011682016040523d82523d5f602084013e61134d565b606091505b5080925081935050508161139a5784846040517fa91ed721000000000000000000000000000000000000000000000000000000008152600401611391929190612a98565b60405180910390fd5b808060200190518101906113ae9190612b82565b5f01519250505092915050565b60605f8273__$583e42a4fcd29c5c863b44cd876f1d3349$__63a405952790916040518263ffffffff1660e01b81526004016113f79190612bf5565b5f60405180830381865af4158015611411573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906114399190612c15565b90505f818060200190518101906114509190612cd9565b90503073ffffffffffffffffffffffffffffffffffffffff1663ebaeefd6825f015183602001516040518363ffffffff1660e01b81526004016114949291906125a7565b5f604051808303815f87803b1580156114ab575f80fd5b505af19250505080156114bc575060015b611505577feb907f6e0de6862ca2ced78e890a55c5e8352dc4051697356bc835abf7cedcac815f015182602001516040516114f89291906125a7565b60405180910390a1611506565b5b3073ffffffffffffffffffffffffffffffffffffffff16638483bc0034835f01516040518363ffffffff1660e01b8152600401611543919061214f565b5f604051808303818588803b15801561155a575f80fd5b505af19350505050801561156c575060015b611659575f3273ffffffffffffffffffffffffffffffffffffffff163460405161159590612593565b5f6040518083038185875af1925050503d805f81146115cf576040519150601f19603f3d011682016040523d82523d5f602084013e6115d4565b606091505b5050905080611617577f0b0fd82e76ce2ddfcaf289bd460de0980c71a02674dbe00c04e45dfc44e9d577323460405161160e9291906125a7565b60405180910390a15b7f0b0fd82e76ce2ddfcaf289bd460de0980c71a02674dbe00c04e45dfc44e9d577825f01513460405161164b9291906125a7565b60405180910390a15061165a565b5b806040015192505050919050565b5f611673825f610ea9565b90505f60025f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16825f01516040516116c090612593565b5f6040518083038185875af1925050503d805f81146116fa576040519150601f19603f3d011682016040523d82523d5f602084013e6116ff565b606091505b505090508061174557826040517fb7e54a0700000000000000000000000000000000000000000000000000000000815260040161173c91906121ac565b60405180910390fd5b73333333333333333333333333333333333333333373ffffffffffffffffffffffffffffffffffffffff16630b0ac0ab8560025f0160149054906101000a900467ffffffffffffffff1685604001516040518463ffffffff1660e01b81526004016117b293929190612177565b5f604051808303815f87803b1580156117c9575f80fd5b505af11580156117db573d5f803e3d5ffd5b505050505f8260200151111561194a573073ffffffffffffffffffffffffffffffffffffffff16638483bc008360200151866040518363ffffffff1660e01b8152600401611829919061214f565b5f604051808303818588803b158015611840575f80fd5b505af193505050508015611852575060015b611948573273ffffffffffffffffffffffffffffffffffffffff16826020015160405161187e90612593565b5f6040518083038185875af1925050503d805f81146118b8576040519150601f19603f3d011682016040523d82523d5f602084013e6118bd565b606091505b50508091505080611906577f0b0fd82e76ce2ddfcaf289bd460de0980c71a02674dbe00c04e45dfc44e9d5773283602001516040516118fd9291906125a7565b60405180910390a15b7f0b0fd82e76ce2ddfcaf289bd460de0980c71a02674dbe00c04e45dfc44e9d57784836020015160405161193b9291906125a7565b60405180910390a1611949565b5b5b50505050565b5f61195c826001610ea9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb5f80015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16835f01516040518363ffffffff1660e01b81526004016119de9291906125a7565b6020604051808303815f875af11580156119fa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a1e91906127d4565b5073333333333333333333333333333333333333333373ffffffffffffffffffffffffffffffffffffffff16630b0ac0ab845f800160149054906101000a900467ffffffffffffffff1684604001516040518463ffffffff1660e01b8152600401611a8b93929190612177565b5f604051808303815f87803b158015611aa2575f80fd5b505af1158015611ab4573d5f803e3d5ffd5b505050505f81602001511115611b65577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8483602001516040518363ffffffff1660e01b8152600401611b239291906125a7565b6020604051808303815f875af1158015611b3f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b6391906127d4565b505b505050565b611b72611cc3565b5f8260400151600a611b849190612e7c565b90505f80828781611b9857611b97612ec6565b5b06915081870390505f8388611bad9190612ef3565b90508667ffffffffffffffff168167ffffffffffffffff161115611c49577ff17459c2e89c2b011fa739accb3b853858d0a689d31382b9aa4f56a1ca00f9d38188604051611bfc929190612f23565b60405180910390a15f848883611c129190612f4a565b67ffffffffffffffff16611c269190612f85565b90508791508083611c379190612fc6565b92508084611c459190612ff9565b9350505b60405180606001604052808381526020018481526020018267ffffffffffffffff168152509450505050509392505050565b60405180606001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681525090565b60405180606001604052805f81526020015f81526020015f67ffffffffffffffff1681525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112611d1d57611d1c611cfc565b5b8235905067ffffffffffffffff811115611d3a57611d39611d00565b5b602083019150836001820283011115611d5657611d55611d04565b5b9250929050565b5f8060208385031215611d7357611d72611cf4565b5b5f83013567ffffffffffffffff811115611d9057611d8f611cf8565b5b611d9c85828601611d08565b92509250509250929050565b5f819050919050565b611dba81611da8565b82525050565b5f819050919050565b611dd281611dc0565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611e0f578082015181840152602081019050611df4565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611e3482611dd8565b611e3e8185611de2565b9350611e4e818560208601611df2565b611e5781611e1a565b840191505092915050565b5f606082019050611e755f830186611db1565b611e826020830185611dc9565b8181036040830152611e948184611e2a565b9050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ec782611e9e565b9050919050565b611ed781611ebd565b82525050565b5f67ffffffffffffffff82169050919050565b611ef981611edd565b82525050565b606082015f820151611f135f850182611ece565b506020820151611f266020850182611ef0565b506040820151611f396040850182611ef0565b50505050565b5f606082019050611f525f830184611eff565b92915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611f9282611e1a565b810181811067ffffffffffffffff82111715611fb157611fb0611f5c565b5b80604052505050565b5f611fc3611ceb565b9050611fcf8282611f89565b919050565b5f67ffffffffffffffff821115611fee57611fed611f5c565b5b611ff782611e1a565b9050602081019050919050565b828183375f83830152505050565b5f61202461201f84611fd4565b611fba565b9050828152602081018484840111156120405761203f611f58565b5b61204b848285612004565b509392505050565b5f82601f83011261206757612066611cfc565b5b8135612077848260208601612012565b91505092915050565b61208981611dc0565b8114612093575f80fd5b50565b5f813590506120a481612080565b92915050565b6120b381611da8565b81146120bd575f80fd5b50565b5f813590506120ce816120aa565b92915050565b5f805f606084860312156120eb576120ea611cf4565b5b5f84013567ffffffffffffffff81111561210857612107611cf8565b5b61211486828701612053565b935050602061212586828701612096565b9250506040612136868287016120c0565b9150509250925092565b61214981611ebd565b82525050565b5f6020820190506121625f830184612140565b92915050565b61217181611edd565b82525050565b5f60608201905061218a5f830186612140565b6121976020830185612168565b6121a46040830184612168565b949350505050565b5f6020820190506121bf5f830184611db1565b92915050565b6121ce81611ebd565b81146121d8575f80fd5b50565b5f813590506121e9816121c5565b92915050565b6121f881611edd565b8114612202575f80fd5b50565b5f81359050612213816121ef565b92915050565b5f806040838503121561222f5761222e611cf4565b5b5f61223c858286016121db565b925050602061224d85828601612205565b9150509250929050565b5f60208201905061226a5f830184612168565b92915050565b5f6020828403121561228557612284611cf4565b5b5f612292848285016121db565b91505092915050565b5f819050919050565b5f6122be6122b96122b484611e9e565b61229b565b611e9e565b9050919050565b5f6122cf826122a4565b9050919050565b5f6122e0826122c5565b9050919050565b6122f0816122d6565b82525050565b5f6020820190506123095f8301846122e7565b92915050565b5f805f805f805f60a0888a03121561232a57612329611cf4565b5b5f6123378a828b016121db565b97505060206123488a828b01612096565b965050604088013567ffffffffffffffff81111561236957612368611cf8565b5b6123758a828b01611d08565b955095505060606123888a828b016121db565b935050608088013567ffffffffffffffff8111156123a9576123a8611cf8565b5b6123b58a828b01611d08565b925092505092959891949750929550565b5f80604083850312156123dc576123db611cf4565b5b5f6123e9858286016121db565b92505060206123fa858286016120c0565b9150509250929050565b5f8115159050919050565b61241881612404565b8114612422575f80fd5b50565b5f813590506124338161240f565b92915050565b5f806040838503121561244f5761244e611cf4565b5b5f61245c858286016120c0565b925050602061246d85828601612425565b9150509250929050565b61248081611da8565b82525050565b606082015f82015161249a5f850182612477565b5060208201516124ad6020850182612477565b5060408201516124c06040850182611ef0565b50505050565b5f6060820190506124d95f830184612486565b92915050565b5f6124e9826122c5565b9050919050565b6124f9816124df565b82525050565b5f6020820190506125125f8301846124f0565b92915050565b5f6040820190508181035f8301526125308185611e2a565b905061253f6020830184611db1565b9392505050565b5f6020820190508181035f83015261255e8184611e2a565b905092915050565b5f81905092915050565b50565b5f61257e5f83612566565b915061258982612570565b5f82019050919050565b5f61259d82612573565b9150819050919050565b5f6040820190506125ba5f830185612140565b6125c76020830184611db1565b9392505050565b5f6040820190506125e15f830185612140565b6125ee6020830184612140565b9392505050565b5f6126008385611de2565b935061260d838584612004565b61261683611e1a565b840190509392505050565b5f6020820190508181035f83015261263a8184866125f5565b90509392505050565b5f81519050612651816120aa565b92915050565b5f8151905061266581612080565b92915050565b5f61267d61267884611fd4565b611fba565b90508281526020810184848401111561269957612698611f58565b5b6126a4848285611df2565b509392505050565b5f82601f8301126126c0576126bf611cfc565b5b81516126d084826020860161266b565b91505092915050565b5f805f606084860312156126f0576126ef611cf4565b5b5f6126fd86828701612643565b935050602061270e86828701612657565b925050604084015167ffffffffffffffff81111561272f5761272e611cf8565b5b61273b868287016126ac565b9150509250925092565b5f6060820190508181035f83015261275d8186611e2a565b905061276c6020830185611dc9565b6127796040830184611db1565b949350505050565b5f8151905061278f816121c5565b92915050565b5f602082840312156127aa576127a9611cf4565b5b5f6127b784828501612781565b91505092915050565b5f815190506127ce8161240f565b92915050565b5f602082840312156127e9576127e8611cf4565b5b5f6127f6848285016127c0565b91505092915050565b5f80fd5b5f80fd5b5f808585111561281a576128196127ff565b5b8386111561282b5761282a612803565b5b6001850283019150848603905094509492505050565b5f82905092915050565b5f82821b905092915050565b5f6128628383612841565b8261286d8135611dc0565b925060208210156128ad576128a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261284b565b831692505b505092915050565b5f819050602082019050919050565b5f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b5f6128fa82516128c4565b80915050919050565b5f61290d82611dd8565b82612917846128b5565b9050612922816128ef565b925060148210156129625761295d7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008360140360080261284b565b831692505b5050919050565b5f6129748251611dc0565b80915050919050565b5f61298782611dd8565b82612991846128b5565b905061299c81612969565b925060208210156129dc576129d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261284b565b831692505b5050919050565b5f82825260208201905092915050565b5f6129fd82611dd8565b612a0781856129e3565b9350612a17818560208601611df2565b612a2081611e1a565b840191505092915050565b5f606083015f830151612a405f860182611ece565b506020830151612a536020860182612477565b5060408301518482036040860152612a6b82826129f3565b9150508091505092915050565b5f6020820190508181035f830152612a908184612a2b565b905092915050565b5f604082019050612aab5f830185612140565b612ab86020830184612168565b9392505050565b5f612ac982611dd8565b612ad38185612566565b9350612ae3818560208601611df2565b80840191505092915050565b5f612afa8284612abf565b915081905092915050565b5f80fd5b5f80fd5b5f81519050612b1b816121ef565b92915050565b5f60608284031215612b3657612b35612b05565b5b612b406060611fba565b90505f612b4f84828501612b0d565b5f830152506020612b6284828501612b0d565b6020830152506040612b7684828501612b0d565b60408301525092915050565b5f60608284031215612b9757612b96611cf4565b5b5f612ba484828501612b21565b91505092915050565b5f82825260208201905092915050565b5f612bc782611dd8565b612bd18185612bad565b9350612be1818560208601611df2565b612bea81611e1a565b840191505092915050565b5f6020820190508181035f830152612c0d8184612bbd565b905092915050565b5f60208284031215612c2a57612c29611cf4565b5b5f82015167ffffffffffffffff811115612c4757612c46611cf8565b5b612c53848285016126ac565b91505092915050565b5f60608284031215612c7157612c70612b05565b5b612c7b6060611fba565b90505f612c8a84828501612781565b5f830152506020612c9d84828501612643565b602083015250604082015167ffffffffffffffff811115612cc157612cc0612b09565b5b612ccd848285016126ac565b60408301525092915050565b5f60208284031215612cee57612ced611cf4565b5b5f82015167ffffffffffffffff811115612d0b57612d0a611cf8565b5b612d1784828501612c5c565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b6001851115612da257808604811115612d7e57612d7d612d20565b5b6001851615612d8d5780820291505b8081029050612d9b85612d4d565b9450612d62565b94509492505050565b5f82612dba5760019050612e75565b81612dc7575f9050612e75565b8160018114612ddd5760028114612de757612e16565b6001915050612e75565b60ff841115612df957612df8612d20565b5b8360020a915084821115612e1057612e0f612d20565b5b50612e75565b5060208310610133831016604e8410600b8410161715612e4b5782820a905083811115612e4657612e45612d20565b5b612e75565b612e588484846001612d59565b92509050818404811115612e6f57612e6e612d20565b5b81810290505b9392505050565b5f612e8682611da8565b9150612e9183611edd565b9250612ebe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612dab565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612efd82611da8565b9150612f0883611da8565b925082612f1857612f17612ec6565b5b828204905092915050565b5f604082019050612f365f830185612168565b612f436020830184612168565b9392505050565b5f612f5482611edd565b9150612f5f83611edd565b9250828203905067ffffffffffffffff811115612f7f57612f7e612d20565b5b92915050565b5f612f8f82611da8565b9150612f9a83611da8565b9250828202612fa881611da8565b91508282048414831517612fbf57612fbe612d20565b5b5092915050565b5f612fd082611da8565b9150612fdb83611da8565b9250828203905081811115612ff357612ff2612d20565b5b92915050565b5f61300382611da8565b915061300e83611da8565b925082820190508082111561302657613025612d20565b5b9291505056fea264697066735822122071985d961321e1bdce2201740af446e08456eb6ced8aecf3761c5b0de55378c264736f6c63430008160033",
    "sourceMap": "781:10330:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2052:732:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;9880:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2790:1090;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1877:33;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1984:27;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;1458:64;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5143:151;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9200:674;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1603:64;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1917:25;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9984:100;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1769:101;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3717:2764:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1674:89:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8142:221;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2017:28;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;4295:587;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1948:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2052:732;2133:7;2142;2151:12;2364:16;2383:44;2411:15;;2383:27;:44::i;:::-;2364:63;;2437:26;2466:47;2497:15;;2466:30;:47::i;:::-;2437:76;;2639:26;2668:46;2698:15;;2668:29;:46::i;:::-;2639:75;;2733:8;2743:18;2763:13;2725:52;;;;;;;;;2052:732;;;;;:::o;9880:98::-;9926:18;;:::i;:::-;9963:8;9956:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9880:98;:::o;2790:1090::-;2953:7;3151:14;3168:40;:14;:38;:40::i;:::-;3151:57;;3218:16;3237:40;:14;:38;:40::i;:::-;3218:59;;3477:1;3457:22;;:8;:22;;;3453:395;;3495:19;3557:93;;;3668:14;3700;:21;3517:218;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3495:240;;3792:44;3818:6;3826:9;3792:6;:25;;:44;;;;;:::i;:::-;3756:81;;;;;;;;;;;:::i;:::-;;;;;;;;3453:395;3865:8;3858:15;;;;2790:1090;;;;;:::o;1877:33::-;;;:::o;1984:27::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1458:64::-;1520:2;1458:64;:::o;5143:151::-;5226:6;5251:36;5271:5;5278:8;5251:19;:36::i;:::-;5244:43;;5143:151;;;;:::o;9200:674::-;1073:4;1051:27;;:10;:27;;;1047:147;;1172:10;1101:82;;;;;;;;;;;:::i;:::-;;;;;;;;1047:147;9308:1:::1;9296:9;:13;9292:576;;;9541:21;9591:1:::0;9565:28:::1;;:14;:28;;;:57;;9608:14;9565:57;;;9596:9;9565:57;9541:81;;9638:12;9656:13;:18;;9683:9;9656:42;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9637:61;;;9717:7;9712:146;;9818:13;9833:9;9751:92;;;;;;;;;;;;:::i;:::-;;;;;;;;9712:146;9311:557;;9292:576;9200:674:::0;:::o;1603:64::-;1665:2;1603:64;:::o;1917:25::-;;;:::o;9984:100::-;10031:18;;:::i;:::-;10068:9;10061:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9984:100;:::o;1769:101::-;1828:42;1769:101;:::o;3717:2764:0:-;4268:10;4247:31;;4255:8;4247:31;;;4243:216;;4397:8;4424:10;4301:147;;;;;;;;;;;;:::i;:::-;;;;;;;;4243:216;4489:4;4473:20;;4481:3;4473:20;;;4469:143;;4590:3;4596:4;4516:85;;;;;;;;;;;;:::i;:::-;;;;;;;;4469:143;4622:16;4648;4674:22;4706:29;5088:4;:21;;;5110:8;;5088:31;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;5084:449;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5517:4;5448:74;;;;;;;;;;;:::i;:::-;;;;;;;;5084:449;5280:9;5269:20;;5320:19;5303:36;;5372:17;5353:36;;5120:280;;;5877:4;:33;;;5911:16;5929:14;5945:8;5877:77;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;5873:359;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6069:19;6091:20;6106:4;6091:14;:20::i;:::-;6069:42;;6130:20;6143:6;6130:20;;;;;;:::i;:::-;;;;;;;;6215:7;;;;;;;;5873:359;6008:9;5997:20;;5955:73;6351:1;6339:9;:13;6335:88;;;6368:44;6392:8;6402:9;6368:23;:44::i;:::-;6335:88;6433:41;6455:8;6465;6433:21;:41::i;:::-;3928:2553;;;;3717:2764;;;;;;;;:::o;1674:89:1:-;1721:42;1674:89;:::o;8142:221::-;1073:4;1051:27;;:10;:27;;;1047:147;;1172:10;1101:82;;;;;;;;;;;:::i;:::-;;;;;;;;1047:147;8258:1:::1;8248:7;:11;:43;;;;;8289:1;8263:28;;:14;:28;;;;8248:43;8244:113;;;8307:5;:14;;;8322;8338:7;8307:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8244:113;8142:221:::0;;:::o;2017:28::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4295:587::-;4371:24;;:::i;:::-;4407;;:::i;:::-;4441:28;4484:6;4480:319;;;4514:8;4506:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4560:70;4580:8;:27;;;;;;;;;;;;4609:8;:20;;;;;;;;;;;;4560:19;:70::i;:::-;4536:94;;4480:319;;;4669:9;4661:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4716:72;4736:9;:28;;;;;;;;;;;;4766:9;:21;;;;;;;;;;;;4716:19;:72::i;:::-;4692:96;;4480:319;4816:59;4846:21;4869:5;4816:7;:29;;:59;;;;;:::i;:::-;4809:66;;;;4295:587;;;;:::o;1948:29::-;;;:::o;1676:150:36:-;1738:7;1780:4;;232:2;1780:37;;;282:2;1780:37;;;;;;;;;:::i;:::-;1772:46;;;;;:::i;:::-;1764:55;;1757:62;;1676:150;;;;:::o;1989:149::-;2054:7;2088:4;;282:2;2088:42;;;335:2;2088:42;;;;;;;;;:::i;:::-;2080:51;;;;;:::i;:::-;2073:58;;1989:149;;;;:::o;2273:128::-;2337:12;2368:4;;335:2;2368:26;;;;;;;;;;;:::i;:::-;2361:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2273:128;;;;:::o;4063:302:7:-;4145:7;4164:23;4198:16;4190:25;;4164:51;;4248:17;4229:36;;:15;:36;4225:107;;4304:15;4281:40;;;;;4225:107;4356:1;4341:17;;;4063:302;;;;:::o;4671:492::-;4756:7;4775:14;4792;:21;4775:38;;705:2;4827:6;:45;4823:307;;4911:14;4903:23;;;:::i;:::-;4895:32;;4888:39;;;;;4823:307;850:2;4948:6;:45;4944:186;;5009:23;5043:14;5035:23;;;:::i;:::-;5009:49;;5079:40;5103:15;5079:23;:40::i;:::-;5072:47;;;;;;4944:186;5154:1;5139:17;;;4671:492;;;;:::o;6074:333::-;6219:12;6290:96;;;;;;;;6322:7;6290:96;;;;;;6345:9;6290:96;;;;6370:13;6290:96;;;6262:138;;;;;;;;:::i;:::-;;;;;;;;;;;;;6243:157;;6074:333;;;;;:::o;5555:480:1:-;5639:6;5657:12;5679:19;1828:42;5728:43;;5783:5;5790:8;5772:27;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5728:72;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5708:92;;;;;;;;5815:7;5810:136;;5919:5;5926:8;5845:90;;;;;;;;;;;;:::i;:::-;;;;;;;;5810:136;5973:6;5962:60;;;;;;;;;;;;:::i;:::-;:66;;;5955:73;;;;5555:480;;;;:::o;6564:1077::-;6625:12;6787:32;6822:4;:24;;;;:26;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6787:61;;6858:33;6905:19;6894:54;;;;;;;;;;;;:::i;:::-;6858:90;;7026:4;:16;;;7043:6;:15;;;7060:6;:19;;;7026:54;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7022:153;;7109:55;7127:6;:15;;;7144:6;:19;;;7109:55;;;;;;;:::i;:::-;;;;;;;;7022:153;;;;7280:4;:23;;;7312:9;7324:6;:15;;;7280:60;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7276:323;;7365:12;7383:9;:14;;7406:9;7383:38;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7364:57;;;7440:7;7435:90;;7472:38;7489:9;7500;7472:38;;;;;;;:::i;:::-;;;;;;;;7435:90;7544:44;7561:6;:15;;;7578:9;7544:44;;;;;;;:::i;:::-;;;;;;;;7350:249;7276:323;;;;7615:6;:19;;;7608:26;;;;6564:1077;;;:::o;9311:1763:0:-;9869:32;9904:36;9925:7;9934:5;9904:20;:36::i;:::-;9869:71;;10027:12;10053:9;:28;;;;;;;;;;;;10045:42;;10096:7;:11;;;10045:68;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10026:87;;;10128:7;10123:119;;10223:7;10158:73;;;;;;;;;;;:::i;:::-;;;;;;;;10123:119;1721:42:1;10370:58:0;;;10429:9;10440;:21;;;;;;;;;;;;10463:7;:12;;;10370:106;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10700:1;10685:7;:12;;;:16;10681:387;;;10721:4;:23;;;10753:7;:12;;;10768:9;10721:57;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10717:341;;10820:9;:14;;10843:7;:12;;;10820:41;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10806:55;;;;;10884:7;10879:101;;10920:41;10937:9;10948:7;:12;;;10920:41;;;;;;;:::i;:::-;;;;;;;;10879:101;11002:41;11019:9;11030:7;:12;;;11002:41;;;;;;;:::i;:::-;;;;;;;;10717:341;;;;10681:387;9397:1677;;9311:1763;;:::o;7461:1140::-;8019:32;8054:37;8075:9;8086:4;8054:20;:37::i;:::-;8019:72;;8172:5;:14;;;8187:8;:27;;;;;;;;;;;;8216:7;:11;;;8172:56;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1721:42:1;8324:58:0;;;8383:9;8394:8;:20;;;;;;;;;;;;8416:7;:12;;;8324:105;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8528:1;8513:7;:12;;;:16;8509:86;;;8545:5;:14;;;8560:9;8571:7;:12;;;8545:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8509:86;7547:1054;7461:1140;;:::o;2792:958:7:-;2946:24;;:::i;:::-;2982:13;3004:6;:18;;;2998:2;:24;;;;:::i;:::-;2982:40;;3032:12;3054:17;3123:5;3113:7;:15;;;;;:::i;:::-;;;3106:22;;3164:4;3154:7;:14;3142:26;;3263:17;3300:5;3290:7;:15;;;;:::i;:::-;3263:43;;3334:22;3321:35;;:10;:35;;;3317:342;;;3377:52;3394:10;3406:22;3377:52;;;;;;;:::i;:::-;;;;;;;;3444:19;3506:5;3480:22;3467:10;:35;;;;:::i;:::-;3466:45;;;;;;:::i;:::-;3444:67;;3538:22;3525:35;;3598:11;3586:9;:23;;;;:::i;:::-;3574:35;;3637:11;3630:4;:18;;;;:::i;:::-;3623:25;;3358:301;3317:342;3676:67;;;;;;;;3701:9;3676:67;;;;3718:4;3676:67;;;;3730:10;3676:67;;;;;3669:74;;;;;;2792:958;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:84:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:117;689:1;686;679:12;716:552;773:8;783:6;833:3;826:4;818:6;814:17;810:27;800:122;;841:79;;:::i;:::-;800:122;954:6;941:20;931:30;;984:18;976:6;973:30;970:117;;;1006:79;;:::i;:::-;970:117;1120:4;1112:6;1108:17;1096:29;;1174:3;1166:4;1158:6;1154:17;1144:8;1140:32;1137:41;1134:128;;;1181:79;;:::i;:::-;1134:128;716:552;;;;;:::o;1274:527::-;1344:6;1352;1401:2;1389:9;1380:7;1376:23;1372:32;1369:119;;;1407:79;;:::i;:::-;1369:119;1555:1;1544:9;1540:17;1527:31;1585:18;1577:6;1574:30;1571:117;;;1607:79;;:::i;:::-;1571:117;1720:64;1776:7;1767:6;1756:9;1752:22;1720:64;:::i;:::-;1702:82;;;;1498:296;1274:527;;;;;:::o;1807:77::-;1844:7;1873:5;1862:16;;1807:77;;;:::o;1890:118::-;1977:24;1995:5;1977:24;:::i;:::-;1972:3;1965:37;1890:118;;:::o;2014:77::-;2051:7;2080:5;2069:16;;2014:77;;;:::o;2097:118::-;2184:24;2202:5;2184:24;:::i;:::-;2179:3;2172:37;2097:118;;:::o;2221:98::-;2272:6;2306:5;2300:12;2290:22;;2221:98;;;:::o;2325:168::-;2408:11;2442:6;2437:3;2430:19;2482:4;2477:3;2473:14;2458:29;;2325:168;;;;:::o;2499:246::-;2580:1;2590:113;2604:6;2601:1;2598:13;2590:113;;;2689:1;2684:3;2680:11;2674:18;2670:1;2665:3;2661:11;2654:39;2626:2;2623:1;2619:10;2614:15;;2590:113;;;2737:1;2728:6;2723:3;2719:16;2712:27;2561:184;2499:246;;;:::o;2751:102::-;2792:6;2843:2;2839:7;2834:2;2827:5;2823:14;2819:28;2809:38;;2751:102;;;:::o;2859:373::-;2945:3;2973:38;3005:5;2973:38;:::i;:::-;3027:70;3090:6;3085:3;3027:70;:::i;:::-;3020:77;;3106:65;3164:6;3159:3;3152:4;3145:5;3141:16;3106:65;:::i;:::-;3196:29;3218:6;3196:29;:::i;:::-;3191:3;3187:39;3180:46;;2949:283;2859:373;;;;:::o;3238:529::-;3405:4;3443:2;3432:9;3428:18;3420:26;;3456:71;3524:1;3513:9;3509:17;3500:6;3456:71;:::i;:::-;3537:72;3605:2;3594:9;3590:18;3581:6;3537:72;:::i;:::-;3656:9;3650:4;3646:20;3641:2;3630:9;3626:18;3619:48;3684:76;3755:4;3746:6;3684:76;:::i;:::-;3676:84;;3238:529;;;;;;:::o;3773:126::-;3810:7;3850:42;3843:5;3839:54;3828:65;;3773:126;;;:::o;3905:96::-;3942:7;3971:24;3989:5;3971:24;:::i;:::-;3960:35;;3905:96;;;:::o;4007:108::-;4084:24;4102:5;4084:24;:::i;:::-;4079:3;4072:37;4007:108;;:::o;4121:101::-;4157:7;4197:18;4190:5;4186:30;4175:41;;4121:101;;;:::o;4228:105::-;4303:23;4320:5;4303:23;:::i;:::-;4298:3;4291:36;4228:105;;:::o;4387:711::-;4540:4;4535:3;4531:14;4641:4;4634:5;4630:16;4624:23;4660:63;4717:4;4712:3;4708:14;4694:12;4660:63;:::i;:::-;4555:178;4822:4;4815:5;4811:16;4805:23;4841:61;4896:4;4891:3;4887:14;4873:12;4841:61;:::i;:::-;4743:169;5001:4;4994:5;4990:16;4984:23;5020:61;5075:4;5070:3;5066:14;5052:12;5020:61;:::i;:::-;4922:169;4509:589;4387:711;;:::o;5104:334::-;5253:4;5291:2;5280:9;5276:18;5268:26;;5304:127;5428:1;5417:9;5413:17;5404:6;5304:127;:::i;:::-;5104:334;;;;:::o;5444:117::-;5553:1;5550;5543:12;5567:180;5615:77;5612:1;5605:88;5712:4;5709:1;5702:15;5736:4;5733:1;5726:15;5753:281;5836:27;5858:4;5836:27;:::i;:::-;5828:6;5824:40;5966:6;5954:10;5951:22;5930:18;5918:10;5915:34;5912:62;5909:88;;;5977:18;;:::i;:::-;5909:88;6017:10;6013:2;6006:22;5796:238;5753:281;;:::o;6040:129::-;6074:6;6101:20;;:::i;:::-;6091:30;;6130:33;6158:4;6150:6;6130:33;:::i;:::-;6040:129;;;:::o;6175:307::-;6236:4;6326:18;6318:6;6315:30;6312:56;;;6348:18;;:::i;:::-;6312:56;6386:29;6408:6;6386:29;:::i;:::-;6378:37;;6470:4;6464;6460:15;6452:23;;6175:307;;;:::o;6488:146::-;6585:6;6580:3;6575;6562:30;6626:1;6617:6;6612:3;6608:16;6601:27;6488:146;;;:::o;6640:423::-;6717:5;6742:65;6758:48;6799:6;6758:48;:::i;:::-;6742:65;:::i;:::-;6733:74;;6830:6;6823:5;6816:21;6868:4;6861:5;6857:16;6906:3;6897:6;6892:3;6888:16;6885:25;6882:112;;;6913:79;;:::i;:::-;6882:112;7003:54;7050:6;7045:3;7040;7003:54;:::i;:::-;6723:340;6640:423;;;;;:::o;7082:338::-;7137:5;7186:3;7179:4;7171:6;7167:17;7163:27;7153:122;;7194:79;;:::i;:::-;7153:122;7311:6;7298:20;7336:78;7410:3;7402:6;7395:4;7387:6;7383:17;7336:78;:::i;:::-;7327:87;;7143:277;7082:338;;;;:::o;7426:122::-;7499:24;7517:5;7499:24;:::i;:::-;7492:5;7489:35;7479:63;;7538:1;7535;7528:12;7479:63;7426:122;:::o;7554:139::-;7600:5;7638:6;7625:20;7616:29;;7654:33;7681:5;7654:33;:::i;:::-;7554:139;;;;:::o;7699:122::-;7772:24;7790:5;7772:24;:::i;:::-;7765:5;7762:35;7752:63;;7811:1;7808;7801:12;7752:63;7699:122;:::o;7827:139::-;7873:5;7911:6;7898:20;7889:29;;7927:33;7954:5;7927:33;:::i;:::-;7827:139;;;;:::o;7972:797::-;8058:6;8066;8074;8123:2;8111:9;8102:7;8098:23;8094:32;8091:119;;;8129:79;;:::i;:::-;8091:119;8277:1;8266:9;8262:17;8249:31;8307:18;8299:6;8296:30;8293:117;;;8329:79;;:::i;:::-;8293:117;8434:62;8488:7;8479:6;8468:9;8464:22;8434:62;:::i;:::-;8424:72;;8220:286;8545:2;8571:53;8616:7;8607:6;8596:9;8592:22;8571:53;:::i;:::-;8561:63;;8516:118;8673:2;8699:53;8744:7;8735:6;8724:9;8720:22;8699:53;:::i;:::-;8689:63;;8644:118;7972:797;;;;;:::o;8775:118::-;8862:24;8880:5;8862:24;:::i;:::-;8857:3;8850:37;8775:118;;:::o;8899:222::-;8992:4;9030:2;9019:9;9015:18;9007:26;;9043:71;9111:1;9100:9;9096:17;9087:6;9043:71;:::i;:::-;8899:222;;;;:::o;9127:115::-;9212:23;9229:5;9212:23;:::i;:::-;9207:3;9200:36;9127:115;;:::o;9248:434::-;9393:4;9431:2;9420:9;9416:18;9408:26;;9444:71;9512:1;9501:9;9497:17;9488:6;9444:71;:::i;:::-;9525:70;9591:2;9580:9;9576:18;9567:6;9525:70;:::i;:::-;9605;9671:2;9660:9;9656:18;9647:6;9605:70;:::i;:::-;9248:434;;;;;;:::o;9688:222::-;9781:4;9819:2;9808:9;9804:18;9796:26;;9832:71;9900:1;9889:9;9885:17;9876:6;9832:71;:::i;:::-;9688:222;;;;:::o;9916:122::-;9989:24;10007:5;9989:24;:::i;:::-;9982:5;9979:35;9969:63;;10028:1;10025;10018:12;9969:63;9916:122;:::o;10044:139::-;10090:5;10128:6;10115:20;10106:29;;10144:33;10171:5;10144:33;:::i;:::-;10044:139;;;;:::o;10189:120::-;10261:23;10278:5;10261:23;:::i;:::-;10254:5;10251:34;10241:62;;10299:1;10296;10289:12;10241:62;10189:120;:::o;10315:137::-;10360:5;10398:6;10385:20;10376:29;;10414:32;10440:5;10414:32;:::i;:::-;10315:137;;;;:::o;10458:472::-;10525:6;10533;10582:2;10570:9;10561:7;10557:23;10553:32;10550:119;;;10588:79;;:::i;:::-;10550:119;10708:1;10733:53;10778:7;10769:6;10758:9;10754:22;10733:53;:::i;:::-;10723:63;;10679:117;10835:2;10861:52;10905:7;10896:6;10885:9;10881:22;10861:52;:::i;:::-;10851:62;;10806:117;10458:472;;;;;:::o;10936:218::-;11027:4;11065:2;11054:9;11050:18;11042:26;;11078:69;11144:1;11133:9;11129:17;11120:6;11078:69;:::i;:::-;10936:218;;;;:::o;11160:329::-;11219:6;11268:2;11256:9;11247:7;11243:23;11239:32;11236:119;;;11274:79;;:::i;:::-;11236:119;11394:1;11419:53;11464:7;11455:6;11444:9;11440:22;11419:53;:::i;:::-;11409:63;;11365:117;11160:329;;;;:::o;11495:60::-;11523:3;11544:5;11537:12;;11495:60;;;:::o;11561:142::-;11611:9;11644:53;11662:34;11671:24;11689:5;11671:24;:::i;:::-;11662:34;:::i;:::-;11644:53;:::i;:::-;11631:66;;11561:142;;;:::o;11709:126::-;11759:9;11792:37;11823:5;11792:37;:::i;:::-;11779:50;;11709:126;;;:::o;11841:139::-;11904:9;11937:37;11968:5;11937:37;:::i;:::-;11924:50;;11841:139;;;:::o;11986:157::-;12086:50;12130:5;12086:50;:::i;:::-;12081:3;12074:63;11986:157;;:::o;12149:248::-;12255:4;12293:2;12282:9;12278:18;12270:26;;12306:84;12387:1;12376:9;12372:17;12363:6;12306:84;:::i;:::-;12149:248;;;;:::o;12403:1307::-;12520:6;12528;12536;12544;12552;12560;12568;12617:3;12605:9;12596:7;12592:23;12588:33;12585:120;;;12624:79;;:::i;:::-;12585:120;12744:1;12769:53;12814:7;12805:6;12794:9;12790:22;12769:53;:::i;:::-;12759:63;;12715:117;12871:2;12897:53;12942:7;12933:6;12922:9;12918:22;12897:53;:::i;:::-;12887:63;;12842:118;13027:2;13016:9;13012:18;12999:32;13058:18;13050:6;13047:30;13044:117;;;13080:79;;:::i;:::-;13044:117;13193:64;13249:7;13240:6;13229:9;13225:22;13193:64;:::i;:::-;13175:82;;;;12970:297;13306:2;13332:53;13377:7;13368:6;13357:9;13353:22;13332:53;:::i;:::-;13322:63;;13277:118;13462:3;13451:9;13447:19;13434:33;13494:18;13486:6;13483:30;13480:117;;;13516:79;;:::i;:::-;13480:117;13629:64;13685:7;13676:6;13665:9;13661:22;13629:64;:::i;:::-;13611:82;;;;13405:298;12403:1307;;;;;;;;;;:::o;13716:474::-;13784:6;13792;13841:2;13829:9;13820:7;13816:23;13812:32;13809:119;;;13847:79;;:::i;:::-;13809:119;13967:1;13992:53;14037:7;14028:6;14017:9;14013:22;13992:53;:::i;:::-;13982:63;;13938:117;14094:2;14120:53;14165:7;14156:6;14145:9;14141:22;14120:53;:::i;:::-;14110:63;;14065:118;13716:474;;;;;:::o;14196:90::-;14230:7;14273:5;14266:13;14259:21;14248:32;;14196:90;;;:::o;14292:116::-;14362:21;14377:5;14362:21;:::i;:::-;14355:5;14352:32;14342:60;;14398:1;14395;14388:12;14342:60;14292:116;:::o;14414:133::-;14457:5;14495:6;14482:20;14473:29;;14511:30;14535:5;14511:30;:::i;:::-;14414:133;;;;:::o;14553:468::-;14618:6;14626;14675:2;14663:9;14654:7;14650:23;14646:32;14643:119;;;14681:79;;:::i;:::-;14643:119;14801:1;14826:53;14871:7;14862:6;14851:9;14847:22;14826:53;:::i;:::-;14816:63;;14772:117;14928:2;14954:50;14996:7;14987:6;14976:9;14972:22;14954:50;:::i;:::-;14944:60;;14899:115;14553:468;;;;;:::o;15027:108::-;15104:24;15122:5;15104:24;:::i;:::-;15099:3;15092:37;15027:108;;:::o;15201:696::-;15366:4;15361:3;15357:14;15452:4;15445:5;15441:16;15435:23;15471:63;15528:4;15523:3;15519:14;15505:12;15471:63;:::i;:::-;15381:163;15626:4;15619:5;15615:16;15609:23;15645:63;15702:4;15697:3;15693:14;15679:12;15645:63;:::i;:::-;15554:164;15800:4;15793:5;15789:16;15783:23;15819:61;15874:4;15869:3;15865:14;15851:12;15819:61;:::i;:::-;15728:162;15335:562;15201:696;;:::o;15903:358::-;16064:4;16102:2;16091:9;16087:18;16079:26;;16115:139;16251:1;16240:9;16236:17;16227:6;16115:139;:::i;:::-;15903:358;;;;:::o;16267:142::-;16333:9;16366:37;16397:5;16366:37;:::i;:::-;16353:50;;16267:142;;;:::o;16415:163::-;16518:53;16565:5;16518:53;:::i;:::-;16513:3;16506:66;16415:163;;:::o;16584:254::-;16693:4;16731:2;16720:9;16716:18;16708:26;;16744:87;16828:1;16817:9;16813:17;16804:6;16744:87;:::i;:::-;16584:254;;;;:::o;16844:419::-;16983:4;17021:2;17010:9;17006:18;16998:26;;17070:9;17064:4;17060:20;17056:1;17045:9;17041:17;17034:47;17098:76;17169:4;17160:6;17098:76;:::i;:::-;17090:84;;17184:72;17252:2;17241:9;17237:18;17228:6;17184:72;:::i;:::-;16844:419;;;;;:::o;17269:309::-;17380:4;17418:2;17407:9;17403:18;17395:26;;17467:9;17461:4;17457:20;17453:1;17442:9;17438:17;17431:47;17495:76;17566:4;17557:6;17495:76;:::i;:::-;17487:84;;17269:309;;;;:::o;17584:147::-;17685:11;17722:3;17707:18;;17584:147;;;;:::o;17737:114::-;;:::o;17857:398::-;18016:3;18037:83;18118:1;18113:3;18037:83;:::i;:::-;18030:90;;18129:93;18218:3;18129:93;:::i;:::-;18247:1;18242:3;18238:11;18231:18;;17857:398;;;:::o;18261:379::-;18445:3;18467:147;18610:3;18467:147;:::i;:::-;18460:154;;18631:3;18624:10;;18261:379;;;:::o;18646:332::-;18767:4;18805:2;18794:9;18790:18;18782:26;;18818:71;18886:1;18875:9;18871:17;18862:6;18818:71;:::i;:::-;18899:72;18967:2;18956:9;18952:18;18943:6;18899:72;:::i;:::-;18646:332;;;;;:::o;18984:::-;19105:4;19143:2;19132:9;19128:18;19120:26;;19156:71;19224:1;19213:9;19209:17;19200:6;19156:71;:::i;:::-;19237:72;19305:2;19294:9;19290:18;19281:6;19237:72;:::i;:::-;18984:332;;;;;:::o;19344:314::-;19440:3;19461:70;19524:6;19519:3;19461:70;:::i;:::-;19454:77;;19541:56;19590:6;19585:3;19578:5;19541:56;:::i;:::-;19622:29;19644:6;19622:29;:::i;:::-;19617:3;19613:39;19606:46;;19344:314;;;;;:::o;19664:329::-;19785:4;19823:2;19812:9;19808:18;19800:26;;19872:9;19866:4;19862:20;19858:1;19847:9;19843:17;19836:47;19900:86;19981:4;19972:6;19964;19900:86;:::i;:::-;19892:94;;19664:329;;;;;:::o;19999:143::-;20056:5;20087:6;20081:13;20072:22;;20103:33;20130:5;20103:33;:::i;:::-;19999:143;;;;:::o;20148:::-;20205:5;20236:6;20230:13;20221:22;;20252:33;20279:5;20252:33;:::i;:::-;20148:143;;;;:::o;20297:432::-;20385:5;20410:65;20426:48;20467:6;20426:48;:::i;:::-;20410:65;:::i;:::-;20401:74;;20498:6;20491:5;20484:21;20536:4;20529:5;20525:16;20574:3;20565:6;20560:3;20556:16;20553:25;20550:112;;;20581:79;;:::i;:::-;20550:112;20671:52;20716:6;20711:3;20706;20671:52;:::i;:::-;20391:338;20297:432;;;;;:::o;20748:353::-;20814:5;20863:3;20856:4;20848:6;20844:17;20840:27;20830:122;;20871:79;;:::i;:::-;20830:122;20981:6;20975:13;21006:89;21091:3;21083:6;21076:4;21068:6;21064:17;21006:89;:::i;:::-;20997:98;;20820:281;20748:353;;;;:::o;21107:834::-;21204:6;21212;21220;21269:2;21257:9;21248:7;21244:23;21240:32;21237:119;;;21275:79;;:::i;:::-;21237:119;21395:1;21420:64;21476:7;21467:6;21456:9;21452:22;21420:64;:::i;:::-;21410:74;;21366:128;21533:2;21559:64;21615:7;21606:6;21595:9;21591:22;21559:64;:::i;:::-;21549:74;;21504:129;21693:2;21682:9;21678:18;21672:25;21724:18;21716:6;21713:30;21710:117;;;21746:79;;:::i;:::-;21710:117;21851:73;21916:7;21907:6;21896:9;21892:22;21851:73;:::i;:::-;21841:83;;21643:291;21107:834;;;;;:::o;21947:529::-;22114:4;22152:2;22141:9;22137:18;22129:26;;22201:9;22195:4;22191:20;22187:1;22176:9;22172:17;22165:47;22229:76;22300:4;22291:6;22229:76;:::i;:::-;22221:84;;22315:72;22383:2;22372:9;22368:18;22359:6;22315:72;:::i;:::-;22397;22465:2;22454:9;22450:18;22441:6;22397:72;:::i;:::-;21947:529;;;;;;:::o;22482:143::-;22539:5;22570:6;22564:13;22555:22;;22586:33;22613:5;22586:33;:::i;:::-;22482:143;;;;:::o;22631:351::-;22701:6;22750:2;22738:9;22729:7;22725:23;22721:32;22718:119;;;22756:79;;:::i;:::-;22718:119;22876:1;22901:64;22957:7;22948:6;22937:9;22933:22;22901:64;:::i;:::-;22891:74;;22847:128;22631:351;;;;:::o;22988:137::-;23042:5;23073:6;23067:13;23058:22;;23089:30;23113:5;23089:30;:::i;:::-;22988:137;;;;:::o;23131:345::-;23198:6;23247:2;23235:9;23226:7;23222:23;23218:32;23215:119;;;23253:79;;:::i;:::-;23215:119;23373:1;23398:61;23451:7;23442:6;23431:9;23427:22;23398:61;:::i;:::-;23388:71;;23344:125;23131:345;;;;:::o;23482:117::-;23591:1;23588;23581:12;23605:117;23714:1;23711;23704:12;23728:469;23833:9;23844;23882:8;23870:10;23867:24;23864:111;;;23894:79;;:::i;:::-;23864:111;24000:6;23990:8;23987:20;23984:107;;;24010:79;;:::i;:::-;23984:107;24141:1;24129:10;24125:18;24117:6;24113:31;24100:44;;24180:10;24170:8;24166:25;24153:38;;23728:469;;;;;;;:::o;24203:96::-;24261:6;24289:3;24279:13;;24203:96;;;;:::o;24397:107::-;24441:8;24491:5;24485:4;24481:16;24460:37;;24397:107;;;;:::o;24510:552::-;24601:5;24632:45;24673:3;24666:5;24632:45;:::i;:::-;24702:5;24726:41;24757:8;24744:22;24726:41;:::i;:::-;24717:50;;24791:2;24783:6;24780:14;24777:278;;;24862:169;24947:66;24917:6;24913:2;24909:15;24906:1;24902:23;24862:169;:::i;:::-;24839:5;24818:227;24809:236;;24777:278;24607:455;;24510:552;;;;:::o;25068:116::-;25119:4;25142:3;25134:11;;25172:4;25167:3;25163:14;25155:22;;25068:116;;;:::o;25190:150::-;25227:7;25267:66;25260:5;25256:78;25245:89;;25190:150;;;:::o;25346:154::-;25389:11;25425:29;25449:3;25443:10;25425:29;:::i;:::-;25488:5;25464:29;;25401:99;25346:154;;;:::o;25506:594::-;25590:5;25621:38;25653:5;25621:38;:::i;:::-;25684:5;25711:40;25745:5;25711:40;:::i;:::-;25699:52;;25770:35;25796:8;25770:35;:::i;:::-;25761:44;;25829:2;25821:6;25818:14;25815:278;;;25900:169;25985:66;25955:6;25951:2;25947:15;25944:1;25940:23;25900:169;:::i;:::-;25877:5;25856:227;25847:236;;25815:278;25596:504;;25506:594;;;:::o;26106:154::-;26149:11;26185:29;26209:3;26203:10;26185:29;:::i;:::-;26248:5;26224:29;;26161:99;26106:154;;;:::o;26266:594::-;26350:5;26381:38;26413:5;26381:38;:::i;:::-;26444:5;26471:40;26505:5;26471:40;:::i;:::-;26459:52;;26530:35;26556:8;26530:35;:::i;:::-;26521:44;;26589:2;26581:6;26578:14;26575:278;;;26660:169;26745:66;26715:6;26711:2;26707:15;26704:1;26700:23;26660:169;:::i;:::-;26637:5;26616:227;26607:236;;26575:278;26356:504;;26266:594;;;:::o;26866:158::-;26939:11;26973:6;26968:3;26961:19;27013:4;27008:3;27004:14;26989:29;;26866:158;;;;:::o;27030:353::-;27106:3;27134:38;27166:5;27134:38;:::i;:::-;27188:60;27241:6;27236:3;27188:60;:::i;:::-;27181:67;;27257:65;27315:6;27310:3;27303:4;27296:5;27292:16;27257:65;:::i;:::-;27347:29;27369:6;27347:29;:::i;:::-;27342:3;27338:39;27331:46;;27110:273;27030:353;;;;:::o;27453:822::-;27596:3;27632:4;27627:3;27623:14;27723:4;27716:5;27712:16;27706:23;27742:63;27799:4;27794:3;27790:14;27776:12;27742:63;:::i;:::-;27647:168;27905:4;27898:5;27894:16;27888:23;27924:63;27981:4;27976:3;27972:14;27958:12;27924:63;:::i;:::-;27825:172;28087:4;28080:5;28076:16;28070:23;28140:3;28134:4;28130:14;28123:4;28118:3;28114:14;28107:38;28166:71;28232:4;28218:12;28166:71;:::i;:::-;28158:79;;28007:241;28265:4;28258:11;;27601:674;27453:822;;;;:::o;28281:421::-;28448:4;28486:2;28475:9;28471:18;28463:26;;28535:9;28529:4;28525:20;28521:1;28510:9;28506:17;28499:47;28563:132;28690:4;28681:6;28563:132;:::i;:::-;28555:140;;28281:421;;;;:::o;28708:328::-;28827:4;28865:2;28854:9;28850:18;28842:26;;28878:71;28946:1;28935:9;28931:17;28922:6;28878:71;:::i;:::-;28959:70;29025:2;29014:9;29010:18;29001:6;28959:70;:::i;:::-;28708:328;;;;;:::o;29042:386::-;29146:3;29174:38;29206:5;29174:38;:::i;:::-;29228:88;29309:6;29304:3;29228:88;:::i;:::-;29221:95;;29325:65;29383:6;29378:3;29371:4;29364:5;29360:16;29325:65;:::i;:::-;29415:6;29410:3;29406:16;29399:23;;29150:278;29042:386;;;;:::o;29434:271::-;29564:3;29586:93;29675:3;29666:6;29586:93;:::i;:::-;29579:100;;29696:3;29689:10;;29434:271;;;;:::o;29711:117::-;29820:1;29817;29810:12;29834:117;29943:1;29940;29933:12;29957:141;30013:5;30044:6;30038:13;30029:22;;30060:32;30086:5;30060:32;:::i;:::-;29957:141;;;;:::o;30157:785::-;30246:5;30290:4;30278:9;30273:3;30269:19;30265:30;30262:117;;;30298:79;;:::i;:::-;30262:117;30397:21;30413:4;30397:21;:::i;:::-;30388:30;;30478:1;30518:59;30573:3;30564:6;30553:9;30549:22;30518:59;:::i;:::-;30511:4;30504:5;30500:16;30493:85;30428:161;30648:2;30689:59;30744:3;30735:6;30724:9;30720:22;30689:59;:::i;:::-;30682:4;30675:5;30671:16;30664:85;30599:161;30823:2;30864:59;30919:3;30910:6;30899:9;30895:22;30864:59;:::i;:::-;30857:4;30850:5;30846:16;30839:85;30770:165;30157:785;;;;:::o;30948:409::-;31047:6;31096:2;31084:9;31075:7;31071:23;31067:32;31064:119;;;31102:79;;:::i;:::-;31064:119;31222:1;31247:93;31332:7;31323:6;31312:9;31308:22;31247:93;:::i;:::-;31237:103;;31193:157;30948:409;;;;:::o;31363:176::-;31454:11;31488:6;31483:3;31476:19;31528:4;31523:3;31519:14;31504:29;;31363:176;;;;:::o;31545:389::-;31639:3;31667:38;31699:5;31667:38;:::i;:::-;31721:78;31792:6;31787:3;31721:78;:::i;:::-;31714:85;;31808:65;31866:6;31861:3;31854:4;31847:5;31843:16;31808:65;:::i;:::-;31898:29;31920:6;31898:29;:::i;:::-;31893:3;31889:39;31882:46;;31643:291;31545:389;;;;:::o;31940:325::-;32059:4;32097:2;32086:9;32082:18;32074:26;;32146:9;32140:4;32136:20;32132:1;32121:9;32117:17;32110:47;32174:84;32253:4;32244:6;32174:84;:::i;:::-;32166:92;;31940:325;;;;:::o;32271:522::-;32350:6;32399:2;32387:9;32378:7;32374:23;32370:32;32367:119;;;32405:79;;:::i;:::-;32367:119;32546:1;32535:9;32531:17;32525:24;32576:18;32568:6;32565:30;32562:117;;;32598:79;;:::i;:::-;32562:117;32703:73;32768:7;32759:6;32748:9;32744:22;32703:73;:::i;:::-;32693:83;;32496:290;32271:522;;;;:::o;32833:973::-;32930:5;32974:4;32962:9;32957:3;32953:19;32949:30;32946:117;;;32982:79;;:::i;:::-;32946:117;33081:21;33097:4;33081:21;:::i;:::-;33072:30;;33165:1;33205:60;33261:3;33252:6;33241:9;33237:22;33205:60;:::i;:::-;33198:4;33191:5;33187:16;33180:86;33112:165;33344:2;33385:60;33441:3;33432:6;33421:9;33417:22;33385:60;:::i;:::-;33378:4;33371:5;33367:16;33360:86;33287:170;33545:2;33534:9;33530:18;33524:25;33576:18;33568:6;33565:30;33562:117;;;33598:79;;:::i;:::-;33562:117;33718:69;33783:3;33774:6;33763:9;33759:22;33718:69;:::i;:::-;33711:4;33704:5;33700:16;33693:95;33467:332;32833:973;;;;:::o;33812:578::-;33919:6;33968:2;33956:9;33947:7;33943:23;33939:32;33936:119;;;33974:79;;:::i;:::-;33936:119;34115:1;34104:9;34100:17;34094:24;34145:18;34137:6;34134:30;34131:117;;;34167:79;;:::i;:::-;34131:117;34272:101;34365:7;34356:6;34345:9;34341:22;34272:101;:::i;:::-;34262:111;;34065:318;33812:578;;;;:::o;34396:180::-;34444:77;34441:1;34434:88;34541:4;34538:1;34531:15;34565:4;34562:1;34555:15;34582:102;34624:8;34671:5;34668:1;34664:13;34643:34;;34582:102;;;:::o;34690:848::-;34751:5;34758:4;34782:6;34773:15;;34806:5;34797:14;;34820:712;34841:1;34831:8;34828:15;34820:712;;;34936:4;34931:3;34927:14;34921:4;34918:24;34915:50;;;34945:18;;:::i;:::-;34915:50;34995:1;34985:8;34981:16;34978:451;;;35410:4;35403:5;35399:16;35390:25;;34978:451;35460:4;35454;35450:15;35442:23;;35490:32;35513:8;35490:32;:::i;:::-;35478:44;;34820:712;;;34690:848;;;;;;;:::o;35544:1073::-;35598:5;35789:8;35779:40;;35810:1;35801:10;;35812:5;;35779:40;35838:4;35828:36;;35855:1;35846:10;;35857:5;;35828:36;35924:4;35972:1;35967:27;;;;36008:1;36003:191;;;;35917:277;;35967:27;35985:1;35976:10;;35987:5;;;36003:191;36048:3;36038:8;36035:17;36032:43;;;36055:18;;:::i;:::-;36032:43;36104:8;36101:1;36097:16;36088:25;;36139:3;36132:5;36129:14;36126:40;;;36146:18;;:::i;:::-;36126:40;36179:5;;;35917:277;;36303:2;36293:8;36290:16;36284:3;36278:4;36275:13;36271:36;36253:2;36243:8;36240:16;36235:2;36229:4;36226:12;36222:35;36206:111;36203:246;;;36359:8;36353:4;36349:19;36340:28;;36394:3;36387:5;36384:14;36381:40;;;36401:18;;:::i;:::-;36381:40;36434:5;;36203:246;36474:42;36512:3;36502:8;36496:4;36493:1;36474:42;:::i;:::-;36459:57;;;;36548:4;36543:3;36539:14;36532:5;36529:25;36526:51;;;36557:18;;:::i;:::-;36526:51;36606:4;36599:5;36595:16;36586:25;;35544:1073;;;;;;:::o;36623:283::-;36682:5;36706:23;36724:4;36706:23;:::i;:::-;36698:31;;36750:26;36767:8;36750:26;:::i;:::-;36738:38;;36795:104;36832:66;36822:8;36816:4;36795:104;:::i;:::-;36786:113;;36623:283;;;;:::o;36912:180::-;36960:77;36957:1;36950:88;37057:4;37054:1;37047:15;37081:4;37078:1;37071:15;37098:185;37138:1;37155:20;37173:1;37155:20;:::i;:::-;37150:25;;37189:20;37207:1;37189:20;:::i;:::-;37184:25;;37228:1;37218:35;;37233:18;;:::i;:::-;37218:35;37275:1;37272;37268:9;37263:14;;37098:185;;;;:::o;37289:324::-;37406:4;37444:2;37433:9;37429:18;37421:26;;37457:69;37523:1;37512:9;37508:17;37499:6;37457:69;:::i;:::-;37536:70;37602:2;37591:9;37587:18;37578:6;37536:70;:::i;:::-;37289:324;;;;;:::o;37619:208::-;37658:4;37678:19;37695:1;37678:19;:::i;:::-;37673:24;;37711:19;37728:1;37711:19;:::i;:::-;37706:24;;37754:1;37751;37747:9;37739:17;;37778:18;37772:4;37769:28;37766:54;;;37800:18;;:::i;:::-;37766:54;37619:208;;;;:::o;37833:410::-;37873:7;37896:20;37914:1;37896:20;:::i;:::-;37891:25;;37930:20;37948:1;37930:20;:::i;:::-;37925:25;;37985:1;37982;37978:9;38007:30;38025:11;38007:30;:::i;:::-;37996:41;;38186:1;38177:7;38173:15;38170:1;38167:22;38147:1;38140:9;38120:83;38097:139;;38216:18;;:::i;:::-;38097:139;37881:362;37833:410;;;;:::o;38249:194::-;38289:4;38309:20;38327:1;38309:20;:::i;:::-;38304:25;;38343:20;38361:1;38343:20;:::i;:::-;38338:25;;38387:1;38384;38380:9;38372:17;;38411:1;38405:4;38402:11;38399:37;;;38416:18;;:::i;:::-;38399:37;38249:194;;;;:::o;38449:191::-;38489:3;38508:20;38526:1;38508:20;:::i;:::-;38503:25;;38542:20;38560:1;38542:20;:::i;:::-;38537:25;;38585:1;38582;38578:9;38571:16;;38606:3;38603:1;38600:10;38597:36;;;38613:18;;:::i;:::-;38597:36;38449:191;;;;:::o",
    "linkReferences": {
      "contracts/library/HyperLiquidComposerCodec.sol": {
        "HyperLiquidComposerCodec": [{ "start": 5057, "length": 20 }]
      }
    },
    "immutableReferences": {
      "454": [
        { "start": 1635, "length": 32 },
        { "start": 2424, "length": 32 },
        { "start": 2484, "length": 32 }
      ],
      "457": [
        { "start": 2151, "length": 32 },
        { "start": 2602, "length": 32 },
        { "start": 2662, "length": 32 }
      ],
      "460": [
        { "start": 3502, "length": 32 },
        { "start": 4348, "length": 32 },
        { "start": 6496, "length": 32 },
        { "start": 6854, "length": 32 }
      ]
    }
  },
  "methodIdentifiers": {
    "HLP_PRECOMPILE_READ_SPOT_BALANCE()": "ba872679",
    "HLP_PRECOMPILE_WRITE()": "dd850075",
    "VALID_COMPOSE_MESSAGE_LENGTH_ENCODE()": "9278d99a",
    "VALID_COMPOSE_MESSAGE_LENGTH_PACKED()": "807d6c3f",
    "balanceOfHyperCore(address,uint64)": "81e8dcb4",
    "endpoint()": "5e280f11",
    "getHypeAsset()": "aae12e46",
    "getOFTAsset()": "2d0e315c",
    "hypeAsset()": "f6e6b240",
    "lzCompose(address,bytes32,bytes,address,bytes)": "d0a10260",
    "oft()": "9b5215f6",
    "oftAsset()": "765008a1",
    "quoteHyperCoreAmount(uint256,bool)": "f9716faf",
    "refundERC20(address,uint256)": "ebaeefd6",
    "refundNativeTokens(address)": "8483bc00",
    "token()": "fc0c546a",
    "validate_addresses_or_refund(bytes,bytes32,uint256)": "5241b496",
    "validate_payload(bytes)": "1b224831"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_coreIndexId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_weiDiff\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorMessage\",\"type\":\"bytes\"}],\"name\":\"ErrorMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"tokenId\",\"type\":\"uint64\"}],\"name\":\"HyperLiquidComposerCore_SpotBalanceRead_Failed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HyperLiquidComposer_FailedToRefund_HYPE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HyperLiquidComposer_FailedToSend_HYPE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notComposerAddress\",\"type\":\"address\"}],\"name\":\"HyperLiquidComposer_InvalidCall_NotComposer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notEndpointAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedEndpointAddress\",\"type\":\"address\"}],\"name\":\"HyperLiquidComposer_InvalidCall_NotEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"internalOFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivedOFTAddress\",\"type\":\"address\"}],\"name\":\"HyperLiquidComposer_InvalidCall_NotOFT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorMessage\",\"type\":\"bytes\"}],\"name\":\"HyperLiquidComposer_InvalidComposeMessage\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"ErrorERC20_Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"ErrorHYPE_Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"ErrorMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amountCore\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"maxTransferableAmount\",\"type\":\"uint64\"}],\"name\":\"OverflowDetected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HLP_PRECOMPILE_READ_SPOT_BALANCE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HLP_PRECOMPILE_WRITE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALID_COMPOSE_MESSAGE_LENGTH_ENCODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALID_COMPOSE_MESSAGE_LENGTH_PACKED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"balanceOfHyperCore\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHypeAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"coreIndexId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"decimalDiff\",\"type\":\"uint64\"}],\"internalType\":\"struct IHyperAsset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOFTAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"coreIndexId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"decimalDiff\",\"type\":\"uint64\"}],\"internalType\":\"struct IHyperAsset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hypeAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"coreIndexId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"decimalDiff\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oft\",\"outputs\":[{\"internalType\":\"contract IOFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oftAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"coreIndexId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"decimalDiff\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOFT\",\"type\":\"bool\"}],\"name\":\"quoteHyperCoreAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"evm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"core\",\"type\":\"uint64\"}],\"internalType\":\"struct IHyperAssetAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refundERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"refundNativeTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_maybeReceiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_senderBytes32\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"}],\"name\":\"validate_addresses_or_refund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_composeMessage\",\"type\":\"bytes\"}],\"name\":\"validate_payload\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOfHyperCore(address,uint64)\":{\"params\":{\"_tokenId\":\"The token id of the hypercore\",\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The balance of the user in the hypercore\"}},\"constructor\":{\"details\":\"This constructor is called by the `HyperLiquidOFT` contractPost deployment, this address needs to be approved (via approveCaller) by the `owner` of the `HyperLiquidOFT` contract to call the `transferToHyperLiquidL1` function\",\"params\":{\"_coreIndexId\":\"The core index id of the HyperLiquid L1 contract\",\"_endpoint\":\"The LayerZero endpoint address\",\"_oft\":\"The OFT contract address associated with this composer\",\"_weiDiff\":\"The difference in decimals between the HyperEVM OFT deployment and HyperLiquid L1 HIP-1 listing\"}},\"lzCompose(address,bytes32,bytes,address,bytes)\":{\"details\":\"This function is called by the OFTCore contract when a message is sent\",\"params\":{\"_message\":\"The encoded message content, expected to be of type: (address receiver).\",\"_oft\":\"The address of the OFT contract.\"}},\"quoteHyperCoreAmount(uint256,bool)\":{\"params\":{\"_amount\":\"The amount of tokens to send\",\"_isOFT\":\"Whether the amount is an OFT amount or a HYPE amount\"},\"returns\":{\"_0\":\"IHyperAssetAmount - The amount of tokens to send to HyperCore (scaled on evm), dust (to be refunded), and the swap amount (of the tokens scaled on hypercore)\"}},\"refundERC20(address,uint256)\":{\"details\":\"If the refund address is set to the zero address - it means that the transaction sender is a non-evm address and the receiver is malformed.In this case, the tokens are locked in the composer.\",\"params\":{\"_amount\":\"The amount of tokens to refund\",\"_refundAddress\":\"The address to refund the native tokens to\"}},\"refundNativeTokens(address)\":{\"details\":\"It is possible that the refund address is a contract without fallback or receive functions - in that case the transfer fails and tokens will be locked in the contract.Since this is an external function - the msg.value can be different to the msg.value sent to the lzCompose function by tx.originIt is different in the case of a partial refund where the call is:`this.refundNativeTokens{ value: amounts.dust }(_receiver)`In this case, the msg.value is the amount of the dust and not the msg.value sent to the lzCompose function by tx.origin\",\"params\":{\"_refundAddress\":\"The address to refund the native tokens to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOfHyperCore(address,uint64)\":{\"notice\":\"External function to read the balance of the user in the hypercore\"},\"constructor\":{\"notice\":\"Constructor for the HyperLiquidComposer contractThis only supports ERC20 tokens\"},\"lzCompose(address,bytes32,bytes,address,bytes)\":{\"notice\":\"Composes a message to be sent to the HyperLiquidComposerThis function is the only new addition to the OFT standard\"},\"quoteHyperCoreAmount(uint256,bool)\":{\"notice\":\"External function to quote the conversion of evm tokens to hypercore tokens\"},\"refundERC20(address,uint256)\":{\"notice\":\"Refunds the native tokens to the refund addressThis function is called by the refundTokens function\"},\"refundNativeTokens(address)\":{\"notice\":\"Refunds the native tokens to the refund addressThis function is called by the refundTokens function\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HyperLiquidComposer.sol\":\"HyperLiquidComposer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@layerzerolabs/=node_modules/@layerzerolabs/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=node_modules/@layerzerolabs/toolbox-foundry/lib/ds-test/\",\":forge-std/=node_modules/@layerzerolabs/toolbox-foundry/lib/forge-std/\",\":hardhat/=node_modules/hardhat/\",\":solidity-bytes-utils/contracts/=node_modules/@layerzerolabs/toolbox-foundry/lib/solidity-bytes-utils/\"]},\"sources\":{\"contracts/HyperLiquidComposer.sol\":{\"keccak256\":\"0xe62cddcc0b667d7ed1114d773a076bbf20c409fb30d5a2d8b23f11bb505ce149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://14836d07edb91500455fed30b6917f8ed17b0e2d74ae4ac3f7ec9822b4b10fb4\",\"dweb:/ipfs/QmfHCstiYLFTVZ97gf7LGSJNAEWyUHiYrRQanajY9dSLJH\"]},\"contracts/HyperLiquidComposerCore.sol\":{\"keccak256\":\"0x3e434f92a67cf8ebe665165b67c61a9a4f44ff100c8d758e469149e44705644d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a0893f8b064c38db25dee123fac75c2f1fe8f4e734a565fb7cf89a8295cb674\",\"dweb:/ipfs/QmeyR1opq8nCj3bkPxvaKmaatcxQWVg6Vm728gZRkDzMg4\"]},\"contracts/interfaces/IHyperLiquidComposerCore.sol\":{\"keccak256\":\"0x18674ea2cf84642166ab12a717c341503f7c5d490ec52b14d4d20924f5ff17aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cdd6b1cc2428ce607117df50ede9cc12307cda7c332a1fd20143dbc3ea18274\",\"dweb:/ipfs/QmbmWTNbbf2jj3JFFQL8EwcaY4L9tXLPdrkGJYgPop9zda\"]},\"contracts/interfaces/IHyperLiquidComposerErrors.sol\":{\"keccak256\":\"0xb2444c6b5070d989f610d8dafff535ece8af031a78464f27f56af1cc74e06f69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a636fa5beff36bde5c49fa5433df8c6dc94a47b220d984eb8caf1004f2ea22c\",\"dweb:/ipfs/QmaZLvXPUnN2VxzsyG5EASRXVQCwG3JhExJF58Wa5ScoPy\"]},\"contracts/interfaces/IHyperLiquidReadPrecompile.sol\":{\"keccak256\":\"0x3a6df8d89dca4f7547bbdc912c92315020f88b50c648c55f04fcb3ecb47d9ae0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://836bc90fe0705ca588329e218253e375bc76752d762b76e31c5f568be1b9409f\",\"dweb:/ipfs/QmYMRCYqsKho9fHZcC8f4JBPSxx9p6a4zLL7nX8CDoZsXc\"]},\"contracts/interfaces/IHyperLiquidWritePrecompile.sol\":{\"keccak256\":\"0xbfa7d38d7675898af0def60823f15550730af3bacb64068a09e1746b21c2cf4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5cba8210ee21bd186dfddbaa2b3f1ceaeb597763cac1e6271c9ae6e8ff4b53f\",\"dweb:/ipfs/QmVV8BtvpwQQ3jqUdTEFs2nnT9Q7gxTajRqgJPmKQuforV\"]},\"contracts/library/HyperLiquidComposerCodec.sol\":{\"keccak256\":\"0x26e2d98f264344ec7d44110b294b72c84bda78eb89d43e7e8164b0e2972aa52d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eac0654e9b43c8fdba761bff402d3909bd7a65c1684c4794a975abb07895864d\",\"dweb:/ipfs/QmPa5guHnQoke2ToDfmu9ovwQdTRbjA6c3rh1T7QqjMEQs\"]},\"node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\":{\"keccak256\":\"0xfaca7205d4211ee9208a7e59171e2301731f3d2a20c49b4a839821871f5fdd49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f254bc60ac26687b5320a43a556e30777b0745abf7cd64d5f4720d9b1d1f7fdf\",\"dweb:/ipfs/QmRSJEZVgxaC3L2DdE6s8P5qkYfM3V5JMeseeFJJqGR4xz\"]},\"node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bacc29fd3866af71e59cb0bdc1cf82c882a4a7f4e2652fd413c9f12649762083\",\"dweb:/ipfs/QmZh2toLnrQDWaNYhS5K4NoW7Vxd2GdZx9KA77vKEDLAqs\"]},\"node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8ff6a8a89297fa127f86b54e0db3eba1d6a6eeb4f6398d3c84d569665ac8f1b\",\"dweb:/ipfs/QmVSwhw6xFDrLRAX4RXaCM47yBaBtac4wf36DYEq6KCTvT\"]},\"node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e1b245d58221d16d8b5e0f01ef3e289a24a7df1ace3b94239e4d5b954ad5927\",\"dweb:/ipfs/Qmappsgp7PCY9rSSNE9Cdn4BTRX591WfCSEgq2HxhA3z6S\"]},\"node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b18b23a1643fc6636c4ad9d9023e2e6ca2d3c2a4a046482d4655bff09950598d\",\"dweb:/ipfs/Qma6G5SqiovwrMPfgqTrRngK1HWW373Wkf9c6YP2NhXpPk\"]},\"node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5173fc9143bea314b159ca5a9adb5626659ef763bc598e27de5fa46efe3291a6\",\"dweb:/ipfs/QmSLFeMFPmVeGxT4sxRPW28ictjAS22M8rLeYRu9TXkA6D\"]},\"node_modules/@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://606515dd9193551bd2c94ac8c304f3776fafcc70e544ebf441f334658b2fd5f0\",\"dweb:/ipfs/QmZ88ey7DdZqV5taAoebabvszX5kdPMSrQCAmTteVdDtcH\"]},\"node_modules/@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d42b471418efadcc3577ef3fa9f8f504e8bed7db90c3b0c862038d8b29529eb2\",\"dweb:/ipfs/QmZETDQiJN4U92fmLKo8T9ZbdDf7BNBUUvo9H7M7GqAyFU\"]},\"node_modules/@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppComposer.sol\":{\"keccak256\":\"0xe5014c411acb2b59dd74ae74a1bab02cf32d94a41a548a5ab553d64aeeb55dae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29dfb7bc121002fc7e7931c34eb17af0ae0f0127dcc3199511c83a58a917160d\",\"dweb:/ipfs/QmPdq1wcRRBdUP169LHCLoLuPRunN9eR71TQN42FjGpowx\"]},\"node_modules/@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a1deb2a6a3eb1fb83936c9578469142bff470295f403d7d07d955a76be3adbd\",\"dweb:/ipfs/QmS9bjSfBaE4YhQ1PCQ1TknbEPbNfRXzBK9E7SaPGyiZEv\"]},\"node_modules/@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\":{\"keccak256\":\"0x7ba6bb62fba7ee83451cfb0e727ddeef0e96b4388bd4e9ff0fc6ce103e1101c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cfbd447f2e8a730bd46a14c3c3e6a0b2bf7446145579603a9793ba5ac1dd38b4\",\"dweb:/ipfs/QmZ4nx4iGrFmBHvYFgki5TXFdCHz4Co38hgdgwpRaM7NLs\"]},\"node_modules/@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol\":{\"keccak256\":\"0xaae73d6eb8b9561c43f1802f3c416c00ccd35f172b711f9781ccdf1b25a40db5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7beda2d895ae9e15269dd261a492ce0a29b498e5bebf088ed6f2ae6a5185719e\",\"dweb:/ipfs/QmScog2tW1YVyEPLVcUVqGGc85ub46sA28nUKNzFEZcFdK\"]},\"node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75f8c71ce0c91c40dd5f249ace0b7d8270f8f1767231bcf71490f7157d6ba862\",\"dweb:/ipfs/QmYXgxeDyFHvz3JsXxLEYN6GNUR44ThHeFj5XkpkgMoG4w\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c78e2aa4313323cecd1ef12a8d6265b96beee1a199923abf55d9a2a9e291ad23\",\"dweb:/ipfs/QmUTs2KStXucZezzFo3EYeqYu47utu56qrF7jj1Gue65vb\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"node_modules/@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.22+commit.4fc1097e" },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_endpoint",
              "type": "address"
            },
            { "internalType": "address", "name": "_oft", "type": "address" },
            {
              "internalType": "uint64",
              "name": "_coreIndexId",
              "type": "uint64"
            },
            { "internalType": "uint64", "name": "_weiDiff", "type": "uint64" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "errorMessage", "type": "bytes" }
          ],
          "type": "error",
          "name": "ErrorMsg"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "user", "type": "address" },
            { "internalType": "uint64", "name": "tokenId", "type": "uint64" }
          ],
          "type": "error",
          "name": "HyperLiquidComposerCore_SpotBalanceRead_Failed"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "amount", "type": "uint256" }
          ],
          "type": "error",
          "name": "HyperLiquidComposer_FailedToRefund_HYPE"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "amount", "type": "uint256" }
          ],
          "type": "error",
          "name": "HyperLiquidComposer_FailedToSend_HYPE"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "notComposerAddress",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "HyperLiquidComposer_InvalidCall_NotComposer"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "notEndpointAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "expectedEndpointAddress",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "HyperLiquidComposer_InvalidCall_NotEndpoint"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "internalOFTAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivedOFTAddress",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "HyperLiquidComposer_InvalidCall_NotOFT"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "errorMessage", "type": "bytes" }
          ],
          "type": "error",
          "name": "HyperLiquidComposer_InvalidComposeMessage"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "refundTo",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "refundAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ErrorERC20_Refund",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "refundTo",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "refundAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ErrorHYPE_Refund",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "reason",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ErrorMessage",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "amountCore",
              "type": "uint64",
              "indexed": false
            },
            {
              "internalType": "uint64",
              "name": "maxTransferableAmount",
              "type": "uint64",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OverflowDetected",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "HLP_PRECOMPILE_READ_SPOT_BALANCE",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "HLP_PRECOMPILE_WRITE",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "VALID_COMPOSE_MESSAGE_LENGTH_ENCODE",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "VALID_COMPOSE_MESSAGE_LENGTH_PACKED",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_user", "type": "address" },
            { "internalType": "uint64", "name": "_tokenId", "type": "uint64" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfHyperCore",
          "outputs": [
            { "internalType": "uint64", "name": "", "type": "uint64" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "endpoint",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getHypeAsset",
          "outputs": [
            {
              "internalType": "struct IHyperAsset",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "assetBridgeAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "coreIndexId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "decimalDiff",
                  "type": "uint64"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getOFTAsset",
          "outputs": [
            {
              "internalType": "struct IHyperAsset",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "assetBridgeAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "coreIndexId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "decimalDiff",
                  "type": "uint64"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "hypeAsset",
          "outputs": [
            {
              "internalType": "address",
              "name": "assetBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "coreIndexId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "decimalDiff",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_oft", "type": "address" },
            { "internalType": "bytes32", "name": "", "type": "bytes32" },
            { "internalType": "bytes", "name": "_message", "type": "bytes" },
            { "internalType": "address", "name": "", "type": "address" },
            { "internalType": "bytes", "name": "", "type": "bytes" }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "lzCompose"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "oft",
          "outputs": [
            { "internalType": "contract IOFT", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "oftAsset",
          "outputs": [
            {
              "internalType": "address",
              "name": "assetBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "coreIndexId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "decimalDiff",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_amount", "type": "uint256" },
            { "internalType": "bool", "name": "_isOFT", "type": "bool" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "quoteHyperCoreAmount",
          "outputs": [
            {
              "internalType": "struct IHyperAssetAmount",
              "name": "",
              "type": "tuple",
              "components": [
                { "internalType": "uint256", "name": "evm", "type": "uint256" },
                {
                  "internalType": "uint256",
                  "name": "dust",
                  "type": "uint256"
                },
                { "internalType": "uint64", "name": "core", "type": "uint64" }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_refundAddress",
              "type": "address"
            },
            { "internalType": "uint256", "name": "_amount", "type": "uint256" }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "refundERC20"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_refundAddress",
              "type": "address"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "refundNativeTokens"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token",
          "outputs": [
            { "internalType": "contract IERC20", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_maybeReceiver",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "_senderBytes32",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_amountLD",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "validate_addresses_or_refund",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_composeMessage",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "validate_payload",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" },
            { "internalType": "bytes32", "name": "", "type": "bytes32" },
            { "internalType": "bytes", "name": "", "type": "bytes" }
          ]
        },
        { "inputs": [], "stateMutability": "payable", "type": "receive" }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOfHyperCore(address,uint64)": {
            "params": {
              "_tokenId": "The token id of the hypercore",
              "_user": "The address of the user"
            },
            "returns": { "_0": "The balance of the user in the hypercore" }
          },
          "constructor": {
            "details": "This constructor is called by the `HyperLiquidOFT` contractPost deployment, this address needs to be approved (via approveCaller) by the `owner` of the `HyperLiquidOFT` contract to call the `transferToHyperLiquidL1` function",
            "params": {
              "_coreIndexId": "The core index id of the HyperLiquid L1 contract",
              "_endpoint": "The LayerZero endpoint address",
              "_oft": "The OFT contract address associated with this composer",
              "_weiDiff": "The difference in decimals between the HyperEVM OFT deployment and HyperLiquid L1 HIP-1 listing"
            }
          },
          "lzCompose(address,bytes32,bytes,address,bytes)": {
            "details": "This function is called by the OFTCore contract when a message is sent",
            "params": {
              "_message": "The encoded message content, expected to be of type: (address receiver).",
              "_oft": "The address of the OFT contract."
            }
          },
          "quoteHyperCoreAmount(uint256,bool)": {
            "params": {
              "_amount": "The amount of tokens to send",
              "_isOFT": "Whether the amount is an OFT amount or a HYPE amount"
            },
            "returns": {
              "_0": "IHyperAssetAmount - The amount of tokens to send to HyperCore (scaled on evm), dust (to be refunded), and the swap amount (of the tokens scaled on hypercore)"
            }
          },
          "refundERC20(address,uint256)": {
            "details": "If the refund address is set to the zero address - it means that the transaction sender is a non-evm address and the receiver is malformed.In this case, the tokens are locked in the composer.",
            "params": {
              "_amount": "The amount of tokens to refund",
              "_refundAddress": "The address to refund the native tokens to"
            }
          },
          "refundNativeTokens(address)": {
            "details": "It is possible that the refund address is a contract without fallback or receive functions - in that case the transfer fails and tokens will be locked in the contract.Since this is an external function - the msg.value can be different to the msg.value sent to the lzCompose function by tx.originIt is different in the case of a partial refund where the call is:`this.refundNativeTokens{ value: amounts.dust }(_receiver)`In this case, the msg.value is the amount of the dust and not the msg.value sent to the lzCompose function by tx.origin",
            "params": {
              "_refundAddress": "The address to refund the native tokens to"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "balanceOfHyperCore(address,uint64)": {
            "notice": "External function to read the balance of the user in the hypercore"
          },
          "constructor": {
            "notice": "Constructor for the HyperLiquidComposer contractThis only supports ERC20 tokens"
          },
          "lzCompose(address,bytes32,bytes,address,bytes)": {
            "notice": "Composes a message to be sent to the HyperLiquidComposerThis function is the only new addition to the OFT standard"
          },
          "quoteHyperCoreAmount(uint256,bool)": {
            "notice": "External function to quote the conversion of evm tokens to hypercore tokens"
          },
          "refundERC20(address,uint256)": {
            "notice": "Refunds the native tokens to the refund addressThis function is called by the refundTokens function"
          },
          "refundNativeTokens(address)": {
            "notice": "Refunds the native tokens to the refund addressThis function is called by the refundTokens function"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@layerzerolabs/=node_modules/@layerzerolabs/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=node_modules/@layerzerolabs/toolbox-foundry/lib/ds-test/",
        "forge-std/=node_modules/@layerzerolabs/toolbox-foundry/lib/forge-std/",
        "hardhat/=node_modules/hardhat/",
        "solidity-bytes-utils/contracts/=node_modules/@layerzerolabs/toolbox-foundry/lib/solidity-bytes-utils/"
      ],
      "optimizer": { "enabled": false, "runs": 200 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": {
        "contracts/HyperLiquidComposer.sol": "HyperLiquidComposer"
      },
      "evmVersion": "shanghai",
      "libraries": {}
    },
    "sources": {
      "contracts/HyperLiquidComposer.sol": {
        "keccak256": "0xe62cddcc0b667d7ed1114d773a076bbf20c409fb30d5a2d8b23f11bb505ce149",
        "urls": [
          "bzz-raw://14836d07edb91500455fed30b6917f8ed17b0e2d74ae4ac3f7ec9822b4b10fb4",
          "dweb:/ipfs/QmfHCstiYLFTVZ97gf7LGSJNAEWyUHiYrRQanajY9dSLJH"
        ],
        "license": "MIT"
      },
      "contracts/HyperLiquidComposerCore.sol": {
        "keccak256": "0x3e434f92a67cf8ebe665165b67c61a9a4f44ff100c8d758e469149e44705644d",
        "urls": [
          "bzz-raw://5a0893f8b064c38db25dee123fac75c2f1fe8f4e734a565fb7cf89a8295cb674",
          "dweb:/ipfs/QmeyR1opq8nCj3bkPxvaKmaatcxQWVg6Vm728gZRkDzMg4"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IHyperLiquidComposerCore.sol": {
        "keccak256": "0x18674ea2cf84642166ab12a717c341503f7c5d490ec52b14d4d20924f5ff17aa",
        "urls": [
          "bzz-raw://5cdd6b1cc2428ce607117df50ede9cc12307cda7c332a1fd20143dbc3ea18274",
          "dweb:/ipfs/QmbmWTNbbf2jj3JFFQL8EwcaY4L9tXLPdrkGJYgPop9zda"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IHyperLiquidComposerErrors.sol": {
        "keccak256": "0xb2444c6b5070d989f610d8dafff535ece8af031a78464f27f56af1cc74e06f69",
        "urls": [
          "bzz-raw://0a636fa5beff36bde5c49fa5433df8c6dc94a47b220d984eb8caf1004f2ea22c",
          "dweb:/ipfs/QmaZLvXPUnN2VxzsyG5EASRXVQCwG3JhExJF58Wa5ScoPy"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IHyperLiquidReadPrecompile.sol": {
        "keccak256": "0x3a6df8d89dca4f7547bbdc912c92315020f88b50c648c55f04fcb3ecb47d9ae0",
        "urls": [
          "bzz-raw://836bc90fe0705ca588329e218253e375bc76752d762b76e31c5f568be1b9409f",
          "dweb:/ipfs/QmYMRCYqsKho9fHZcC8f4JBPSxx9p6a4zLL7nX8CDoZsXc"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IHyperLiquidWritePrecompile.sol": {
        "keccak256": "0xbfa7d38d7675898af0def60823f15550730af3bacb64068a09e1746b21c2cf4b",
        "urls": [
          "bzz-raw://a5cba8210ee21bd186dfddbaa2b3f1ceaeb597763cac1e6271c9ae6e8ff4b53f",
          "dweb:/ipfs/QmVV8BtvpwQQ3jqUdTEFs2nnT9Q7gxTajRqgJPmKQuforV"
        ],
        "license": "MIT"
      },
      "contracts/library/HyperLiquidComposerCodec.sol": {
        "keccak256": "0x26e2d98f264344ec7d44110b294b72c84bda78eb89d43e7e8164b0e2972aa52d",
        "urls": [
          "bzz-raw://eac0654e9b43c8fdba761bff402d3909bd7a65c1684c4794a975abb07895864d",
          "dweb:/ipfs/QmPa5guHnQoke2ToDfmu9ovwQdTRbjA6c3rh1T7QqjMEQs"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol": {
        "keccak256": "0xfaca7205d4211ee9208a7e59171e2301731f3d2a20c49b4a839821871f5fdd49",
        "urls": [
          "bzz-raw://f254bc60ac26687b5320a43a556e30777b0745abf7cd64d5f4720d9b1d1f7fdf",
          "dweb:/ipfs/QmRSJEZVgxaC3L2DdE6s8P5qkYfM3V5JMeseeFJJqGR4xz"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol": {
        "keccak256": "0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3",
        "urls": [
          "bzz-raw://bacc29fd3866af71e59cb0bdc1cf82c882a4a7f4e2652fd413c9f12649762083",
          "dweb:/ipfs/QmZh2toLnrQDWaNYhS5K4NoW7Vxd2GdZx9KA77vKEDLAqs"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol": {
        "keccak256": "0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc",
        "urls": [
          "bzz-raw://d8ff6a8a89297fa127f86b54e0db3eba1d6a6eeb4f6398d3c84d569665ac8f1b",
          "dweb:/ipfs/QmVSwhw6xFDrLRAX4RXaCM47yBaBtac4wf36DYEq6KCTvT"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol": {
        "keccak256": "0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972",
        "urls": [
          "bzz-raw://7e1b245d58221d16d8b5e0f01ef3e289a24a7df1ace3b94239e4d5b954ad5927",
          "dweb:/ipfs/Qmappsgp7PCY9rSSNE9Cdn4BTRX591WfCSEgq2HxhA3z6S"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol": {
        "keccak256": "0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901",
        "urls": [
          "bzz-raw://b18b23a1643fc6636c4ad9d9023e2e6ca2d3c2a4a046482d4655bff09950598d",
          "dweb:/ipfs/Qma6G5SqiovwrMPfgqTrRngK1HWW373Wkf9c6YP2NhXpPk"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol": {
        "keccak256": "0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e",
        "urls": [
          "bzz-raw://5173fc9143bea314b159ca5a9adb5626659ef763bc598e27de5fa46efe3291a6",
          "dweb:/ipfs/QmSLFeMFPmVeGxT4sxRPW28ictjAS22M8rLeYRu9TXkA6D"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol": {
        "keccak256": "0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc",
        "urls": [
          "bzz-raw://606515dd9193551bd2c94ac8c304f3776fafcc70e544ebf441f334658b2fd5f0",
          "dweb:/ipfs/QmZ88ey7DdZqV5taAoebabvszX5kdPMSrQCAmTteVdDtcH"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol": {
        "keccak256": "0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20",
        "urls": [
          "bzz-raw://d42b471418efadcc3577ef3fa9f8f504e8bed7db90c3b0c862038d8b29529eb2",
          "dweb:/ipfs/QmZETDQiJN4U92fmLKo8T9ZbdDf7BNBUUvo9H7M7GqAyFU"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppComposer.sol": {
        "keccak256": "0xe5014c411acb2b59dd74ae74a1bab02cf32d94a41a548a5ab553d64aeeb55dae",
        "urls": [
          "bzz-raw://29dfb7bc121002fc7e7931c34eb17af0ae0f0127dcc3199511c83a58a917160d",
          "dweb:/ipfs/QmPdq1wcRRBdUP169LHCLoLuPRunN9eR71TQN42FjGpowx"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol": {
        "keccak256": "0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58",
        "urls": [
          "bzz-raw://4a1deb2a6a3eb1fb83936c9578469142bff470295f403d7d07d955a76be3adbd",
          "dweb:/ipfs/QmS9bjSfBaE4YhQ1PCQ1TknbEPbNfRXzBK9E7SaPGyiZEv"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol": {
        "keccak256": "0x7ba6bb62fba7ee83451cfb0e727ddeef0e96b4388bd4e9ff0fc6ce103e1101c8",
        "urls": [
          "bzz-raw://cfbd447f2e8a730bd46a14c3c3e6a0b2bf7446145579603a9793ba5ac1dd38b4",
          "dweb:/ipfs/QmZ4nx4iGrFmBHvYFgki5TXFdCHz4Co38hgdgwpRaM7NLs"
        ],
        "license": "MIT"
      },
      "node_modules/@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol": {
        "keccak256": "0xaae73d6eb8b9561c43f1802f3c416c00ccd35f172b711f9781ccdf1b25a40db5",
        "urls": [
          "bzz-raw://7beda2d895ae9e15269dd261a492ce0a29b498e5bebf088ed6f2ae6a5185719e",
          "dweb:/ipfs/QmScog2tW1YVyEPLVcUVqGGc85ub46sA28nUKNzFEZcFdK"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/access/Ownable.sol": {
        "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
        "urls": [
          "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
          "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol": {
        "keccak256": "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
        "urls": [
          "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
          "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC165.sol": {
        "keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
        "urls": [
          "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
          "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC20.sol": {
        "keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
        "urls": [
          "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
          "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310",
        "urls": [
          "bzz-raw://75f8c71ce0c91c40dd5f249ace0b7d8270f8f1767231bcf71490f7157d6ba862",
          "dweb:/ipfs/QmYXgxeDyFHvz3JsXxLEYN6GNUR44ThHeFj5XkpkgMoG4w"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5",
        "urls": [
          "bzz-raw://c78e2aa4313323cecd1ef12a8d6265b96beee1a199923abf55d9a2a9e291ad23",
          "dweb:/ipfs/QmUTs2KStXucZezzFo3EYeqYu47utu56qrF7jj1Gue65vb"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Context.sol": {
        "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        "urls": [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Errors.sol": {
        "keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
        "urls": [
          "bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
          "dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/HyperLiquidComposer.sol",
    "id": 387,
    "exportedSymbols": {
      "HyperLiquidComposer": [386],
      "HyperLiquidComposerCodec": [1582],
      "HyperLiquidComposerCore": [873],
      "IERC20": [46722],
      "IHyperAsset": [897],
      "IHyperAssetAmount": [904],
      "IHyperLiquidComposerErrors": [1051],
      "IHyperLiquidWritePrecompile": [1291],
      "IOAppComposer": [3448],
      "IOFT": [5118],
      "OFTComposeMsgCodec": [5287]
    },
    "nodeType": "SourceUnit",
    "src": "32:11080:0",
    "nodes": [
      {
        "id": 1,
        "nodeType": "PragmaDirective",
        "src": "32:23:0",
        "nodes": [],
        "literals": ["solidity", "^", "0.8", ".0"]
      },
      {
        "id": 3,
        "nodeType": "ImportDirective",
        "src": "57:76:0",
        "nodes": [],
        "absolutePath": "node_modules/@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol",
        "file": "@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 387,
        "sourceUnit": 5119,
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "IOFT",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5118,
              "src": "66:4:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 5,
        "nodeType": "ImportDirective",
        "src": "134:72:0",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 387,
        "sourceUnit": 46723,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46722,
              "src": "143:6:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 7,
        "nodeType": "ImportDirective",
        "src": "207:98:0",
        "nodes": [],
        "absolutePath": "node_modules/@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol",
        "file": "@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 387,
        "sourceUnit": 5288,
        "symbolAliases": [
          {
            "foreign": {
              "id": 6,
              "name": "OFTComposeMsgCodec",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5287,
              "src": "216:18:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 9,
        "nodeType": "ImportDirective",
        "src": "306:100:0",
        "nodes": [],
        "absolutePath": "node_modules/@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppComposer.sol",
        "file": "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppComposer.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 387,
        "sourceUnit": 3449,
        "symbolAliases": [
          {
            "foreign": {
              "id": 8,
              "name": "IOAppComposer",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3448,
              "src": "315:13:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 11,
        "nodeType": "ImportDirective",
        "src": "408:82:0",
        "nodes": [],
        "absolutePath": "contracts/library/HyperLiquidComposerCodec.sol",
        "file": "./library/HyperLiquidComposerCodec.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 387,
        "sourceUnit": 1583,
        "symbolAliases": [
          {
            "foreign": {
              "id": 10,
              "name": "HyperLiquidComposerCodec",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1582,
              "src": "417:24:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 13,
        "nodeType": "ImportDirective",
        "src": "492:91:0",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IHyperLiquidWritePrecompile.sol",
        "file": "./interfaces/IHyperLiquidWritePrecompile.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 387,
        "sourceUnit": 1292,
        "symbolAliases": [
          {
            "foreign": {
              "id": 12,
              "name": "IHyperLiquidWritePrecompile",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1291,
              "src": "501:27:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 15,
        "nodeType": "ImportDirective",
        "src": "584:89:0",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IHyperLiquidComposerErrors.sol",
        "file": "./interfaces/IHyperLiquidComposerErrors.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 387,
        "sourceUnit": 1052,
        "symbolAliases": [
          {
            "foreign": {
              "id": 14,
              "name": "IHyperLiquidComposerErrors",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1051,
              "src": "593:26:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 19,
        "nodeType": "ImportDirective",
        "src": "675:104:0",
        "nodes": [],
        "absolutePath": "contracts/HyperLiquidComposerCore.sol",
        "file": "./HyperLiquidComposerCore.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 387,
        "sourceUnit": 874,
        "symbolAliases": [
          {
            "foreign": {
              "id": 16,
              "name": "HyperLiquidComposerCore",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 873,
              "src": "684:23:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 17,
              "name": "IHyperAsset",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 897,
              "src": "709:11:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 18,
              "name": "IHyperAssetAmount",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 904,
              "src": "722:17:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 386,
        "nodeType": "ContractDefinition",
        "src": "781:10330:0",
        "nodes": [
          {
            "id": 26,
            "nodeType": "UsingForDirective",
            "src": "858:42:0",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 24,
              "name": "HyperLiquidComposerCodec",
              "nameLocations": ["864:24:0"],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1582,
              "src": "864:24:0"
            },
            "typeName": {
              "id": 25,
              "name": "uint64",
              "nodeType": "ElementaryTypeName",
              "src": "893:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint64",
                "typeString": "uint64"
              }
            }
          },
          {
            "id": 77,
            "nodeType": "FunctionDefinition",
            "src": "1615:1698:0",
            "nodes": [],
            "body": {
              "id": 76,
              "nodeType": "Block",
              "src": "1698:1615:0",
              "nodes": [],
              "statements": [
                {
                  "documentation": "@dev Hyperliquid L1 contract address is the prefix (0x2000...0000) + the core index id\n @dev This is the address that the OFT contract will transfer the tokens to when we want to send tokens between HyperEVM and HyperLiquid L1\n @dev https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/hyperevm/hypercore-less-than-greater-than-hyperevm-transfers#system-addresses",
                  "expression": {
                    "id": 46,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 38,
                      "name": "oftAsset",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 463,
                      "src": "2116:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_IHyperAsset_$897_storage",
                        "typeString": "struct IHyperAsset storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 40,
                              "name": "_coreIndexId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33,
                              "src": "2173:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "id": 41,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2186:23:0",
                            "memberName": "into_assetBridgeAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1347,
                            "src": "2173:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_address_$attached_to$_t_uint256_$",
                              "typeString": "function (uint256) pure returns (address)"
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2173:38:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 43,
                          "name": "_coreIndexId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33,
                          "src": "2238:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "id": 44,
                          "name": "_weiDiff",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35,
                          "src": "2277:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        ],
                        "id": 39,
                        "name": "IHyperAsset",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 897,
                        "src": "2127:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_IHyperAsset_$897_storage_ptr_$",
                          "typeString": "type(struct IHyperAsset storage pointer)"
                        }
                      },
                      "id": 45,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "nameLocations": ["2153:18:0", "2225:11:0", "2264:11:0"],
                      "names": [
                        "assetBridgeAddress",
                        "coreIndexId",
                        "decimalDiff"
                      ],
                      "nodeType": "FunctionCall",
                      "src": "2127:169:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_IHyperAsset_$897_memory_ptr",
                        "typeString": "struct IHyperAsset memory"
                      }
                    },
                    "src": "2116:180:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_IHyperAsset_$897_storage",
                      "typeString": "struct IHyperAsset storage ref"
                    }
                  },
                  "id": 47,
                  "nodeType": "ExpressionStatement",
                  "src": "2116:180:0"
                },
                {
                  "documentation": "@dev HYPE Core Spot address on HyperLiquid L1 - is a special address which is a precompile and has it's own asset bridge address which can be found here:\n @dev https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/hyperevm/hypercore-less-than-greater-than-hyperevm-transfers#system-addresses\n @dev The following contains information about the HYPE Core Spot:\n @dev https://app.hyperliquid-testnet.xyz/explorer/token/0x7317beb7cceed72ef0b346074cc8e7ab",
                  "expression": {
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 48,
                      "name": "hypeAsset",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 466,
                      "src": "2812:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_IHyperAsset_$897_storage",
                        "typeString": "struct IHyperAsset storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "307832323232323232323232323232323232323232323232323232323232323232323232323232323232",
                          "id": 50,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2870:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "value": "0x2222222222222222222222222222222222222222"
                        },
                        {
                          "hexValue": "31313035",
                          "id": 51,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2939:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1105_by_1",
                            "typeString": "int_const 1105"
                          },
                          "value": "1105"
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "id": 54,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3138",
                            "id": 52,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3139:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_18_by_1",
                              "typeString": "int_const 18"
                            },
                            "value": "18"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "hexValue": "38",
                            "id": 53,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3144:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_8_by_1",
                              "typeString": "int_const 8"
                            },
                            "value": "8"
                          },
                          "src": "3139:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_rational_1105_by_1",
                            "typeString": "int_const 1105"
                          },
                          {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          }
                        ],
                        "id": 49,
                        "name": "IHyperAsset",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 897,
                        "src": "2824:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_IHyperAsset_$897_storage_ptr_$",
                          "typeString": "type(struct IHyperAsset storage pointer)"
                        }
                      },
                      "id": 55,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "nameLocations": ["2850:18:0", "2926:11:0", "3126:11:0"],
                      "names": [
                        "assetBridgeAddress",
                        "coreIndexId",
                        "decimalDiff"
                      ],
                      "nodeType": "FunctionCall",
                      "src": "2824:332:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_IHyperAsset_$897_memory_ptr",
                        "typeString": "struct IHyperAsset memory"
                      }
                    },
                    "src": "2812:344:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_IHyperAsset_$897_storage",
                      "typeString": "struct IHyperAsset storage ref"
                    }
                  },
                  "id": 57,
                  "nodeType": "ExpressionStatement",
                  "src": "2812:344:0"
                },
                {
                  "expression": {
                    "id": 62,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 58,
                      "name": "oft",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 457,
                      "src": "3223:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IOFT_$5118",
                        "typeString": "contract IOFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 60,
                          "name": "_oft",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 31,
                          "src": "3234:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 59,
                        "name": "IOFT",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5118,
                        "src": "3229:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IOFT_$5118_$",
                          "typeString": "type(contract IOFT)"
                        }
                      },
                      "id": 61,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3229:10:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IOFT_$5118",
                        "typeString": "contract IOFT"
                      }
                    },
                    "src": "3223:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IOFT_$5118",
                      "typeString": "contract IOFT"
                    }
                  },
                  "id": 63,
                  "nodeType": "ExpressionStatement",
                  "src": "3223:16:0"
                },
                {
                  "expression": {
                    "id": 70,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 64,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 460,
                      "src": "3249:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$46722",
                        "typeString": "contract IERC20"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 66,
                              "name": "oft",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 457,
                              "src": "3264:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IOFT_$5118",
                                "typeString": "contract IOFT"
                              }
                            },
                            "id": 67,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3268:5:0",
                            "memberName": "token",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5058,
                            "src": "3264:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                              "typeString": "function () view external returns (address)"
                            }
                          },
                          "id": 68,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3264:11:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 65,
                        "name": "IERC20",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46722,
                        "src": "3257:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IERC20_$46722_$",
                          "typeString": "type(contract IERC20)"
                        }
                      },
                      "id": 69,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3257:19:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$46722",
                        "typeString": "contract IERC20"
                      }
                    },
                    "src": "3249:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$46722",
                      "typeString": "contract IERC20"
                    }
                  },
                  "id": 71,
                  "nodeType": "ExpressionStatement",
                  "src": "3249:27:0"
                },
                {
                  "expression": {
                    "id": 74,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72,
                      "name": "endpoint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 454,
                      "src": "3286:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 73,
                      "name": "_endpoint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29,
                      "src": "3297:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3286:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 75,
                  "nodeType": "ExpressionStatement",
                  "src": "3286:20:0"
                }
              ]
            },
            "documentation": {
              "id": 27,
              "nodeType": "StructuredDocumentation",
              "src": "906:704:0",
              "text": "@notice Constructor for the HyperLiquidComposer contract\n @notice This only supports ERC20 tokens\n @dev This constructor is called by the `HyperLiquidOFT` contract\n @dev Post deployment, this address needs to be approved (via approveCaller) by the `owner` of the `HyperLiquidOFT` contract to call the `transferToHyperLiquidL1` function\n @param _endpoint The LayerZero endpoint address\n @param _oft The OFT contract address associated with this composer\n @param _coreIndexId The core index id of the HyperLiquid L1 contract\n @param _weiDiff The difference in decimals between the HyperEVM OFT deployment and HyperLiquid L1 HIP-1 listing"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29,
                  "mutability": "mutable",
                  "name": "_endpoint",
                  "nameLocation": "1635:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 77,
                  "src": "1627:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1627:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 31,
                  "mutability": "mutable",
                  "name": "_oft",
                  "nameLocation": "1654:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 77,
                  "src": "1646:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 30,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1646:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33,
                  "mutability": "mutable",
                  "name": "_coreIndexId",
                  "nameLocation": "1667:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 77,
                  "src": "1660:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 32,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1660:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "_weiDiff",
                  "nameLocation": "1688:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 77,
                  "src": "1681:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1681:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1626:71:0"
            },
            "returnParameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1698:0:0"
            },
            "scope": 386,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 229,
            "nodeType": "FunctionDefinition",
            "src": "3717:2764:0",
            "nodes": [],
            "body": {
              "id": 228,
              "nodeType": "Block",
              "src": "3928:2553:0",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 98,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 94,
                          "name": "endpoint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 454,
                          "src": "4255:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 93,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4247:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 92,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4247:7:0",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 95,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4247:17:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "expression": {
                        "id": 96,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4268:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4272:6:0",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4268:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4247:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev The following reverts are for when the contract is incorrectly called.\n @dev There are no refunds involved in these reverts.",
                  "id": 111,
                  "nodeType": "IfStatement",
                  "src": "4243:216:0",
                  "trueBody": {
                    "id": 110,
                    "nodeType": "Block",
                    "src": "4280:179:0",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 104,
                                  "name": "endpoint",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 454,
                                  "src": "4397:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 103,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4389:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 102,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4389:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 105,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4389:17:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 106,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4424:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 107,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4428:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4424:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 99,
                              "name": "IHyperLiquidComposerErrors",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1051,
                              "src": "4301:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IHyperLiquidComposerErrors_$1051_$",
                                "typeString": "type(contract IHyperLiquidComposerErrors)"
                              }
                            },
                            "id": 101,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4328:43:0",
                            "memberName": "HyperLiquidComposer_InvalidCall_NotEndpoint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1014,
                            "src": "4301:70:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address) pure"
                            }
                          },
                          "id": 108,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4301:147:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 109,
                        "nodeType": "RevertStatement",
                        "src": "4294:154:0"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 117,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 114,
                          "name": "oft",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 457,
                          "src": "4481:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IOFT_$5118",
                            "typeString": "contract IOFT"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IOFT_$5118",
                            "typeString": "contract IOFT"
                          }
                        ],
                        "id": 113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4473:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 112,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4473:7:0",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 115,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4473:12:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 116,
                      "name": "_oft",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80,
                      "src": "4489:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4473:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 129,
                  "nodeType": "IfStatement",
                  "src": "4469:143:0",
                  "trueBody": {
                    "id": 128,
                    "nodeType": "Block",
                    "src": "4495:117:0",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 123,
                                  "name": "oft",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 457,
                                  "src": "4590:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IOFT_$5118",
                                    "typeString": "contract IOFT"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IOFT_$5118",
                                    "typeString": "contract IOFT"
                                  }
                                ],
                                "id": 122,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4582:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 121,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4582:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 124,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4582:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 125,
                              "name": "_oft",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80,
                              "src": "4596:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 118,
                              "name": "IHyperLiquidComposerErrors",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1051,
                              "src": "4516:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IHyperLiquidComposerErrors_$1051_$",
                                "typeString": "type(contract IHyperLiquidComposerErrors)"
                              }
                            },
                            "id": 120,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4543:38:0",
                            "memberName": "HyperLiquidComposer_InvalidCall_NotOFT",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1020,
                            "src": "4516:65:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address) pure"
                            }
                          },
                          "id": 126,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4516:85:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 127,
                        "nodeType": "RevertStatement",
                        "src": "4509:92:0"
                      }
                    ]
                  }
                },
                {
                  "assignments": [131],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 131,
                      "mutability": "mutable",
                      "name": "receiver",
                      "nameLocation": "4630:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 228,
                      "src": "4622:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 130,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4622:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 132,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4622:16:0"
                },
                {
                  "assignments": [134],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 134,
                      "mutability": "mutable",
                      "name": "amountLD",
                      "nameLocation": "4656:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 228,
                      "src": "4648:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 133,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4648:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 135,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4648:16:0"
                },
                {
                  "assignments": [137],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 137,
                      "mutability": "mutable",
                      "name": "maybeEVMSender",
                      "nameLocation": "4682:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 228,
                      "src": "4674:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 136,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4674:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 138,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4674:22:0"
                },
                {
                  "assignments": [140],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 140,
                      "mutability": "mutable",
                      "name": "maybeEVMReceiver",
                      "nameLocation": "4719:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 228,
                      "src": "4706:29:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 139,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "4706:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 141,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4706:29:0"
                },
                {
                  "clauses": [
                    {
                      "block": {
                        "id": 165,
                        "nodeType": "Block",
                        "src": "5255:145:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 155,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 153,
                                "name": "amountLD",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 134,
                                "src": "5269:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "id": 154,
                                "name": "_amountLD",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 147,
                                "src": "5280:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5269:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 156,
                            "nodeType": "ExpressionStatement",
                            "src": "5269:20:0"
                          },
                          {
                            "expression": {
                              "id": 159,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 157,
                                "name": "maybeEVMSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 137,
                                "src": "5303:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "id": 158,
                                "name": "_maybeSenderBytes32",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 149,
                                "src": "5320:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "src": "5303:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "id": 160,
                            "nodeType": "ExpressionStatement",
                            "src": "5303:36:0"
                          },
                          {
                            "expression": {
                              "id": 163,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 161,
                                "name": "maybeEVMReceiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 140,
                                "src": "5353:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "id": 162,
                                "name": "_maybeEVMReceiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 151,
                                "src": "5372:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "src": "5353:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 164,
                            "nodeType": "ExpressionStatement",
                            "src": "5353:36:0"
                          }
                        ]
                      },
                      "errorName": "",
                      "id": 166,
                      "nodeType": "TryCatchClause",
                      "parameters": {
                        "id": 152,
                        "nodeType": "ParameterList",
                        "parameters": [
                          {
                            "constant": false,
                            "id": 147,
                            "mutability": "mutable",
                            "name": "_amountLD",
                            "nameLocation": "5150:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 166,
                            "src": "5142:17:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 146,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5142:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 149,
                            "mutability": "mutable",
                            "name": "_maybeSenderBytes32",
                            "nameLocation": "5181:19:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 166,
                            "src": "5173:27:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 148,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "5173:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 151,
                            "mutability": "mutable",
                            "name": "_maybeEVMReceiver",
                            "nameLocation": "5227:17:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 166,
                            "src": "5214:30:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 150,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5214:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "src": "5128:126:0"
                      },
                      "src": "5120:280:0"
                    },
                    {
                      "block": {
                        "id": 176,
                        "nodeType": "Block",
                        "src": "5427:106:0",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "id": 173,
                                  "name": "_err",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "5517:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "expression": {
                                  "id": 170,
                                  "name": "IHyperLiquidComposerErrors",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1051,
                                  "src": "5448:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IHyperLiquidComposerErrors_$1051_$",
                                    "typeString": "type(contract IHyperLiquidComposerErrors)"
                                  }
                                },
                                "id": 172,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5475:41:0",
                                "memberName": "HyperLiquidComposer_InvalidComposeMessage",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1028,
                                "src": "5448:68:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_bytes_memory_ptr_$returns$__$",
                                  "typeString": "function (bytes memory) pure"
                                }
                              },
                              "id": 174,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5448:74:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 175,
                            "nodeType": "RevertStatement",
                            "src": "5441:81:0"
                          }
                        ]
                      },
                      "errorName": "",
                      "id": 177,
                      "nodeType": "TryCatchClause",
                      "parameters": {
                        "id": 169,
                        "nodeType": "ParameterList",
                        "parameters": [
                          {
                            "constant": false,
                            "id": 168,
                            "mutability": "mutable",
                            "name": "_err",
                            "nameLocation": "5421:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 177,
                            "src": "5408:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 167,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5408:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "src": "5407:19:0"
                      },
                      "src": "5401:132:0"
                    }
                  ],
                  "documentation": "@dev Checks if the payload contains a compose message that can be sliced to extract the amount, sender as bytes32, and receiver as bytes\n @dev The slice ranges can be found in OFTComposeMsgCodec.sol\n @dev If the payload is invalid, the function will revert with the error message and there is no refunds",
                  "externalCall": {
                    "arguments": [
                      {
                        "id": 144,
                        "name": "_message",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "5110:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "id": 142,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "5088:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_HyperLiquidComposer_$386",
                          "typeString": "contract HyperLiquidComposer"
                        }
                      },
                      "id": 143,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5093:16:0",
                      "memberName": "validate_payload",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 506,
                      "src": "5088:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$_t_bytes32_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) pure external returns (uint256,bytes32,bytes memory)"
                      }
                    },
                    "id": 145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5088:31:0",
                    "tryCall": true,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_bytes32_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(uint256,bytes32,bytes memory)"
                    }
                  },
                  "id": 178,
                  "nodeType": "TryStatement",
                  "src": "5084:449:0"
                },
                {
                  "clauses": [
                    {
                      "block": {
                        "id": 192,
                        "nodeType": "Block",
                        "src": "5983:45:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 190,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 188,
                                "name": "receiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 131,
                                "src": "5997:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "id": 189,
                                "name": "_receiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 186,
                                "src": "6008:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "5997:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 191,
                            "nodeType": "ExpressionStatement",
                            "src": "5997:20:0"
                          }
                        ]
                      },
                      "errorName": "",
                      "id": 193,
                      "nodeType": "TryCatchClause",
                      "parameters": {
                        "id": 187,
                        "nodeType": "ParameterList",
                        "parameters": [
                          {
                            "constant": false,
                            "id": 186,
                            "mutability": "mutable",
                            "name": "_receiver",
                            "nameLocation": "5972:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 193,
                            "src": "5964:17:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 185,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5964:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "src": "5963:19:0"
                      },
                      "src": "5955:73:0"
                    },
                    {
                      "block": {
                        "id": 208,
                        "nodeType": "Block",
                        "src": "6055:177:0",
                        "statements": [
                          {
                            "assignments": [198],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 198,
                                "mutability": "mutable",
                                "name": "errMsg",
                                "nameLocation": "6082:6:0",
                                "nodeType": "VariableDeclaration",
                                "scope": 208,
                                "src": "6069:19:0",
                                "stateVariable": false,
                                "storageLocation": "memory",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes"
                                },
                                "typeName": {
                                  "id": 197,
                                  "name": "bytes",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "6069:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_storage_ptr",
                                    "typeString": "bytes"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 202,
                            "initialValue": {
                              "arguments": [
                                {
                                  "id": 200,
                                  "name": "_err",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 195,
                                  "src": "6106:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 199,
                                "name": "completeRefund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 773,
                                "src": "6091:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory) returns (bytes memory)"
                                }
                              },
                              "id": 201,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6091:20:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "6069:42:0"
                          },
                          {
                            "eventCall": {
                              "arguments": [
                                {
                                  "id": 204,
                                  "name": "errMsg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 198,
                                  "src": "6143:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 203,
                                "name": "ErrorMessage",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "6130:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_event_nonpayable$_t_bytes_memory_ptr_$returns$__$",
                                  "typeString": "function (bytes memory)"
                                }
                              },
                              "id": 205,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6130:20:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 206,
                            "nodeType": "EmitStatement",
                            "src": "6125:25:0"
                          },
                          {
                            "functionReturnParameters": 91,
                            "id": 207,
                            "nodeType": "Return",
                            "src": "6215:7:0"
                          }
                        ]
                      },
                      "errorName": "",
                      "id": 209,
                      "nodeType": "TryCatchClause",
                      "parameters": {
                        "id": 196,
                        "nodeType": "ParameterList",
                        "parameters": [
                          {
                            "constant": false,
                            "id": 195,
                            "mutability": "mutable",
                            "name": "_err",
                            "nameLocation": "6049:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "6036:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 194,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "6036:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "src": "6035:19:0"
                      },
                      "src": "6029:203:0"
                    }
                  ],
                  "documentation": "@dev Checks if the receiver and sender are valid addresses\n @dev If the addresses are invalid, the function will emit an error message and try a complete refund to the receiver else the sender\n @dev If developers want custom error messages they need to implement their own custom revert messages",
                  "externalCall": {
                    "arguments": [
                      {
                        "id": 181,
                        "name": "maybeEVMReceiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 140,
                        "src": "5911:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "id": 182,
                        "name": "maybeEVMSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 137,
                        "src": "5929:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 183,
                        "name": "amountLD",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 134,
                        "src": "5945:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 179,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "5877:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_HyperLiquidComposer_$386",
                          "typeString": "contract HyperLiquidComposer"
                        }
                      },
                      "id": 180,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5882:28:0",
                      "memberName": "validate_addresses_or_refund",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 563,
                      "src": "5877:33:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_pure$_t_bytes_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (bytes memory,bytes32,uint256) pure external returns (address)"
                      }
                    },
                    "id": 184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5877:77:0",
                    "tryCall": true,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 210,
                  "nodeType": "TryStatement",
                  "src": "5873:359:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 214,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 211,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "6339:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 212,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6343:5:0",
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "6339:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 213,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6351:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "6339:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev If the message is being sent with a value, we fund the address on HyperCore",
                  "id": 222,
                  "nodeType": "IfStatement",
                  "src": "6335:88:0",
                  "trueBody": {
                    "id": 221,
                    "nodeType": "Block",
                    "src": "6354:69:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 216,
                              "name": "receiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 131,
                              "src": "6392:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 217,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "6402:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 218,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6406:5:0",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "6402:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 215,
                            "name": "_fundAddressOnHyperCore",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "6368:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 219,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6368:44:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 220,
                        "nodeType": "ExpressionStatement",
                        "src": "6368:44:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 224,
                        "name": "receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 131,
                        "src": "6455:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 225,
                        "name": "amountLD",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 134,
                        "src": "6465:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 223,
                      "name": "_sendAssetToHyperCore",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 281,
                      "src": "6433:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 226,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6433:41:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 227,
                  "nodeType": "ExpressionStatement",
                  "src": "6433:41:0"
                }
              ]
            },
            "baseFunctions": [1599],
            "documentation": {
              "id": 78,
              "nodeType": "StructuredDocumentation",
              "src": "3319:393:0",
              "text": "@notice Composes a message to be sent to the HyperLiquidComposer\n @notice This function is the only new addition to the OFT standard\n @dev This function is called by the OFTCore contract when a message is sent\n @param _oft The address of the OFT contract.\n @param _message The encoded message content, expected to be of type: (address receiver)."
            },
            "functionSelector": "d0a10260",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lzCompose",
            "nameLocation": "3726:9:0",
            "overrides": {
              "id": 90,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3919:8:0"
            },
            "parameters": {
              "id": 89,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 80,
                  "mutability": "mutable",
                  "name": "_oft",
                  "nameLocation": "3753:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 229,
                  "src": "3745:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3745:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 82,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 229,
                  "src": "3767:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3767:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 84,
                  "mutability": "mutable",
                  "name": "_message",
                  "nameLocation": "3809:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 229,
                  "src": "3794:23:0",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 83,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3794:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 86,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 229,
                  "src": "3827:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 85,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3827:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 88,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 229,
                  "src": "3858:14:0",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 87,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3858:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3735:158:0"
            },
            "returnParameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3928:0:0"
            },
            "scope": 386,
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 281,
            "nodeType": "FunctionDefinition",
            "src": "7461:1140:0",
            "nodes": [],
            "body": {
              "id": 280,
              "nodeType": "Block",
              "src": "7547:1054:0",
              "nodes": [],
              "statements": [
                {
                  "assignments": [240],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 240,
                      "mutability": "mutable",
                      "name": "amounts",
                      "nameLocation": "8044:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 280,
                      "src": "8019:32:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                        "typeString": "struct IHyperAssetAmount"
                      },
                      "typeName": {
                        "id": 239,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 238,
                          "name": "IHyperAssetAmount",
                          "nameLocations": ["8019:17:0"],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 904,
                          "src": "8019:17:0"
                        },
                        "referencedDeclaration": 904,
                        "src": "8019:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_storage_ptr",
                          "typeString": "struct IHyperAssetAmount"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Computes the tokens to send to HyperCore, dust (refund amount), and the swap amount.\n @dev It also takes into account the maximum transferable amount at any given time.\n @dev This is done by reading from HLP_PRECOMPILE_READ_SPOT_BALANCE the tokens on the HyperCore side of the asset bridge\n @notice The swap amount (HIP1) and tokens to send (ERC20) are different because they have different decimals",
                  "id": 245,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 242,
                        "name": "_amountLD",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 234,
                        "src": "8075:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 243,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8086:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        { "typeIdentifier": "t_bool", "typeString": "bool" }
                      ],
                      "id": 241,
                      "name": "quoteHyperCoreAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 618,
                      "src": "8054:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$_t_struct$_IHyperAssetAmount_$904_memory_ptr_$",
                        "typeString": "function (uint256,bool) returns (struct IHyperAssetAmount memory)"
                      }
                    },
                    "id": 244,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8054:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                      "typeString": "struct IHyperAssetAmount memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8019:72:0"
                },
                {
                  "documentation": "Transfers the tokens to the composer address on HyperCore",
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 249,
                          "name": "oftAsset",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 463,
                          "src": "8187:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_IHyperAsset_$897_storage",
                            "typeString": "struct IHyperAsset storage ref"
                          }
                        },
                        "id": 250,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8196:18:0",
                        "memberName": "assetBridgeAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 892,
                        "src": "8187:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 251,
                          "name": "amounts",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 240,
                          "src": "8216:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                            "typeString": "struct IHyperAssetAmount memory"
                          }
                        },
                        "id": 252,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8224:3:0",
                        "memberName": "evm",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 899,
                        "src": "8216:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 246,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 460,
                        "src": "8172:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$46722",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 248,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8178:8:0",
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 46689,
                      "src": "8172:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8172:56:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 254,
                  "nodeType": "ExpressionStatement",
                  "src": "8172:56:0"
                },
                {
                  "documentation": "Transfers tokens from the composer address on HyperCore to the _receiver",
                  "expression": {
                    "arguments": [
                      {
                        "id": 259,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 232,
                        "src": "8383:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 260,
                          "name": "oftAsset",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 463,
                          "src": "8394:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_IHyperAsset_$897_storage",
                            "typeString": "struct IHyperAsset storage ref"
                          }
                        },
                        "id": 261,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8403:11:0",
                        "memberName": "coreIndexId",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 894,
                        "src": "8394:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "expression": {
                          "id": 262,
                          "name": "amounts",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 240,
                          "src": "8416:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                            "typeString": "struct IHyperAssetAmount memory"
                          }
                        },
                        "id": 263,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8424:4:0",
                        "memberName": "core",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 903,
                        "src": "8416:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        { "typeIdentifier": "t_uint64", "typeString": "uint64" }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 256,
                            "name": "HLP_PRECOMPILE_WRITE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 449,
                            "src": "8352:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 255,
                          "name": "IHyperLiquidWritePrecompile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1291,
                          "src": "8324:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IHyperLiquidWritePrecompile_$1291_$",
                            "typeString": "type(contract IHyperLiquidWritePrecompile)"
                          }
                        },
                        "id": 257,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8324:49:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IHyperLiquidWritePrecompile_$1291",
                          "typeString": "contract IHyperLiquidWritePrecompile"
                        }
                      },
                      "id": 258,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8374:8:0",
                      "memberName": "sendSpot",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1283,
                      "src": "8324:58:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint64_$_t_uint64_$returns$__$",
                        "typeString": "function (address,uint64,uint64) external"
                      }
                    },
                    "id": 264,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8324:105:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 265,
                  "nodeType": "ExpressionStatement",
                  "src": "8324:105:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 269,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 266,
                        "name": "amounts",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 240,
                        "src": "8513:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                          "typeString": "struct IHyperAssetAmount memory"
                        }
                      },
                      "id": 267,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8521:4:0",
                      "memberName": "dust",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 901,
                      "src": "8513:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 268,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8528:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "8513:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "Transfers any leftover dust to the _receiver on HyperEVM",
                  "id": 279,
                  "nodeType": "IfStatement",
                  "src": "8509:86:0",
                  "trueBody": {
                    "id": 278,
                    "nodeType": "Block",
                    "src": "8531:64:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 273,
                              "name": "_receiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 232,
                              "src": "8560:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 274,
                                "name": "amounts",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 240,
                                "src": "8571:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                                  "typeString": "struct IHyperAssetAmount memory"
                                }
                              },
                              "id": 275,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8579:4:0",
                              "memberName": "dust",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 901,
                              "src": "8571:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 270,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 460,
                              "src": "8545:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$46722",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 272,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8551:8:0",
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 46689,
                            "src": "8545:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 276,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8545:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 277,
                        "nodeType": "ExpressionStatement",
                        "src": "8545:39:0"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 230,
              "nodeType": "StructuredDocumentation",
              "src": "6487:969:0",
              "text": "@notice Transfers the asset to the _receiver on HyperCore through the SpotSend precompile\n @notice Transfers any leftover dust to the _receiver\n @notice This function is called by the lzCompose function\n @dev The composer transfers the tokens to it's address on HyperCore\n @dev The composer then transfers the tokens from it's address on HyperCore to the _receiver via the SpotSend precompile\n @dev The SpotSend precompile is a precompile on HyperEVM that allows for token transfers on HyperCore\n @dev The transfer to HyperCore via the assetBridgeAddress and the SpotSend precompile is done in the same transaction\n @dev Hyperliquid guarantees sequential transactions but not atomicity of the transfer.\n @dev Transfers are primitive transactions and are always expected to pass.\n @param _receiver The address of the receiver\n @param _amountLD The amount of tokens to send"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_sendAssetToHyperCore",
            "nameLocation": "7470:21:0",
            "parameters": {
              "id": 235,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 232,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "7500:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 281,
                  "src": "7492:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 231,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7492:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 234,
                  "mutability": "mutable",
                  "name": "_amountLD",
                  "nameLocation": "7519:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 281,
                  "src": "7511:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 233,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7511:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7491:38:0"
            },
            "returnParameters": {
              "id": 236,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7547:0:0"
            },
            "scope": 386,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 381,
            "nodeType": "FunctionDefinition",
            "src": "9311:1763:0",
            "nodes": [],
            "body": {
              "id": 380,
              "nodeType": "Block",
              "src": "9397:1677:0",
              "nodes": [],
              "statements": [
                {
                  "assignments": [292],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 292,
                      "mutability": "mutable",
                      "name": "amounts",
                      "nameLocation": "9894:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 380,
                      "src": "9869:32:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                        "typeString": "struct IHyperAssetAmount"
                      },
                      "typeName": {
                        "id": 291,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 290,
                          "name": "IHyperAssetAmount",
                          "nameLocations": ["9869:17:0"],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 904,
                          "src": "9869:17:0"
                        },
                        "referencedDeclaration": 904,
                        "src": "9869:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_storage_ptr",
                          "typeString": "struct IHyperAssetAmount"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Computes the tokens to send to HyperCore, dust (refund amount), and the swap amount.\n @dev It also takes into account the maximum transferable amount at any given time.\n @dev This is done by reading from HLP_PRECOMPILE_READ_SPOT_BALANCE the tokens on the HyperCore side of the asset bridge\n @notice The swap amount (HIP1) and tokens to send (ERC20) are different because they have different decimals",
                  "id": 297,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 294,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 286,
                        "src": "9925:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 295,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9934:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        { "typeIdentifier": "t_bool", "typeString": "bool" }
                      ],
                      "id": 293,
                      "name": "quoteHyperCoreAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 618,
                      "src": "9904:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$_t_struct$_IHyperAssetAmount_$904_memory_ptr_$",
                        "typeString": "function (uint256,bool) returns (struct IHyperAssetAmount memory)"
                      }
                    },
                    "id": 296,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9904:36:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                      "typeString": "struct IHyperAssetAmount memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9869:71:0"
                },
                {
                  "assignments": [299, null],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 299,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "10032:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 380,
                      "src": "10027:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 298,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "10027:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "documentation": "Transfers the HYPE tokens to the composer address on HyperCore",
                  "id": 311,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 309,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10110:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 302,
                                "name": "hypeAsset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 466,
                                "src": "10053:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_IHyperAsset_$897_storage",
                                  "typeString": "struct IHyperAsset storage ref"
                                }
                              },
                              "id": 303,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "10063:18:0",
                              "memberName": "assetBridgeAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 892,
                              "src": "10053:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 301,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10045:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_payable_$",
                              "typeString": "type(address payable)"
                            },
                            "typeName": {
                              "id": 300,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10045:8:0",
                              "stateMutability": "payable",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 304,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10045:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "id": 305,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "10083:4:0",
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "10045:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 308,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": ["value"],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "expression": {
                            "id": 306,
                            "name": "amounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 292,
                            "src": "10096:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                              "typeString": "struct IHyperAssetAmount memory"
                            }
                          },
                          "id": 307,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "10104:3:0",
                          "memberName": "evm",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 899,
                          "src": "10096:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "10045:64:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 310,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10045:68:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10026:87:0"
                },
                {
                  "condition": {
                    "id": 313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "10127:8:0",
                    "subExpression": {
                      "id": 312,
                      "name": "success",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 299,
                      "src": "10128:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 321,
                  "nodeType": "IfStatement",
                  "src": "10123:119:0",
                  "trueBody": {
                    "id": 320,
                    "nodeType": "Block",
                    "src": "10137:105:0",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 317,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 286,
                              "src": "10223:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 314,
                              "name": "IHyperLiquidComposerErrors",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1051,
                              "src": "10158:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IHyperLiquidComposerErrors_$1051_$",
                                "typeString": "type(contract IHyperLiquidComposerErrors)"
                              }
                            },
                            "id": 316,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "10185:37:0",
                            "memberName": "HyperLiquidComposer_FailedToSend_HYPE",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1038,
                            "src": "10158:64:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) pure"
                            }
                          },
                          "id": 318,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10158:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 319,
                        "nodeType": "RevertStatement",
                        "src": "10151:80:0"
                      }
                    ]
                  }
                },
                {
                  "documentation": "Transfers HYPE tokens from the composer address on HyperCore to the _receiver via the SpotSend precompile",
                  "expression": {
                    "arguments": [
                      {
                        "id": 326,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 284,
                        "src": "10429:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 327,
                          "name": "hypeAsset",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 466,
                          "src": "10440:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_IHyperAsset_$897_storage",
                            "typeString": "struct IHyperAsset storage ref"
                          }
                        },
                        "id": 328,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "10450:11:0",
                        "memberName": "coreIndexId",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 894,
                        "src": "10440:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "expression": {
                          "id": 329,
                          "name": "amounts",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 292,
                          "src": "10463:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                            "typeString": "struct IHyperAssetAmount memory"
                          }
                        },
                        "id": 330,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "10471:4:0",
                        "memberName": "core",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 903,
                        "src": "10463:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        { "typeIdentifier": "t_uint64", "typeString": "uint64" }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 323,
                            "name": "HLP_PRECOMPILE_WRITE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 449,
                            "src": "10398:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 322,
                          "name": "IHyperLiquidWritePrecompile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1291,
                          "src": "10370:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IHyperLiquidWritePrecompile_$1291_$",
                            "typeString": "type(contract IHyperLiquidWritePrecompile)"
                          }
                        },
                        "id": 324,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10370:49:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IHyperLiquidWritePrecompile_$1291",
                          "typeString": "contract IHyperLiquidWritePrecompile"
                        }
                      },
                      "id": 325,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10420:8:0",
                      "memberName": "sendSpot",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1283,
                      "src": "10370:58:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint64_$_t_uint64_$returns$__$",
                        "typeString": "function (address,uint64,uint64) external"
                      }
                    },
                    "id": 331,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10370:106:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 332,
                  "nodeType": "ExpressionStatement",
                  "src": "10370:106:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 336,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 333,
                        "name": "amounts",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 292,
                        "src": "10685:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                          "typeString": "struct IHyperAssetAmount memory"
                        }
                      },
                      "id": 334,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10693:4:0",
                      "memberName": "dust",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 901,
                      "src": "10685:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 335,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10700:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "10685:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev Tries transferring any leftover dust to the _receiver on HyperEVM\n @dev If the transfer fails, we refund the tx.origin as to not have any dust locked in the contract",
                  "id": 379,
                  "nodeType": "IfStatement",
                  "src": "10681:387:0",
                  "trueBody": {
                    "id": 378,
                    "nodeType": "Block",
                    "src": "10703:365:0",
                    "statements": [
                      {
                        "clauses": [
                          {
                            "block": {
                              "id": 344,
                              "nodeType": "Block",
                              "src": "10779:2:0",
                              "statements": []
                            },
                            "errorName": "",
                            "id": 345,
                            "nodeType": "TryCatchClause",
                            "src": "10779:2:0"
                          },
                          {
                            "block": {
                              "id": 375,
                              "nodeType": "Block",
                              "src": "10788:270:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 356,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "components": [
                                        {
                                          "id": 346,
                                          "name": "success",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 299,
                                          "src": "10807:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        null
                                      ],
                                      "id": 347,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "TupleExpression",
                                      "src": "10806:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$_t_bool_$__$",
                                        "typeString": "tuple(bool,)"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "arguments": [
                                        {
                                          "hexValue": "",
                                          "id": 354,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "10858:2:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                            "typeString": "literal_string \"\""
                                          },
                                          "value": ""
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                            "typeString": "literal_string \"\""
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                              "typeString": "literal_string \"\""
                                            }
                                          ],
                                          "expression": {
                                            "expression": {
                                              "id": 348,
                                              "name": "tx",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -26,
                                              "src": "10820:2:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_magic_transaction",
                                                "typeString": "tx"
                                              }
                                            },
                                            "id": 349,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "10823:6:0",
                                            "memberName": "origin",
                                            "nodeType": "MemberAccess",
                                            "src": "10820:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "id": 350,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "10830:4:0",
                                          "memberName": "call",
                                          "nodeType": "MemberAccess",
                                          "src": "10820:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                          }
                                        },
                                        "id": 353,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "names": ["value"],
                                        "nodeType": "FunctionCallOptions",
                                        "options": [
                                          {
                                            "expression": {
                                              "id": 351,
                                              "name": "amounts",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 292,
                                              "src": "10843:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                                                "typeString": "struct IHyperAssetAmount memory"
                                              }
                                            },
                                            "id": 352,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "10851:4:0",
                                            "memberName": "dust",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 901,
                                            "src": "10843:12:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "src": "10820:37:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                        }
                                      },
                                      "id": 355,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "10820:41:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                        "typeString": "tuple(bool,bytes memory)"
                                      }
                                    },
                                    "src": "10806:55:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 357,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10806:55:0"
                                },
                                {
                                  "condition": {
                                    "id": 359,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "!",
                                    "prefix": true,
                                    "src": "10883:8:0",
                                    "subExpression": {
                                      "id": 358,
                                      "name": "success",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 299,
                                      "src": "10884:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 368,
                                  "nodeType": "IfStatement",
                                  "src": "10879:101:0",
                                  "trueBody": {
                                    "id": 367,
                                    "nodeType": "Block",
                                    "src": "10893:87:0",
                                    "statements": [
                                      {
                                        "eventCall": {
                                          "arguments": [
                                            {
                                              "expression": {
                                                "id": 361,
                                                "name": "tx",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": -26,
                                                "src": "10937:2:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_magic_transaction",
                                                  "typeString": "tx"
                                                }
                                              },
                                              "id": 362,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberLocation": "10940:6:0",
                                              "memberName": "origin",
                                              "nodeType": "MemberAccess",
                                              "src": "10937:9:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            {
                                              "expression": {
                                                "id": 363,
                                                "name": "amounts",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 292,
                                                "src": "10948:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                                                  "typeString": "struct IHyperAssetAmount memory"
                                                }
                                              },
                                              "id": 364,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberLocation": "10956:4:0",
                                              "memberName": "dust",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 901,
                                              "src": "10948:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              },
                                              {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            ],
                                            "id": 360,
                                            "name": "ErrorHYPE_Refund",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 916,
                                            "src": "10920:16:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                              "typeString": "function (address,uint256)"
                                            }
                                          },
                                          "id": 365,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "nameLocations": [],
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "10920:41:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                          }
                                        },
                                        "id": 366,
                                        "nodeType": "EmitStatement",
                                        "src": "10915:46:0"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "eventCall": {
                                    "arguments": [
                                      {
                                        "id": 370,
                                        "name": "_receiver",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 284,
                                        "src": "11019:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "expression": {
                                          "id": 371,
                                          "name": "amounts",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 292,
                                          "src": "11030:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                                            "typeString": "struct IHyperAssetAmount memory"
                                          }
                                        },
                                        "id": 372,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "11038:4:0",
                                        "memberName": "dust",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 901,
                                        "src": "11030:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 369,
                                      "name": "ErrorHYPE_Refund",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 916,
                                      "src": "11002:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256)"
                                      }
                                    },
                                    "id": 373,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "11002:41:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 374,
                                  "nodeType": "EmitStatement",
                                  "src": "10997:46:0"
                                }
                              ]
                            },
                            "errorName": "",
                            "id": 376,
                            "nodeType": "TryCatchClause",
                            "src": "10782:276:0"
                          }
                        ],
                        "externalCall": {
                          "arguments": [
                            {
                              "id": 342,
                              "name": "_receiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 284,
                              "src": "10768:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 337,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "10721:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_HyperLiquidComposer_$386",
                                  "typeString": "contract HyperLiquidComposer"
                                }
                              },
                              "id": 338,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "10726:18:0",
                              "memberName": "refundNativeTokens",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 854,
                              "src": "10721:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                                "typeString": "function (address) payable external"
                              }
                            },
                            "id": 341,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": ["value"],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "expression": {
                                  "id": 339,
                                  "name": "amounts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 292,
                                  "src": "10753:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_IHyperAssetAmount_$904_memory_ptr",
                                    "typeString": "struct IHyperAssetAmount memory"
                                  }
                                },
                                "id": 340,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10761:4:0",
                                "memberName": "dust",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 901,
                                "src": "10753:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "10721:46:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                              "typeString": "function (address) payable external"
                            }
                          },
                          "id": 343,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10721:57:0",
                          "tryCall": true,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 377,
                        "nodeType": "TryStatement",
                        "src": "10717:341:0"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 282,
              "nodeType": "StructuredDocumentation",
              "src": "8607:699:0",
              "text": "@notice Funds the address on HyperCore with the amount of HYPE tokens\n @notice This function is called by the lzCompose function\n @notice This is a precompile which makes it different to _sendAssetToHyperCore\n @dev The composer transfers HYPE that is received from the lzCompose call to it's address on HyperCore\n @dev The composer then transfers the HYPE from it's address on HyperCore to the _receiver via the SpotSend precompile\n @dev The SpotSend precompile is a precompile on HyperEVM that allows for token transfers on HyperCore\n @param _receiver The address of the receiver\n @param _amount The amount of HYPE tokens to send"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_fundAddressOnHyperCore",
            "nameLocation": "9320:23:0",
            "parameters": {
              "id": 287,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 284,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "9352:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 381,
                  "src": "9344:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 283,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9344:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 286,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "9371:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 381,
                  "src": "9363:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 285,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9363:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9343:36:0"
            },
            "returnParameters": {
              "id": 288,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9397:0:0"
            },
            "scope": 386,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 385,
            "nodeType": "FunctionDefinition",
            "src": "11080:29:0",
            "nodes": [],
            "body": {
              "id": 384,
              "nodeType": "Block",
              "src": "11107:2:0",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11087:2:0"
            },
            "returnParameters": {
              "id": 383,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11107:0:0"
            },
            "scope": 386,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 20,
              "name": "HyperLiquidComposerCore",
              "nameLocations": ["813:23:0"],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 873,
              "src": "813:23:0"
            },
            "id": 21,
            "nodeType": "InheritanceSpecifier",
            "src": "813:23:0"
          },
          {
            "baseName": {
              "id": 22,
              "name": "IOAppComposer",
              "nameLocations": ["838:13:0"],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3448,
              "src": "838:13:0"
            },
            "id": 23,
            "nodeType": "InheritanceSpecifier",
            "src": "838:13:0"
          }
        ],
        "canonicalName": "HyperLiquidComposer",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [386, 3448, 1600, 873, 995],
        "name": "HyperLiquidComposer",
        "nameLocation": "790:19:0",
        "scope": 387,
        "usedErrors": [1008, 1014, 1020, 1024, 1028, 1034, 1038, 1050],
        "usedEvents": [910, 916, 920, 1328]
      }
    ],
    "license": "MIT"
  },
  "id": 0
}
