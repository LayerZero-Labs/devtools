events {}

http {
  # We will modify the log  format to include the target_network
  log_format proxied '$remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" '
                     'Network: "$target_network"';

  server {
    # This proxy server will listen on port 8545
    # 
    # Even though it's not ideal to have this hardcoded, this port
    # will be remapped to a desired host port using docker compose,
    # the only issue this hardcoding brings is the fact that this port
    # needs to match the container port in the compose spec
    listen 8545;
    listen [::]:8545;

    # We will add a simple endpoint for healthcheck
    location /health-check {
      access_log	off;
      error_log	off;
      return 200 'ok';
    }

    # In this section we'll proxy all the requests to this server
    # to the respective network nodes
    # 
    # The requests are proxied based on the first path segment:
    # 
    # http://localhost/fuji -> http://fuji:8545/
    # 
    # For now the remaining path segments are not being preserved:
    # 
    # # http://localhost/fuji/some/url -> http://fuji:8545/
    location / {
      # Set the log format to be our custom 'proxied' log format
      access_log /var/log/nginx/access.log proxied;

      resolver 127.0.0.11;
      autoindex off;

      # This variable will hold the name of the network to proxy to
      set $target_network '';

      # Extract the first path segment from the request URI
      if ($request_uri ~* ^/(?<target_network>[^/]+)(/.*)?$) {
        set $target_network $1;
      }

      # Proxy the request to the appropriate network
      proxy_pass http://$target_network:8545/;
    }
  }
}