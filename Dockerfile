#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'
#
#          Base node image with just the build tools
#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'
FROM node:18.16.0 as base

ENV YARN_CACHE_FOLDER=/tmp/yarn_cache

# Update the system packages
RUN apt-get update
RUN apt-get install -y \
    # Get the envsubst command (see below)
    gettext-base

#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'
#
#                Image with pruned source code
#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'
FROM base as builder

# The name of the package we're building here
# 
# e.g. @layerzerolabs/ua-utils
ARG PACKAGE

WORKDIR /app

# We'll only use this turbo to prune the workspace, we don't care what version we use here
RUN yarn global add turbo

COPY . .

# We'll use turbo prune to remove the unneeded packages
# and separate the package.json / yarn.lock from the source code
# 
# This allows us to cache the yarn install step
# 
# See more here https://turbo.build/repo/docs/reference/command-line-reference/prune
# And here https://turbo.build/repo/docs/handbook/deploying-with-docker
RUN turbo prune $PACKAGE --docker

#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'
#
#            Image with all dependencies installed
#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'
FROM base as dependencies

ARG NPM_TOKEN

WORKDIR /app

# In this step we'll only use the package.json / yarn.lock files generated by turbo prune
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock

# Get the .npmrc under a different name since envsubst will not work in place
# due to how pipes work on linux
# 
# envsubst is a neat little thing that can substitute environment variables in a string
# and we can use it to keep NPM_TOKEN secret
# 
# What we do is :
# 
# - We pass the NPM_TOKEN as ARG
# - Set it as ENV variable only for the envsubst command so that it does not hang in the environment
# - Replace the environment variables in .npmrctemplate
# - Pipe the result to .npmrc
# 
# We cannot do it in place (i.e. envsubst < .npmrc > .npmrc) because how linux works
# (it will create the output .npmrc file first, the pipe to it - but since it is now empty nothing will be piped)
COPY .npmrc .npmrctemplate

RUN \
    #  Mount yarn cache
    --mount=type=cache,target=/tmp/yarn_cache \
    # Substitute NPM_TOKEN in .npmrc
    NPM_TOKEN=$NPM_TOKEN envsubst < .npmrctemplate > .npmrc && \
    # Install dependencies (fail if we forgot to update the lockfile)
    yarn install --prefer-offline --frozen-lockfile --non-interactive && \
    # Remove .npmrc/.npmrctemplate immediately
    rm -rf .npmrc .npmrctemplate

#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'
#
#               Image that builds the package
#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'
FROM dependencies as build

# The name of the package we're building here
# 
# e.g. @layerzerolabs/ua-utils
ARG PACKAGE

WORKDIR /app

# For some reason we're missing tsconfig.json when using turbo prune
COPY tsconfig.json ./

# Now we grab the full source code from the builder step
COPY --from=builder /app/out/full/ .

# And finally we build the package
RUN yarn build --filter=$PACKAGE...